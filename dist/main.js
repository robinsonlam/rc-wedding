!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){var i;
/*!
 * jQuery JavaScript Library v3.5.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-04-10T15:07Z
 */!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,o){"use strict";var r=[],s=Object.getPrototypeOf,a=r.slice,l=r.flat?function(e){return r.flat.call(e)}:function(e){return r.concat.apply([],e)},c=r.push,u=r.indexOf,d={},f=d.toString,p=d.hasOwnProperty,h=p.toString,g=h.call(Object),v={},m=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},y=function(e){return null!=e&&e===e.window},b=n.document,w={type:!0,src:!0,nonce:!0,noModule:!0};function T(e,t,n){var i,o,r=(n=n||b).createElement("script");if(r.text=e,t)for(i in w)(o=t[i]||t.getAttribute&&t.getAttribute(i))&&r.setAttribute(i,o);n.head.appendChild(r).parentNode.removeChild(r)}function S(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[f.call(e)]||"object":typeof e}var x=function(e,t){return new x.fn.init(e,t)};function _(e){var t=!!e&&"length"in e&&e.length,n=S(e);return!m(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}x.fn=x.prototype={jquery:"3.5.0",constructor:x,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return x.each(this,e)},map:function(e){return this.pushStack(x.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(x.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(x.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:r.sort,splice:r.splice},x.extend=x.fn.extend=function(){var e,t,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||m(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)i=e[t],"__proto__"!==t&&s!==i&&(c&&i&&(x.isPlainObject(i)||(o=Array.isArray(i)))?(n=s[t],r=o&&!Array.isArray(n)?[]:o||x.isPlainObject(n)?n:{},o=!1,s[t]=x.extend(c,r,i)):void 0!==i&&(s[t]=i));return s},x.extend({expando:"jQuery"+("3.5.0"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==f.call(e))&&(!(t=s(e))||"function"==typeof(n=p.call(t,"constructor")&&t.constructor)&&h.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){T(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(_(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(_(Object(e))?x.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,o=e.length;i<n;i++)e[o++]=t[i];return e.length=o,e},grep:function(e,t,n){for(var i=[],o=0,r=e.length,s=!n;o<r;o++)!t(e[o],o)!==s&&i.push(e[o]);return i},map:function(e,t,n){var i,o,r=0,s=[];if(_(e))for(i=e.length;r<i;r++)null!=(o=t(e[r],r,n))&&s.push(o);else for(r in e)null!=(o=t(e[r],r,n))&&s.push(o);return l(s)},guid:1,support:v}),"function"==typeof Symbol&&(x.fn[Symbol.iterator]=r[Symbol.iterator]),x.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var E=
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
function(e){var t,n,i,o,r,s,a,l,c,u,d,f,p,h,g,v,m,y,b,w="sizzle"+1*new Date,T=e.document,S=0,x=0,_=le(),E=le(),C=le(),k=le(),A=function(e,t){return e===t&&(d=!0),0},D={}.hasOwnProperty,O=[],L=O.pop,N=O.push,I=O.push,j=O.slice,H=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",$="[\\x20\\t\\r\\n\\f]",M="(?:\\\\[\\da-fA-F]{1,6}"+$+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",R="\\["+$+"*("+M+")(?:"+$+"*([*^$|!~]?=)"+$+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+M+"))|)"+$+"*\\]",q=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",z=new RegExp($+"+","g"),W=new RegExp("^"+$+"+|((?:^|[^\\\\])(?:\\\\.)*)"+$+"+$","g"),F=new RegExp("^"+$+"*,"+$+"*"),B=new RegExp("^"+$+"*([>+~]|"+$+")"+$+"*"),U=new RegExp($+"|>"),Y=new RegExp(q),X=new RegExp("^"+M+"$"),V={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+$+"*(even|odd|(([+-]|)(\\d*)n|)"+$+"*(?:([+-]|)"+$+"*(\\d+)|))"+$+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+$+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+$+"*((?:-\\d)?\\d*)"+$+"*\\)|)(?=[^-]|$)","i")},K=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+$+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){f()},se=we((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{I.apply(O=j.call(T.childNodes),T.childNodes),O[T.childNodes.length].nodeType}catch(e){I={apply:O.length?function(e,t){N.apply(e,j.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function ae(e,t,i,o){var r,a,c,u,d,h,m,y=t&&t.ownerDocument,T=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==T&&9!==T&&11!==T)return i;if(!o&&(f(t),t=t||p,g)){if(11!==T&&(d=Z.exec(e)))if(r=d[1]){if(9===T){if(!(c=t.getElementById(r)))return i;if(c.id===r)return i.push(c),i}else if(y&&(c=y.getElementById(r))&&b(t,c)&&c.id===r)return i.push(c),i}else{if(d[2])return I.apply(i,t.getElementsByTagName(e)),i;if((r=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return I.apply(i,t.getElementsByClassName(r)),i}if(n.qsa&&!k[e+" "]&&(!v||!v.test(e))&&(1!==T||"object"!==t.nodeName.toLowerCase())){if(m=e,y=t,1===T&&(U.test(e)||B.test(e))){for((y=ee.test(e)&&me(t.parentNode)||t)===t&&n.scope||((u=t.getAttribute("id"))?u=u.replace(ie,oe):t.setAttribute("id",u=w)),a=(h=s(e)).length;a--;)h[a]=(u?"#"+u:":scope")+" "+be(h[a]);m=h.join(",")}try{return I.apply(i,y.querySelectorAll(m)),i}catch(t){k(e,!0)}finally{u===w&&t.removeAttribute("id")}}}return l(e.replace(W,"$1"),t,i,o)}function le(){var e=[];return function t(n,o){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function ce(e){return e[w]=!0,e}function ue(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),o=n.length;o--;)i.attrHandle[n[o]]=t}function fe(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function pe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ge(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ve(e){return ce((function(t){return t=+t,ce((function(n,i){for(var o,r=e([],n.length,t),s=r.length;s--;)n[o=r[s]]&&(n[o]=!(i[o]=n[o]))}))}))}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ae.support={},r=ae.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!K.test(t||n&&n.nodeName||"HTML")},f=ae.setDocument=function(e){var t,o,s=e?e.ownerDocument||e:T;return s!=p&&9===s.nodeType&&s.documentElement?(h=(p=s).documentElement,g=!r(p),T!=p&&(o=p.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",re,!1):o.attachEvent&&o.attachEvent("onunload",re)),n.scope=ue((function(e){return h.appendChild(e).appendChild(p.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ue((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ue((function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(p.getElementsByClassName),n.getById=ue((function(e){return h.appendChild(e).id=w,!p.getElementsByName||!p.getElementsByName(w).length})),n.getById?(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,i,o,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(o=t.getElementsByName(e),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],o=0,r=t.getElementsByTagName(e);if("*"===e){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},m=[],v=[],(n.qsa=J.test(p.querySelectorAll))&&(ue((function(e){var t;h.appendChild(e).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+$+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+$+"*(?:value|"+P+")"),e.querySelectorAll("[id~="+w+"-]").length||v.push("~="),(t=p.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||v.push("\\["+$+"*name"+$+"*="+$+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+w+"+*").length||v.push(".#.+[+~]"),e.querySelectorAll("\\\f"),v.push("[\\r\\n\\f]")})),ue((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+$+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")}))),(n.matchesSelector=J.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),m.push("!=",q)})),v=v.length&&new RegExp(v.join("|")),m=m.length&&new RegExp(m.join("|")),t=J.test(h.compareDocumentPosition),b=t||J.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},A=t?function(e,t){if(e===t)return d=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e==p||e.ownerDocument==T&&b(T,e)?-1:t==p||t.ownerDocument==T&&b(T,t)?1:u?H(u,e)-H(u,t):0:4&i?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,i=0,o=e.parentNode,r=t.parentNode,s=[e],a=[t];if(!o||!r)return e==p?-1:t==p?1:o?-1:r?1:u?H(u,e)-H(u,t):0;if(o===r)return fe(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?fe(s[i],a[i]):s[i]==T?-1:a[i]==T?1:0},p):p},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(f(e),n.matchesSelector&&g&&!k[t+" "]&&(!m||!m.test(t))&&(!v||!v.test(t)))try{var i=y.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){k(t,!0)}return ae(t,p,null,[e]).length>0},ae.contains=function(e,t){return(e.ownerDocument||e)!=p&&f(e),b(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=p&&f(e);var o=i.attrHandle[t.toLowerCase()],r=o&&D.call(i.attrHandle,t.toLowerCase())?o(e,t,!g):void 0;return void 0!==r?r:n.attributes||!g?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},ae.escape=function(e){return(e+"").replace(ie,oe)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,i=[],o=0,r=0;if(d=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(A),d){for(;t=e[r++];)t===e[r]&&(o=i.push(r));for(;o--;)e.splice(i[o],1)}return u=null,e},o=ae.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=o(t);return n},(i=ae.selectors={cacheLength:50,createPseudo:ce,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&Y.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=_[e+" "];return t||(t=new RegExp("(^|"+$+")"+e+"("+$+"|$)"))&&_(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var o=ae.attr(i,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(z," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,o){var r="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===o?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,f,p,h,g=r!==s?"nextSibling":"previousSibling",v=t.parentNode,m=a&&t.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(v){if(r){for(;g;){for(f=t;f=f[g];)if(a?f.nodeName.toLowerCase()===m:1===f.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?v.firstChild:v.lastChild],s&&y){for(b=(p=(c=(u=(d=(f=v)[w]||(f[w]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===S&&c[1])&&c[2],f=p&&v.childNodes[p];f=++p&&f&&f[g]||(b=p=0)||h.pop();)if(1===f.nodeType&&++b&&f===t){u[e]=[S,p,b];break}}else if(y&&(b=p=(c=(u=(d=(f=t)[w]||(f[w]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===S&&c[1]),!1===b)for(;(f=++p&&f&&f[g]||(b=p=0)||h.pop())&&((a?f.nodeName.toLowerCase()!==m:1!==f.nodeType)||!++b||(y&&((u=(d=f[w]||(f[w]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]=[S,b]),f!==t)););return(b-=o)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,t){var n,o=i.pseudos[e]||i.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return o[w]?o(t):o.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var i,r=o(e,t),s=r.length;s--;)e[i=H(e,r[s])]=!(n[i]=r[s])})):function(e){return o(e,0,n)}):o}},pseudos:{not:ce((function(e){var t=[],n=[],i=a(e.replace(W,"$1"));return i[w]?ce((function(e,t,n,o){for(var r,s=i(e,null,o,[]),a=e.length;a--;)(r=s[a])&&(e[a]=!(t[a]=r))})):function(e,o,r){return t[0]=e,i(t,null,r,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return ae(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||o(t)).indexOf(e)>-1}})),lang:ce((function(e){return X.test(e||"")||ae.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return G.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve((function(){return[0]})),last:ve((function(e,t){return[t-1]})),eq:ve((function(e,t,n){return[n<0?n+t:n]})),even:ve((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ve((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ve((function(e,t,n){for(var i=n<0?n+t:n>t?t:n;--i>=0;)e.push(i);return e})),gt:ve((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=pe(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=he(t);function ye(){}function be(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function we(e,t,n){var i=t.dir,o=t.next,r=o||i,s=n&&"parentNode"===r,a=x++;return t.first?function(t,n,o){for(;t=t[i];)if(1===t.nodeType||s)return e(t,n,o);return!1}:function(t,n,l){var c,u,d,f=[S,a];if(l){for(;t=t[i];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(u=(d=t[w]||(t[w]={}))[t.uniqueID]||(d[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=u[r])&&c[0]===S&&c[1]===a)return f[2]=c[2];if(u[r]=f,f[2]=e(t,n,l))return!0}return!1}}function Te(e){return e.length>1?function(t,n,i){for(var o=e.length;o--;)if(!e[o](t,n,i))return!1;return!0}:e[0]}function Se(e,t,n,i,o){for(var r,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(r=e[a])&&(n&&!n(r,i,o)||(s.push(r),c&&t.push(a)));return s}function xe(e,t,n,i,o,r){return i&&!i[w]&&(i=xe(i)),o&&!o[w]&&(o=xe(o,r)),ce((function(r,s,a,l){var c,u,d,f=[],p=[],h=s.length,g=r||function(e,t,n){for(var i=0,o=t.length;i<o;i++)ae(e,t[i],n);return n}(t||"*",a.nodeType?[a]:a,[]),v=!e||!r&&t?g:Se(g,f,e,a,l),m=n?o||(r?e:h||i)?[]:s:v;if(n&&n(v,m,a,l),i)for(c=Se(m,p),i(c,[],a,l),u=c.length;u--;)(d=c[u])&&(m[p[u]]=!(v[p[u]]=d));if(r){if(o||e){if(o){for(c=[],u=m.length;u--;)(d=m[u])&&c.push(v[u]=d);o(null,m=[],c,l)}for(u=m.length;u--;)(d=m[u])&&(c=o?H(r,d):f[u])>-1&&(r[c]=!(s[c]=d))}}else m=Se(m===s?m.splice(h,m.length):m),o?o(null,s,m,l):I.apply(s,m)}))}function _e(e){for(var t,n,o,r=e.length,s=i.relative[e[0].type],a=s||i.relative[" "],l=s?1:0,u=we((function(e){return e===t}),a,!0),d=we((function(e){return H(t,e)>-1}),a,!0),f=[function(e,n,i){var o=!s&&(i||n!==c)||((t=n).nodeType?u(e,n,i):d(e,n,i));return t=null,o}];l<r;l++)if(n=i.relative[e[l].type])f=[we(Te(f),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[w]){for(o=++l;o<r&&!i.relative[e[o].type];o++);return xe(l>1&&Te(f),l>1&&be(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(W,"$1"),n,l<o&&_e(e.slice(l,o)),o<r&&_e(e=e.slice(o)),o<r&&be(e))}f.push(n)}return Te(f)}return ye.prototype=i.filters=i.pseudos,i.setFilters=new ye,s=ae.tokenize=function(e,t){var n,o,r,s,a,l,c,u=E[e+" "];if(u)return t?0:u.slice(0);for(a=e,l=[],c=i.preFilter;a;){for(s in n&&!(o=F.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(r=[])),n=!1,(o=B.exec(a))&&(n=o.shift(),r.push({value:n,type:o[0].replace(W," ")}),a=a.slice(n.length)),i.filter)!(o=V[s].exec(a))||c[s]&&!(o=c[s](o))||(n=o.shift(),r.push({value:n,type:s,matches:o}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ae.error(e):E(e,l).slice(0)},a=ae.compile=function(e,t){var n,o=[],r=[],a=C[e+" "];if(!a){for(t||(t=s(e)),n=t.length;n--;)(a=_e(t[n]))[w]?o.push(a):r.push(a);(a=C(e,function(e,t){var n=t.length>0,o=e.length>0,r=function(r,s,a,l,u){var d,h,v,m=0,y="0",b=r&&[],w=[],T=c,x=r||o&&i.find.TAG("*",u),_=S+=null==T?1:Math.random()||.1,E=x.length;for(u&&(c=s==p||s||u);y!==E&&null!=(d=x[y]);y++){if(o&&d){for(h=0,s||d.ownerDocument==p||(f(d),a=!g);v=e[h++];)if(v(d,s||p,a)){l.push(d);break}u&&(S=_)}n&&((d=!v&&d)&&m--,r&&b.push(d))}if(m+=y,n&&y!==m){for(h=0;v=t[h++];)v(b,w,s,a);if(r){if(m>0)for(;y--;)b[y]||w[y]||(w[y]=L.call(l));w=Se(w)}I.apply(l,w),u&&!r&&w.length>0&&m+t.length>1&&ae.uniqueSort(l)}return u&&(S=_,c=T),b};return n?ce(r):r}(r,o))).selector=e}return a},l=ae.select=function(e,t,n,o){var r,l,c,u,d,f="function"==typeof e&&e,p=!o&&s(e=f.selector||e);if(n=n||[],1===p.length){if((l=p[0]=p[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&g&&i.relative[l[1].type]){if(!(t=(i.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;f&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(r=V.needsContext.test(e)?0:l.length;r--&&(c=l[r],!i.relative[u=c.type]);)if((d=i.find[u])&&(o=d(c.matches[0].replace(te,ne),ee.test(l[0].type)&&me(t.parentNode)||t))){if(l.splice(r,1),!(e=o.length&&be(l)))return I.apply(n,o),n;break}}return(f||a(e,p))(o,t,!g,n,!t||ee.test(e)&&me(t.parentNode)||t),n},n.sortStable=w.split("").sort(A).join("")===w,n.detectDuplicates=!!d,f(),n.sortDetached=ue((function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))})),ue((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||de("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ue((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||de("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ue((function(e){return null==e.getAttribute("disabled")}))||de(P,(function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null})),ae}(n);x.find=E,x.expr=E.selectors,x.expr[":"]=x.expr.pseudos,x.uniqueSort=x.unique=E.uniqueSort,x.text=E.getText,x.isXMLDoc=E.isXML,x.contains=E.contains,x.escapeSelector=E.escape;var C=function(e,t,n){for(var i=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&x(e).is(n))break;i.push(e)}return i},k=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},A=x.expr.match.needsContext;function D(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var O=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function L(e,t,n){return m(t)?x.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?x.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?x.grep(e,(function(e){return u.call(t,e)>-1!==n})):x.filter(t,e,n)}x.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?x.find.matchesSelector(i,e)?[i]:[]:x.find.matches(e,x.grep(t,(function(e){return 1===e.nodeType})))},x.fn.extend({find:function(e){var t,n,i=this.length,o=this;if("string"!=typeof e)return this.pushStack(x(e).filter((function(){for(t=0;t<i;t++)if(x.contains(o[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)x.find(e,o[t],n);return i>1?x.uniqueSort(n):n},filter:function(e){return this.pushStack(L(this,e||[],!1))},not:function(e){return this.pushStack(L(this,e||[],!0))},is:function(e){return!!L(this,"string"==typeof e&&A.test(e)?x(e):e||[],!1).length}});var N,I=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(x.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||N,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:I.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof x?t[0]:t,x.merge(this,x.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),O.test(i[1])&&x.isPlainObject(t))for(i in t)m(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(o=b.getElementById(i[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):m(e)?void 0!==n.ready?n.ready(e):e(x):x.makeArray(e,this)}).prototype=x.fn,N=x(b);var j=/^(?:parents|prev(?:Until|All))/,H={children:!0,contents:!0,next:!0,prev:!0};function P(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}x.fn.extend({has:function(e){var t=x(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(x.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,o=this.length,r=[],s="string"!=typeof e&&x(e);if(!A.test(e))for(;i<o;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&x.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(r.length>1?x.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?u.call(x(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(x.uniqueSort(x.merge(this.get(),x(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),x.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return C(e,"parentNode")},parentsUntil:function(e,t,n){return C(e,"parentNode",n)},next:function(e){return P(e,"nextSibling")},prev:function(e){return P(e,"previousSibling")},nextAll:function(e){return C(e,"nextSibling")},prevAll:function(e){return C(e,"previousSibling")},nextUntil:function(e,t,n){return C(e,"nextSibling",n)},prevUntil:function(e,t,n){return C(e,"previousSibling",n)},siblings:function(e){return k((e.parentNode||{}).firstChild,e)},children:function(e){return k(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(D(e,"template")&&(e=e.content||e),x.merge([],e.childNodes))}},(function(e,t){x.fn[e]=function(n,i){var o=x.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=x.filter(i,o)),this.length>1&&(H[e]||x.uniqueSort(o),j.test(e)&&o.reverse()),this.pushStack(o)}}));var $=/[^\x20\t\r\n\f]+/g;function M(e){return e}function R(e){throw e}function q(e,t,n,i){var o;try{e&&m(o=e.promise)?o.call(e).done(t).fail(n):e&&m(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}x.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return x.each(e.match($)||[],(function(e,n){t[n]=!0})),t}(e):x.extend({},e);var t,n,i,o,r=[],s=[],a=-1,l=function(){for(o=o||e.once,i=t=!0;s.length;a=-1)for(n=s.shift();++a<r.length;)!1===r[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=r.length,n=!1);e.memory||(n=!1),t=!1,o&&(r=n?[]:"")},c={add:function(){return r&&(n&&!t&&(a=r.length-1,s.push(n)),function t(n){x.each(n,(function(n,i){m(i)?e.unique&&c.has(i)||r.push(i):i&&i.length&&"string"!==S(i)&&t(i)}))}(arguments),n&&!t&&l()),this},remove:function(){return x.each(arguments,(function(e,t){for(var n;(n=x.inArray(t,r,n))>-1;)r.splice(n,1),n<=a&&a--})),this},has:function(e){return e?x.inArray(e,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=s=[],r=n="",this},disabled:function(){return!r},lock:function(){return o=s=[],n||t||(r=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},x.extend({Deferred:function(e){var t=[["notify","progress",x.Callbacks("memory"),x.Callbacks("memory"),2],["resolve","done",x.Callbacks("once memory"),x.Callbacks("once memory"),0,"resolved"],["reject","fail",x.Callbacks("once memory"),x.Callbacks("once memory"),1,"rejected"]],i="pending",o={state:function(){return i},always:function(){return r.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return x.Deferred((function(n){x.each(t,(function(t,i){var o=m(e[i[4]])&&e[i[4]];r[i[1]]((function(){var e=o&&o.apply(this,arguments);e&&m(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,o?[e]:arguments)}))})),e=null})).promise()},then:function(e,i,o){var r=0;function s(e,t,i,o){return function(){var a=this,l=arguments,c=function(){var n,c;if(!(e<r)){if((n=i.apply(a,l))===t.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,m(c)?o?c.call(n,s(r,t,M,o),s(r,t,R,o)):(r++,c.call(n,s(r,t,M,o),s(r,t,R,o),s(r,t,M,t.notifyWith))):(i!==M&&(a=void 0,l=[n]),(o||t.resolveWith)(a,l))}},u=o?c:function(){try{c()}catch(n){x.Deferred.exceptionHook&&x.Deferred.exceptionHook(n,u.stackTrace),e+1>=r&&(i!==R&&(a=void 0,l=[n]),t.rejectWith(a,l))}};e?u():(x.Deferred.getStackHook&&(u.stackTrace=x.Deferred.getStackHook()),n.setTimeout(u))}}return x.Deferred((function(n){t[0][3].add(s(0,n,m(o)?o:M,n.notifyWith)),t[1][3].add(s(0,n,m(e)?e:M)),t[2][3].add(s(0,n,m(i)?i:R))})).promise()},promise:function(e){return null!=e?x.extend(e,o):o}},r={};return x.each(t,(function(e,n){var s=n[2],a=n[5];o[n[1]]=s.add,a&&s.add((function(){i=a}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(n[3].fire),r[n[0]]=function(){return r[n[0]+"With"](this===r?void 0:this,arguments),this},r[n[0]+"With"]=s.fireWith})),o.promise(r),e&&e.call(r,r),r},when:function(e){var t=arguments.length,n=t,i=Array(n),o=a.call(arguments),r=x.Deferred(),s=function(e){return function(n){i[e]=this,o[e]=arguments.length>1?a.call(arguments):n,--t||r.resolveWith(i,o)}};if(t<=1&&(q(e,r.done(s(n)).resolve,r.reject,!t),"pending"===r.state()||m(o[n]&&o[n].then)))return r.then();for(;n--;)q(o[n],s(n),r.reject);return r.promise()}});var z=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;x.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&z.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},x.readyException=function(e){n.setTimeout((function(){throw e}))};var W=x.Deferred();function F(){b.removeEventListener("DOMContentLoaded",F),n.removeEventListener("load",F),x.ready()}x.fn.ready=function(e){return W.then(e).catch((function(e){x.readyException(e)})),this},x.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--x.readyWait:x.isReady)||(x.isReady=!0,!0!==e&&--x.readyWait>0||W.resolveWith(b,[x]))}}),x.ready.then=W.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?n.setTimeout(x.ready):(b.addEventListener("DOMContentLoaded",F),n.addEventListener("load",F));var B=function(e,t,n,i,o,r,s){var a=0,l=e.length,c=null==n;if("object"===S(n))for(a in o=!0,n)B(e,t,a,n[a],!0,r,s);else if(void 0!==i&&(o=!0,m(i)||(s=!0),c&&(s?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(x(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return o?e:c?t.call(e):l?t(e[0],n):r},U=/^-ms-/,Y=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function V(e){return e.replace(U,"ms-").replace(Y,X)}var K=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=x.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t=Object.create(null),K(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,o=this.cache(e);if("string"==typeof t)o[V(t)]=n;else for(i in t)o[V(i)]=t[i];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][V(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(V):(t=V(t))in i?[t]:t.match($)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||x.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!x.isEmptyObject(t)}};var G=new Q,J=new Q,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ee=/[A-Z]/g;function te(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Z.test(e)?JSON.parse(e):e)}(n)}catch(e){}J.set(e,t,n)}else n=void 0;return n}x.extend({hasData:function(e){return J.hasData(e)||G.hasData(e)},data:function(e,t,n){return J.access(e,t,n)},removeData:function(e,t){J.remove(e,t)},_data:function(e,t,n){return G.access(e,t,n)},_removeData:function(e,t){G.remove(e,t)}}),x.fn.extend({data:function(e,t){var n,i,o,r=this[0],s=r&&r.attributes;if(void 0===e){if(this.length&&(o=J.get(r),1===r.nodeType&&!G.get(r,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=V(i.slice(5)),te(r,i,o[i]));G.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each((function(){J.set(this,e)})):B(this,(function(t){var n;if(r&&void 0===t)return void 0!==(n=J.get(r,e))?n:void 0!==(n=te(r,e))?n:void 0;this.each((function(){J.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){J.remove(this,e)}))}}),x.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=G.get(e,t),n&&(!i||Array.isArray(n)?i=G.access(e,t,x.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=x.queue(e,t),i=n.length,o=n.shift(),r=x._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===t&&n.unshift("inprogress"),delete r.stop,o.call(e,(function(){x.dequeue(e,t)}),r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return G.get(e,n)||G.access(e,n,{empty:x.Callbacks("once memory").add((function(){G.remove(e,[t+"queue",n])}))})}}),x.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?x.queue(this[0],e):void 0===t?this:this.each((function(){var n=x.queue(this,e,t);x._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&x.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){x.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,o=x.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=G.get(r[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(t)}});var ne=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+ne+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],re=b.documentElement,se=function(e){return x.contains(e.ownerDocument,e)},ae={composed:!0};re.getRootNode&&(se=function(e){return x.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===x.css(e,"display")};function ce(e,t,n,i){var o,r,s=20,a=i?function(){return i.cur()}:function(){return x.css(e,t,"")},l=a(),c=n&&n[3]||(x.cssNumber[t]?"":"px"),u=e.nodeType&&(x.cssNumber[t]||"px"!==c&&+l)&&ie.exec(x.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;s--;)x.style(e,t,u+c),(1-r)*(1-(r=a()/l||.5))<=0&&(s=0),u/=r;u*=2,x.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=o)),o}var ue={};function de(e){var t,n=e.ownerDocument,i=e.nodeName,o=ue[i];return o||(t=n.body.appendChild(n.createElement(i)),o=x.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),ue[i]=o,o)}function fe(e,t){for(var n,i,o=[],r=0,s=e.length;r<s;r++)(i=e[r]).style&&(n=i.style.display,t?("none"===n&&(o[r]=G.get(i,"display")||null,o[r]||(i.style.display="")),""===i.style.display&&le(i)&&(o[r]=de(i))):"none"!==n&&(o[r]="none",G.set(i,"display",n)));for(r=0;r<s;r++)null!=o[r]&&(e[r].style.display=o[r]);return e}x.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){le(this)?x(this).show():x(this).hide()}))}});var pe,he,ge=/^(?:checkbox|radio)$/i,ve=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,me=/^$|^module$|\/(?:java|ecma)script/i;pe=b.createDocumentFragment().appendChild(b.createElement("div")),(he=b.createElement("input")).setAttribute("type","radio"),he.setAttribute("checked","checked"),he.setAttribute("name","t"),pe.appendChild(he),v.checkClone=pe.cloneNode(!0).cloneNode(!0).lastChild.checked,pe.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!pe.cloneNode(!0).lastChild.defaultValue,pe.innerHTML="<option></option>",v.option=!!pe.lastChild;var ye={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function be(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&D(e,t)?x.merge([e],n):n}function we(e,t){for(var n=0,i=e.length;n<i;n++)G.set(e[n],"globalEval",!t||G.get(t[n],"globalEval"))}ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead,ye.th=ye.td,v.option||(ye.optgroup=ye.option=[1,"<select multiple='multiple'>","</select>"]);var Te=/<|&#?\w+;/;function Se(e,t,n,i,o){for(var r,s,a,l,c,u,d=t.createDocumentFragment(),f=[],p=0,h=e.length;p<h;p++)if((r=e[p])||0===r)if("object"===S(r))x.merge(f,r.nodeType?[r]:r);else if(Te.test(r)){for(s=s||d.appendChild(t.createElement("div")),a=(ve.exec(r)||["",""])[1].toLowerCase(),l=ye[a]||ye._default,s.innerHTML=l[1]+x.htmlPrefilter(r)+l[2],u=l[0];u--;)s=s.lastChild;x.merge(f,s.childNodes),(s=d.firstChild).textContent=""}else f.push(t.createTextNode(r));for(d.textContent="",p=0;r=f[p++];)if(i&&x.inArray(r,i)>-1)o&&o.push(r);else if(c=se(r),s=be(d.appendChild(r),"script"),c&&we(s),n)for(u=0;r=s[u++];)me.test(r.type||"")&&n.push(r);return d}var xe=/^key/,_e=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ee=/^([^.]*)(?:\.(.+)|)/;function Ce(){return!0}function ke(){return!1}function Ae(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function De(e,t,n,i,o,r){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)De(e,a,n,i,t[a],r);return e}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=ke;else if(!o)return e;return 1===r&&(s=o,(o=function(e){return x().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=x.guid++)),e.each((function(){x.event.add(this,t,o,i,n)}))}function Oe(e,t,n){n?(G.set(e,t,!1),x.event.add(e,t,{namespace:!1,handler:function(e){var i,o,r=G.get(this,t);if(1&e.isTrigger&&this[t]){if(r.length)(x.event.special[t]||{}).delegateType&&e.stopPropagation();else if(r=a.call(arguments),G.set(this,t,r),i=n(this,t),this[t](),r!==(o=G.get(this,t))||i?G.set(this,t,!1):o={},r!==o)return e.stopImmediatePropagation(),e.preventDefault(),o.value}else r.length&&(G.set(this,t,{value:x.event.trigger(x.extend(r[0],x.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===G.get(e,t)&&x.event.add(e,t,Ce)}x.event={global:{},add:function(e,t,n,i,o){var r,s,a,l,c,u,d,f,p,h,g,v=G.get(e);if(K(e))for(n.handler&&(n=(r=n).handler,o=r.selector),o&&x.find.matchesSelector(re,o),n.guid||(n.guid=x.guid++),(l=v.events)||(l=v.events=Object.create(null)),(s=v.handle)||(s=v.handle=function(t){return void 0!==x&&x.event.triggered!==t.type?x.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match($)||[""]).length;c--;)p=g=(a=Ee.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),p&&(d=x.event.special[p]||{},p=(o?d.delegateType:d.bindType)||p,d=x.event.special[p]||{},u=x.extend({type:p,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&x.expr.match.needsContext.test(o),namespace:h.join(".")},r),(f=l[p])||((f=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,i,h,s)||e.addEventListener&&e.addEventListener(p,s)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),o?f.splice(f.delegateCount++,0,u):f.push(u),x.event.global[p]=!0)},remove:function(e,t,n,i,o){var r,s,a,l,c,u,d,f,p,h,g,v=G.hasData(e)&&G.get(e);if(v&&(l=v.events)){for(c=(t=(t||"").match($)||[""]).length;c--;)if(p=g=(a=Ee.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),p){for(d=x.event.special[p]||{},f=l[p=(i?d.delegateType:d.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=f.length;r--;)u=f[r],!o&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(f.splice(r,1),u.selector&&f.delegateCount--,d.remove&&d.remove.call(e,u));s&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,h,v.handle)||x.removeEvent(e,p,v.handle),delete l[p])}else for(p in l)x.event.remove(e,p+t[c],n,i,!0);x.isEmptyObject(l)&&G.remove(e,"handle events")}},dispatch:function(e){var t,n,i,o,r,s,a=new Array(arguments.length),l=x.event.fix(e),c=(G.get(this,"events")||Object.create(null))[l.type]||[],u=x.event.special[l.type]||{};for(a[0]=l,t=1;t<arguments.length;t++)a[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(s=x.event.handlers.call(this,l,c),t=0;(o=s[t++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==r.namespace&&!l.rnamespace.test(r.namespace)||(l.handleObj=r,l.data=r.data,void 0!==(i=((x.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,a))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,o,r,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(r=[],s={},n=0;n<l;n++)void 0===s[o=(i=t[n]).selector+" "]&&(s[o]=i.needsContext?x(o,this).index(c)>-1:x.find(o,this,null,[c]).length),s[o]&&r.push(i);r.length&&a.push({elem:c,handlers:r})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(x.Event.prototype,e,{enumerable:!0,configurable:!0,get:m(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[x.expando]?e:new x.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return ge.test(t.type)&&t.click&&D(t,"input")&&Oe(t,"click",Ce),!1},trigger:function(e){var t=this||e;return ge.test(t.type)&&t.click&&D(t,"input")&&Oe(t,"click"),!0},_default:function(e){var t=e.target;return ge.test(t.type)&&t.click&&D(t,"input")&&G.get(t,"click")||D(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},x.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},x.Event=function(e,t){if(!(this instanceof x.Event))return new x.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ce:ke,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&x.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[x.expando]=!0},x.Event.prototype={constructor:x.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ce,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ce,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ce,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},x.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&xe.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&_e.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},x.event.addProp),x.each({focus:"focusin",blur:"focusout"},(function(e,t){x.event.special[e]={setup:function(){return Oe(this,e,Ae),!1},trigger:function(){return Oe(this,e),!0},delegateType:t}})),x.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,o=e.relatedTarget,r=e.handleObj;return o&&(o===i||x.contains(i,o))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}})),x.fn.extend({on:function(e,t,n,i){return De(this,e,t,n,i)},one:function(e,t,n,i){return De(this,e,t,n,i,1)},off:function(e,t,n){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,x(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ke),this.each((function(){x.event.remove(this,e,n,t)}))}});var Le=/<script|<style|<link/i,Ne=/checked\s*(?:[^=]|=\s*.checked.)/i,Ie=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function je(e,t){return D(e,"table")&&D(11!==t.nodeType?t:t.firstChild,"tr")&&x(e).children("tbody")[0]||e}function He(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Pe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function $e(e,t){var n,i,o,r,s,a;if(1===t.nodeType){if(G.hasData(e)&&(a=G.get(e).events))for(o in G.remove(t,"handle events"),a)for(n=0,i=a[o].length;n<i;n++)x.event.add(t,o,a[o][n]);J.hasData(e)&&(r=J.access(e),s=x.extend({},r),J.set(t,s))}}function Me(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ge.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Re(e,t,n,i){t=l(t);var o,r,s,a,c,u,d=0,f=e.length,p=f-1,h=t[0],g=m(h);if(g||f>1&&"string"==typeof h&&!v.checkClone&&Ne.test(h))return e.each((function(o){var r=e.eq(o);g&&(t[0]=h.call(this,o,r.html())),Re(r,t,n,i)}));if(f&&(r=(o=Se(t,e[0].ownerDocument,!1,e,i)).firstChild,1===o.childNodes.length&&(o=r),r||i)){for(a=(s=x.map(be(o,"script"),He)).length;d<f;d++)c=o,d!==p&&(c=x.clone(c,!0,!0),a&&x.merge(s,be(c,"script"))),n.call(e[d],c,d);if(a)for(u=s[s.length-1].ownerDocument,x.map(s,Pe),d=0;d<a;d++)c=s[d],me.test(c.type||"")&&!G.access(c,"globalEval")&&x.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?x._evalUrl&&!c.noModule&&x._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):T(c.textContent.replace(Ie,""),c,u))}return e}function qe(e,t,n){for(var i,o=t?x.filter(t,e):e,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||x.cleanData(be(i)),i.parentNode&&(n&&se(i)&&we(be(i,"script")),i.parentNode.removeChild(i));return e}x.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,o,r,s,a=e.cloneNode(!0),l=se(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||x.isXMLDoc(e)))for(s=be(a),i=0,o=(r=be(e)).length;i<o;i++)Me(r[i],s[i]);if(t)if(n)for(r=r||be(e),s=s||be(a),i=0,o=r.length;i<o;i++)$e(r[i],s[i]);else $e(e,a);return(s=be(a,"script")).length>0&&we(s,!l&&be(e,"script")),a},cleanData:function(e){for(var t,n,i,o=x.event.special,r=0;void 0!==(n=e[r]);r++)if(K(n)){if(t=n[G.expando]){if(t.events)for(i in t.events)o[i]?x.event.remove(n,i):x.removeEvent(n,i,t.handle);n[G.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),x.fn.extend({detach:function(e){return qe(this,e,!0)},remove:function(e){return qe(this,e)},text:function(e){return B(this,(function(e){return void 0===e?x.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Re(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||je(this,e).appendChild(e)}))},prepend:function(){return Re(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=je(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Re(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Re(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(x.cleanData(be(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return x.clone(this,e,t)}))},html:function(e){return B(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Le.test(e)&&!ye[(ve.exec(e)||["",""])[1].toLowerCase()]){e=x.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(x.cleanData(be(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Re(this,arguments,(function(t){var n=this.parentNode;x.inArray(this,e)<0&&(x.cleanData(be(this)),n&&n.replaceChild(t,this))}),e)}}),x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){x.fn[e]=function(e){for(var n,i=[],o=x(e),r=o.length-1,s=0;s<=r;s++)n=s===r?this:this.clone(!0),x(o[s])[t](n),c.apply(i,n.get());return this.pushStack(i)}}));var ze=new RegExp("^("+ne+")(?!px)[a-z%]+$","i"),We=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Fe=function(e,t,n){var i,o,r={};for(o in t)r[o]=e.style[o],e.style[o]=t[o];for(o in i=n.call(e),t)e.style[o]=r[o];return i},Be=new RegExp(oe.join("|"),"i");function Ue(e,t,n){var i,o,r,s,a=e.style;return(n=n||We(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||se(e)||(s=x.style(e,t)),!v.pixelBoxStyles()&&ze.test(s)&&Be.test(t)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r)),void 0!==s?s+"":s}function Ye(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",re.appendChild(c).appendChild(u);var e=n.getComputedStyle(u);i="1%"!==e.top,l=12===t(e.marginLeft),u.style.right="60%",s=36===t(e.right),o=36===t(e.width),u.style.position="absolute",r=12===t(u.offsetWidth/3),re.removeChild(c),u=null}}function t(e){return Math.round(parseFloat(e))}var i,o,r,s,a,l,c=b.createElement("div"),u=b.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===u.style.backgroundClip,x.extend(v,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),r},reliableTrDimensions:function(){var e,t,i,o;return null==a&&(e=b.createElement("table"),t=b.createElement("tr"),i=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",i.style.height="9px",re.appendChild(e).appendChild(t).appendChild(i),o=n.getComputedStyle(t),a=parseInt(o.height)>3,re.removeChild(e)),a}}))}();var Xe=["Webkit","Moz","ms"],Ve=b.createElement("div").style,Ke={};function Qe(e){var t=x.cssProps[e]||Ke[e];return t||(e in Ve?e:Ke[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Xe.length;n--;)if((e=Xe[n]+t)in Ve)return e}(e)||e)}var Ge=/^(none|table(?!-c[ea]).+)/,Je=/^--/,Ze={position:"absolute",visibility:"hidden",display:"block"},et={letterSpacing:"0",fontWeight:"400"};function tt(e,t,n){var i=ie.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function nt(e,t,n,i,o,r){var s="width"===t?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=x.css(e,n+oe[s],!0,o)),i?("content"===n&&(l-=x.css(e,"padding"+oe[s],!0,o)),"margin"!==n&&(l-=x.css(e,"border"+oe[s]+"Width",!0,o))):(l+=x.css(e,"padding"+oe[s],!0,o),"padding"!==n?l+=x.css(e,"border"+oe[s]+"Width",!0,o):a+=x.css(e,"border"+oe[s]+"Width",!0,o));return!i&&r>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-a-.5))||0),l}function it(e,t,n){var i=We(e),o=(!v.boxSizingReliable()||n)&&"border-box"===x.css(e,"boxSizing",!1,i),r=o,s=Ue(e,t,i),a="offset"+t[0].toUpperCase()+t.slice(1);if(ze.test(s)){if(!n)return s;s="auto"}return(!v.boxSizingReliable()&&o||!v.reliableTrDimensions()&&D(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===x.css(e,"display",!1,i))&&e.getClientRects().length&&(o="border-box"===x.css(e,"boxSizing",!1,i),(r=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+nt(e,t,n||(o?"border":"content"),r,i,s)+"px"}function ot(e,t,n,i,o){return new ot.prototype.init(e,t,n,i,o)}x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ue(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,s,a=V(t),l=Je.test(t),c=e.style;if(l||(t=Qe(a)),s=x.cssHooks[t]||x.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(e,!1,i))?o:c[t];"string"===(r=typeof n)&&(o=ie.exec(n))&&o[1]&&(n=ce(e,t,o),r="number"),null!=n&&n==n&&("number"!==r||l||(n+=o&&o[3]||(x.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var o,r,s,a=V(t);return Je.test(t)||(t=Qe(a)),(s=x.cssHooks[t]||x.cssHooks[a])&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=Ue(e,t,i)),"normal"===o&&t in et&&(o=et[t]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),x.each(["height","width"],(function(e,t){x.cssHooks[t]={get:function(e,n,i){if(n)return!Ge.test(x.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?it(e,t,i):Fe(e,Ze,(function(){return it(e,t,i)}))},set:function(e,n,i){var o,r=We(e),s=!v.scrollboxSize()&&"absolute"===r.position,a=(s||i)&&"border-box"===x.css(e,"boxSizing",!1,r),l=i?nt(e,t,i,a,r):0;return a&&s&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(r[t])-nt(e,t,"border",!1,r)-.5)),l&&(o=ie.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=x.css(e,t)),tt(0,n,l)}}})),x.cssHooks.marginLeft=Ye(v.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ue(e,"marginLeft"))||e.getBoundingClientRect().left-Fe(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),x.each({margin:"",padding:"",border:"Width"},(function(e,t){x.cssHooks[e+t]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[e+oe[i]+t]=r[i]||r[i-2]||r[0];return o}},"margin"!==e&&(x.cssHooks[e+t].set=tt)})),x.fn.extend({css:function(e,t){return B(this,(function(e,t,n){var i,o,r={},s=0;if(Array.isArray(t)){for(i=We(e),o=t.length;s<o;s++)r[t[s]]=x.css(e,t[s],!1,i);return r}return void 0!==n?x.style(e,t,n):x.css(e,t)}),e,t,arguments.length>1)}}),x.Tween=ot,ot.prototype={constructor:ot,init:function(e,t,n,i,o,r){this.elem=e,this.prop=n,this.easing=o||x.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(x.cssNumber[n]?"":"px")},cur:function(){var e=ot.propHooks[this.prop];return e&&e.get?e.get(this):ot.propHooks._default.get(this)},run:function(e){var t,n=ot.propHooks[this.prop];return this.options.duration?this.pos=t=x.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ot.propHooks._default.set(this),this}},ot.prototype.init.prototype=ot.prototype,ot.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=x.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){x.fx.step[e.prop]?x.fx.step[e.prop](e):1!==e.elem.nodeType||!x.cssHooks[e.prop]&&null==e.elem.style[Qe(e.prop)]?e.elem[e.prop]=e.now:x.style(e.elem,e.prop,e.now+e.unit)}}},ot.propHooks.scrollTop=ot.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},x.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},x.fx=ot.prototype.init,x.fx.step={};var rt,st,at=/^(?:toggle|show|hide)$/,lt=/queueHooks$/;function ct(){st&&(!1===b.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ct):n.setTimeout(ct,x.fx.interval),x.fx.tick())}function ut(){return n.setTimeout((function(){rt=void 0})),rt=Date.now()}function dt(e,t){var n,i=0,o={height:e};for(t=t?1:0;i<4;i+=2-t)o["margin"+(n=oe[i])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function ft(e,t,n){for(var i,o=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,t,e))return i}function pt(e,t,n){var i,o,r=0,s=pt.prefilters.length,a=x.Deferred().always((function(){delete l.elem})),l=function(){if(o)return!1;for(var t=rt||ut(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),r=0,s=c.tweens.length;r<s;r++)c.tweens[r].run(i);return a.notifyWith(e,[c,i,n]),i<1&&s?n:(s||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:x.extend({},t),opts:x.extend(!0,{specialEasing:{},easing:x.easing._default},n),originalProperties:t,originalOptions:n,startTime:rt||ut(),duration:n.duration,tweens:[],createTween:function(t,n){var i=x.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),u=c.props;for(!function(e,t){var n,i,o,r,s;for(n in e)if(o=t[i=V(n)],r=e[n],Array.isArray(r)&&(o=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(s=x.cssHooks[i])&&"expand"in s)for(n in r=s.expand(r),delete e[i],r)n in e||(e[n]=r[n],t[n]=o);else t[i]=o}(u,c.opts.specialEasing);r<s;r++)if(i=pt.prefilters[r].call(c,e,u,c.opts))return m(i.stop)&&(x._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return x.map(u,ft,c),m(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),x.fx.timer(x.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}x.Animation=x.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){m(e)?(t=e,e=["*"]):e=e.match($);for(var n,i=0,o=e.length;i<o;i++)n=e[i],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,o,r,s,a,l,c,u,d="width"in t||"height"in t,f=this,p={},h=e.style,g=e.nodeType&&le(e),v=G.get(e,"fxshow");for(i in n.queue||(null==(s=x._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,f.always((function(){f.always((function(){s.unqueued--,x.queue(e,"fx").length||s.empty.fire()}))}))),t)if(o=t[i],at.test(o)){if(delete t[i],r=r||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!v||void 0===v[i])continue;g=!0}p[i]=v&&v[i]||x.style(e,i)}if((l=!x.isEmptyObject(t))||!x.isEmptyObject(p))for(i in d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=v&&v.display)&&(c=G.get(e,"display")),"none"===(u=x.css(e,"display"))&&(c?u=c:(fe([e],!0),c=e.style.display||c,u=x.css(e,"display"),fe([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===x.css(e,"float")&&(l||(f.done((function(){h.display=c})),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),l=!1,p)l||(v?"hidden"in v&&(g=v.hidden):v=G.access(e,"fxshow",{display:c}),r&&(v.hidden=!g),g&&fe([e],!0),f.done((function(){for(i in g||fe([e]),G.remove(e,"fxshow"),p)x.style(e,i,p[i])}))),l=ft(g?v[i]:0,i,f),i in v||(v[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),x.speed=function(e,t,n){var i=e&&"object"==typeof e?x.extend({},e):{complete:n||!n&&t||m(e)&&e,duration:e,easing:n&&t||t&&!m(t)&&t};return x.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in x.fx.speeds?i.duration=x.fx.speeds[i.duration]:i.duration=x.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){m(i.old)&&i.old.call(this),i.queue&&x.dequeue(this,i.queue)},i},x.fn.extend({fadeTo:function(e,t,n,i){return this.filter(le).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var o=x.isEmptyObject(e),r=x.speed(t,n,i),s=function(){var t=pt(this,x.extend({},e),r);(o||G.get(this,"finish"))&&t.stop(!0)};return s.finish=s,o||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,o=null!=e&&e+"queueHooks",r=x.timers,s=G.get(this);if(o)s[o]&&s[o].stop&&i(s[o]);else for(o in s)s[o]&&s[o].stop&&lt.test(o)&&i(s[o]);for(o=r.length;o--;)r[o].elem!==this||null!=e&&r[o].queue!==e||(r[o].anim.stop(n),t=!1,r.splice(o,1));!t&&n||x.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=G.get(this),i=n[e+"queue"],o=n[e+"queueHooks"],r=x.timers,s=i?i.length:0;for(n.finish=!0,x.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),x.each(["toggle","show","hide"],(function(e,t){var n=x.fn[t];x.fn[t]=function(e,i,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(dt(t,!0),e,i,o)}})),x.each({slideDown:dt("show"),slideUp:dt("hide"),slideToggle:dt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){x.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),x.timers=[],x.fx.tick=function(){var e,t=0,n=x.timers;for(rt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||x.fx.stop(),rt=void 0},x.fx.timer=function(e){x.timers.push(e),x.fx.start()},x.fx.interval=13,x.fx.start=function(){st||(st=!0,ct())},x.fx.stop=function(){st=null},x.fx.speeds={slow:600,fast:200,_default:400},x.fn.delay=function(e,t){return e=x.fx&&x.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,i){var o=n.setTimeout(t,e);i.stop=function(){n.clearTimeout(o)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var ht,gt=x.expr.attrHandle;x.fn.extend({attr:function(e,t){return B(this,x.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){x.removeAttr(this,e)}))}}),x.extend({attr:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?x.prop(e,t,n):(1===r&&x.isXMLDoc(e)||(o=x.attrHooks[t.toLowerCase()]||(x.expr.match.bool.test(t)?ht:void 0)),void 0!==n?null===n?void x.removeAttr(e,t):o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(i=o.get(e,t))?i:null==(i=x.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&D(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,o=t&&t.match($);if(o&&1===e.nodeType)for(;n=o[i++];)e.removeAttribute(n)}}),ht={set:function(e,t,n){return!1===t?x.removeAttr(e,n):e.setAttribute(n,n),n}},x.each(x.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=gt[t]||x.find.attr;gt[t]=function(e,t,i){var o,r,s=t.toLowerCase();return i||(r=gt[s],gt[s]=o,o=null!=n(e,t,i)?s:null,gt[s]=r),o}}));var vt=/^(?:input|select|textarea|button)$/i,mt=/^(?:a|area)$/i;function yt(e){return(e.match($)||[]).join(" ")}function bt(e){return e.getAttribute&&e.getAttribute("class")||""}function wt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match($)||[]}x.fn.extend({prop:function(e,t){return B(this,x.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[x.propFix[e]||e]}))}}),x.extend({prop:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&x.isXMLDoc(e)||(t=x.propFix[t]||t,o=x.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:e[t]=n:o&&"get"in o&&null!==(i=o.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=x.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||mt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(x.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){x.propFix[this.toLowerCase()]=this})),x.fn.extend({addClass:function(e){var t,n,i,o,r,s,a,l=0;if(m(e))return this.each((function(t){x(this).addClass(e.call(this,t,bt(this)))}));if((t=wt(e)).length)for(;n=this[l++];)if(o=bt(n),i=1===n.nodeType&&" "+yt(o)+" "){for(s=0;r=t[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(a=yt(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,o,r,s,a,l=0;if(m(e))return this.each((function(t){x(this).removeClass(e.call(this,t,bt(this)))}));if(!arguments.length)return this.attr("class","");if((t=wt(e)).length)for(;n=this[l++];)if(o=bt(n),i=1===n.nodeType&&" "+yt(o)+" "){for(s=0;r=t[s++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");o!==(a=yt(i))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):m(e)?this.each((function(n){x(this).toggleClass(e.call(this,n,bt(this),t),t)})):this.each((function(){var t,o,r,s;if(i)for(o=0,r=x(this),s=wt(e);t=s[o++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==n||((t=bt(this))&&G.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":G.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+yt(bt(n))+" ").indexOf(t)>-1)return!0;return!1}});var Tt=/\r/g;x.fn.extend({val:function(e){var t,n,i,o=this[0];return arguments.length?(i=m(e),this.each((function(n){var o;1===this.nodeType&&(null==(o=i?e.call(this,n,x(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=x.map(o,(function(e){return null==e?"":e+""}))),(t=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))}))):o?(t=x.valHooks[o.type]||x.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(Tt,""):null==n?"":n:void 0}}),x.extend({valHooks:{option:{get:function(e){var t=x.find.attr(e,"value");return null!=t?t:yt(x.text(e))}},select:{get:function(e){var t,n,i,o=e.options,r=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?r+1:o.length;for(i=r<0?l:s?r:0;i<l;i++)if(((n=o[i]).selected||i===r)&&!n.disabled&&(!n.parentNode.disabled||!D(n.parentNode,"optgroup"))){if(t=x(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,i,o=e.options,r=x.makeArray(t),s=o.length;s--;)((i=o[s]).selected=x.inArray(x.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),x.each(["radio","checkbox"],(function(){x.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=x.inArray(x(e).val(),t)>-1}},v.checkOn||(x.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),v.focusin="onfocusin"in n;var St=/^(?:focusinfocus|focusoutblur)$/,xt=function(e){e.stopPropagation()};x.extend(x.event,{trigger:function(e,t,i,o){var r,s,a,l,c,u,d,f,h=[i||b],g=p.call(e,"type")?e.type:e,v=p.call(e,"namespace")?e.namespace.split("."):[];if(s=f=a=i=i||b,3!==i.nodeType&&8!==i.nodeType&&!St.test(g+x.event.triggered)&&(g.indexOf(".")>-1&&(v=g.split("."),g=v.shift(),v.sort()),c=g.indexOf(":")<0&&"on"+g,(e=e[x.expando]?e:new x.Event(g,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:x.makeArray(t,[e]),d=x.event.special[g]||{},o||!d.trigger||!1!==d.trigger.apply(i,t))){if(!o&&!d.noBubble&&!y(i)){for(l=d.delegateType||g,St.test(l+g)||(s=s.parentNode);s;s=s.parentNode)h.push(s),a=s;a===(i.ownerDocument||b)&&h.push(a.defaultView||a.parentWindow||n)}for(r=0;(s=h[r++])&&!e.isPropagationStopped();)f=s,e.type=r>1?l:d.bindType||g,(u=(G.get(s,"events")||Object.create(null))[e.type]&&G.get(s,"handle"))&&u.apply(s,t),(u=c&&s[c])&&u.apply&&K(s)&&(e.result=u.apply(s,t),!1===e.result&&e.preventDefault());return e.type=g,o||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(h.pop(),t)||!K(i)||c&&m(i[g])&&!y(i)&&((a=i[c])&&(i[c]=null),x.event.triggered=g,e.isPropagationStopped()&&f.addEventListener(g,xt),i[g](),e.isPropagationStopped()&&f.removeEventListener(g,xt),x.event.triggered=void 0,a&&(i[c]=a)),e.result}},simulate:function(e,t,n){var i=x.extend(new x.Event,n,{type:e,isSimulated:!0});x.event.trigger(i,null,t)}}),x.fn.extend({trigger:function(e,t){return this.each((function(){x.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return x.event.trigger(e,t,n,!0)}}),v.focusin||x.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){x.event.simulate(t,e.target,x.event.fix(e))};x.event.special[t]={setup:function(){var i=this.ownerDocument||this.document||this,o=G.access(i,t);o||i.addEventListener(e,n,!0),G.access(i,t,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,o=G.access(i,t)-1;o?G.access(i,t,o):(i.removeEventListener(e,n,!0),G.remove(i,t))}}}));var _t=n.location,Et={guid:Date.now()},Ct=/\?/;x.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||x.error("Invalid XML: "+e),t};var kt=/\[\]$/,At=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,Ot=/^(?:input|select|textarea|keygen)/i;function Lt(e,t,n,i){var o;if(Array.isArray(t))x.each(t,(function(t,o){n||kt.test(e)?i(e,o):Lt(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,i)}));else if(n||"object"!==S(t))i(e,t);else for(o in t)Lt(e+"["+o+"]",t[o],n,i)}x.param=function(e,t){var n,i=[],o=function(e,t){var n=m(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!x.isPlainObject(e))x.each(e,(function(){o(this.name,this.value)}));else for(n in e)Lt(n,e[n],t,o);return i.join("&")},x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=x.prop(this,"elements");return e?x.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!x(this).is(":disabled")&&Ot.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!ge.test(e))})).map((function(e,t){var n=x(this).val();return null==n?null:Array.isArray(n)?x.map(n,(function(e){return{name:t.name,value:e.replace(At,"\r\n")}})):{name:t.name,value:n.replace(At,"\r\n")}})).get()}});var Nt=/%20/g,It=/#.*$/,jt=/([?&])_=[^&]*/,Ht=/^(.*?):[ \t]*([^\r\n]*)$/gm,Pt=/^(?:GET|HEAD)$/,$t=/^\/\//,Mt={},Rt={},qt="*/".concat("*"),zt=b.createElement("a");function Wt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,o=0,r=t.toLowerCase().match($)||[];if(m(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Ft(e,t,n,i){var o={},r=e===Rt;function s(a){var l;return o[a]=!0,x.each(e[a]||[],(function(e,a){var c=a(t,n,i);return"string"!=typeof c||r||o[c]?r?!(l=c):void 0:(t.dataTypes.unshift(c),s(c),!1)})),l}return s(t.dataTypes[0])||!o["*"]&&s("*")}function Bt(e,t){var n,i,o=x.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:i||(i={}))[n]=t[n]);return i&&x.extend(!0,e,i),e}zt.href=_t.href,x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:_t.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(_t.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":x.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Bt(Bt(e,x.ajaxSettings),t):Bt(x.ajaxSettings,e)},ajaxPrefilter:Wt(Mt),ajaxTransport:Wt(Rt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,o,r,s,a,l,c,u,d,f,p=x.ajaxSetup({},t),h=p.context||p,g=p.context&&(h.nodeType||h.jquery)?x(h):x.event,v=x.Deferred(),m=x.Callbacks("once memory"),y=p.statusCode||{},w={},T={},S="canceled",_={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s)for(s={};t=Ht.exec(r);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?r:null},setRequestHeader:function(e,t){return null==c&&(e=T[e.toLowerCase()]=T[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==c&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)_.always(e[_.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||S;return i&&i.abort(t),E(0,t),this}};if(v.promise(_),p.url=((e||p.url||_t.href)+"").replace($t,_t.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match($)||[""],null==p.crossDomain){l=b.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=zt.protocol+"//"+zt.host!=l.protocol+"//"+l.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=x.param(p.data,p.traditional)),Ft(Mt,p,t,_),c)return _;for(d in(u=x.event&&p.global)&&0==x.active++&&x.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Pt.test(p.type),o=p.url.replace(It,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Nt,"+")):(f=p.url.slice(o.length),p.data&&(p.processData||"string"==typeof p.data)&&(o+=(Ct.test(o)?"&":"?")+p.data,delete p.data),!1===p.cache&&(o=o.replace(jt,"$1"),f=(Ct.test(o)?"&":"?")+"_="+Et.guid+++f),p.url=o+f),p.ifModified&&(x.lastModified[o]&&_.setRequestHeader("If-Modified-Since",x.lastModified[o]),x.etag[o]&&_.setRequestHeader("If-None-Match",x.etag[o])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&_.setRequestHeader("Content-Type",p.contentType),_.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+qt+"; q=0.01":""):p.accepts["*"]),p.headers)_.setRequestHeader(d,p.headers[d]);if(p.beforeSend&&(!1===p.beforeSend.call(h,_,p)||c))return _.abort();if(S="abort",m.add(p.complete),_.done(p.success),_.fail(p.error),i=Ft(Rt,p,t,_)){if(_.readyState=1,u&&g.trigger("ajaxSend",[_,p]),c)return _;p.async&&p.timeout>0&&(a=n.setTimeout((function(){_.abort("timeout")}),p.timeout));try{c=!1,i.send(w,E)}catch(e){if(c)throw e;E(-1,e)}}else E(-1,"No Transport");function E(e,t,s,l){var d,f,b,w,T,S=t;c||(c=!0,a&&n.clearTimeout(a),i=void 0,r=l||"",_.readyState=e>0?4:0,d=e>=200&&e<300||304===e,s&&(w=function(e,t,n){for(var i,o,r,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){r=o;break}s||(s=o)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(p,_,s)),!d&&x.inArray("script",p.dataTypes)>-1&&(p.converters["text script"]=function(){}),w=function(e,t,n,i){var o,r,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(r=u.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(o in c)if((a=o.split(" "))[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[o]:!0!==c[o]&&(r=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(p,w,_,d),d?(p.ifModified&&((T=_.getResponseHeader("Last-Modified"))&&(x.lastModified[o]=T),(T=_.getResponseHeader("etag"))&&(x.etag[o]=T)),204===e||"HEAD"===p.type?S="nocontent":304===e?S="notmodified":(S=w.state,f=w.data,d=!(b=w.error))):(b=S,!e&&S||(S="error",e<0&&(e=0))),_.status=e,_.statusText=(t||S)+"",d?v.resolveWith(h,[f,S,_]):v.rejectWith(h,[_,S,b]),_.statusCode(y),y=void 0,u&&g.trigger(d?"ajaxSuccess":"ajaxError",[_,p,d?f:b]),m.fireWith(h,[_,S]),u&&(g.trigger("ajaxComplete",[_,p]),--x.active||x.event.trigger("ajaxStop")))}return _},getJSON:function(e,t,n){return x.get(e,t,n,"json")},getScript:function(e,t){return x.get(e,void 0,t,"script")}}),x.each(["get","post"],(function(e,t){x[t]=function(e,n,i,o){return m(n)&&(o=o||i,i=n,n=void 0),x.ajax(x.extend({url:e,type:t,dataType:o,data:n,success:i},x.isPlainObject(e)&&e))}})),x.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),x._evalUrl=function(e,t,n){return x.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){x.globalEval(e,t,n)}})},x.fn.extend({wrapAll:function(e){var t;return this[0]&&(m(e)&&(e=e.call(this[0])),t=x(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return m(e)?this.each((function(t){x(this).wrapInner(e.call(this,t))})):this.each((function(){var t=x(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=m(e);return this.each((function(n){x(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){x(this).replaceWith(this.childNodes)})),this}}),x.expr.pseudos.hidden=function(e){return!x.expr.pseudos.visible(e)},x.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},x.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},Yt=x.ajaxSettings.xhr();v.cors=!!Yt&&"withCredentials"in Yt,v.ajax=Yt=!!Yt,x.ajaxTransport((function(e){var t,i;if(v.cors||Yt&&!e.crossDomain)return{send:function(o,r){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)a.setRequestHeader(s,o[s]);t=function(e){return function(){t&&(t=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?r(0,"error"):r(a.status,a.statusText):r(Ut[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),i=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout((function(){t&&i()}))},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),x.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return x.globalEval(e),e}}}),x.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),x.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,o){t=x("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Xt,Vt=[],Kt=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Vt.pop()||x.expando+"_"+Et.guid++;return this[e]=!0,e}}),x.ajaxPrefilter("json jsonp",(function(e,t,i){var o,r,s,a=!1!==e.jsonp&&(Kt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Kt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=m(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Kt,"$1"+o):!1!==e.jsonp&&(e.url+=(Ct.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return s||x.error(o+" was not called"),s[0]},e.dataTypes[0]="json",r=n[o],n[o]=function(){s=arguments},i.always((function(){void 0===r?x(n).removeProp(o):n[o]=r,e[o]&&(e.jsonpCallback=t.jsonpCallback,Vt.push(o)),s&&m(r)&&r(s[0]),s=r=void 0})),"script"})),v.createHTMLDocument=((Xt=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Xt.childNodes.length),x.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((i=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(i)):t=b),r=!n&&[],(o=O.exec(e))?[t.createElement(o[1])]:(o=Se([e],t,r),r&&r.length&&x(r).remove(),x.merge([],o.childNodes)));var i,o,r},x.fn.load=function(e,t,n){var i,o,r,s=this,a=e.indexOf(" ");return a>-1&&(i=yt(e.slice(a)),e=e.slice(0,a)),m(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),s.length>0&&x.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done((function(e){r=arguments,s.html(i?x("<div>").append(x.parseHTML(e)).find(i):e)})).always(n&&function(e,t){s.each((function(){n.apply(this,r||[e.responseText,t,e])}))}),this},x.expr.pseudos.animated=function(e){return x.grep(x.timers,(function(t){return e===t.elem})).length},x.offset={setOffset:function(e,t,n){var i,o,r,s,a,l,c=x.css(e,"position"),u=x(e),d={};"static"===c&&(e.style.position="relative"),a=u.offset(),r=x.css(e,"top"),l=x.css(e,"left"),("absolute"===c||"fixed"===c)&&(r+l).indexOf("auto")>-1?(s=(i=u.position()).top,o=i.left):(s=parseFloat(r)||0,o=parseFloat(l)||0),m(t)&&(t=t.call(e,n,x.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+o),"using"in t?t.using.call(e,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),u.css(d))}},x.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){x.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],o={top:0,left:0};if("fixed"===x.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===x.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((o=x(e).offset()).top+=x.css(e,"borderTopWidth",!0),o.left+=x.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-x.css(i,"marginTop",!0),left:t.left-o.left-x.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===x.css(e,"position");)e=e.offsetParent;return e||re}))}}),x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;x.fn[e]=function(i){return B(this,(function(e,i,o){var r;if(y(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===o)return r?r[t]:e[i];r?r.scrollTo(n?r.pageXOffset:o,n?o:r.pageYOffset):e[i]=o}),e,i,arguments.length)}})),x.each(["top","left"],(function(e,t){x.cssHooks[t]=Ye(v.pixelPosition,(function(e,n){if(n)return n=Ue(e,t),ze.test(n)?x(e).position()[t]+"px":n}))})),x.each({Height:"height",Width:"width"},(function(e,t){x.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){x.fn[i]=function(o,r){var s=arguments.length&&(n||"boolean"!=typeof o),a=n||(!0===o||!0===r?"margin":"border");return B(this,(function(t,n,o){var r;return y(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===o?x.css(t,n,a):x.style(t,n,o,a)}),t,s?o:void 0,s)}}))})),x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){x.fn[t]=function(e){return this.on(t,e)}})),x.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),x.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){x.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Qt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;x.proxy=function(e,t){var n,i,o;if("string"==typeof t&&(n=e[t],t=e,e=n),m(e))return i=a.call(arguments,2),(o=function(){return e.apply(t||this,i.concat(a.call(arguments)))}).guid=e.guid=e.guid||x.guid++,o},x.holdReady=function(e){e?x.readyWait++:x.ready(!0)},x.isArray=Array.isArray,x.parseJSON=JSON.parse,x.nodeName=D,x.isFunction=m,x.isWindow=y,x.camelCase=V,x.type=S,x.now=Date.now,x.isNumeric=function(e){var t=x.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},x.trim=function(e){return null==e?"":(e+"").replace(Qt,"")},void 0===(i=function(){return x}.apply(t,[]))||(e.exports=i);var Gt=n.jQuery,Jt=n.$;return x.noConflict=function(e){return n.$===x&&(n.$=Jt),e&&n.jQuery===x&&(n.jQuery=Gt),x},void 0===o&&(n.jQuery=n.$=x),x}))},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var o=(s=i,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(l," */")),r=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[n].concat(r).concat([o]).join("\n")}var s,a,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,i){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(i)for(var r=0;r<this.length;r++){var s=this[r][0];null!=s&&(o[s]=!0)}for(var a=0;a<e.length;a++){var l=[].concat(e[a]);i&&o[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(n){var i,o,r;"undefined"!=typeof window&&window,o=[],void 0===(r="function"==typeof(i=function(){var e=function(t,n){"use strict";var i=Object.create(e.prototype),o=0,r=0,s=0,a=0,l=[],c=!0,u=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||window.oRequestAnimationFrame||function(e){return setTimeout(e,1e3/60)},d=null,f=!1;try{var p=Object.defineProperty({},"passive",{get:function(){f=!0}});window.addEventListener("testPassive",null,p),window.removeEventListener("testPassive",null,p)}catch(e){}var h=window.cancelAnimationFrame||window.mozCancelAnimationFrame||clearTimeout,g=window.transformProp||function(){var e=document.createElement("div");if(null===e.style.transform){var t=["Webkit","Moz","ms"];for(var n in t)if(void 0!==e.style[t[n]+"Transform"])return t[n]+"Transform"}return"transform"}();i.options={speed:-2,verticalSpeed:null,horizontalSpeed:null,breakpoints:[576,768,1201],center:!1,wrapper:null,relativeToWrapper:!1,round:!0,vertical:!0,horizontal:!1,verticalScrollAxis:"y",horizontalScrollAxis:"x",callback:function(){}},n&&Object.keys(n).forEach((function(e){i.options[e]=n[e]})),n&&n.breakpoints&&function(){if(3===i.options.breakpoints.length&&Array.isArray(i.options.breakpoints)){var e,t=!0,n=!0;if(i.options.breakpoints.forEach((function(i){"number"!=typeof i&&(n=!1),null!==e&&i<e&&(t=!1),e=i})),t&&n)return}i.options.breakpoints=[576,768,1201],console.warn("Rellax: You must pass an array of 3 numbers in ascending order to the breakpoints option. Defaults reverted")}(),t||(t=".rellax");var v="string"==typeof t?document.querySelectorAll(t):[t];if(v.length>0){if(i.elems=v,i.options.wrapper&&!i.options.wrapper.nodeType){var m=document.querySelector(i.options.wrapper);if(!m)return void console.warn("Rellax: The wrapper you're trying to use doesn't exist.");i.options.wrapper=m}var y,b=function(){for(var e=0;e<l.length;e++)i.elems[e].style.cssText=l[e].style;var t,n;l=[],r=window.innerHeight,a=window.innerWidth,t=a,n=i.options.breakpoints,y=t<n[0]?"xs":t>=n[0]&&t<n[1]?"sm":t>=n[1]&&t<n[2]?"md":"lg",T(),function(){for(var e=0;e<i.elems.length;e++){var t=w(i.elems[e]);l.push(t)}}(),E(),c&&(window.addEventListener("resize",b),c=!1,_())},w=function(e){var t,n=e.getAttribute("data-rellax-percentage"),o=e.getAttribute("data-rellax-speed"),s=e.getAttribute("data-rellax-xs-speed"),l=e.getAttribute("data-rellax-mobile-speed"),c=e.getAttribute("data-rellax-tablet-speed"),u=e.getAttribute("data-rellax-desktop-speed"),d=e.getAttribute("data-rellax-vertical-speed"),f=e.getAttribute("data-rellax-horizontal-speed"),p=e.getAttribute("data-rellax-vertical-scroll-axis"),h=e.getAttribute("data-rellax-horizontal-scroll-axis"),g=e.getAttribute("data-rellax-zindex")||0,v=e.getAttribute("data-rellax-min"),m=e.getAttribute("data-rellax-max"),b=e.getAttribute("data-rellax-min-x"),w=e.getAttribute("data-rellax-max-x"),T=e.getAttribute("data-rellax-min-y"),x=e.getAttribute("data-rellax-max-y"),_=!0;s||l||c||u?t={xs:s,sm:l,md:c,lg:u}:_=!1;var E=i.options.wrapper?i.options.wrapper.scrollTop:window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop;i.options.relativeToWrapper&&(E=(window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop)-i.options.wrapper.offsetTop);var C=i.options.vertical&&(n||i.options.center)?E:0,k=i.options.horizontal&&(n||i.options.center)?i.options.wrapper?i.options.wrapper.scrollLeft:window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft:0,A=C+e.getBoundingClientRect().top,D=e.clientHeight||e.offsetHeight||e.scrollHeight,O=k+e.getBoundingClientRect().left,L=e.clientWidth||e.offsetWidth||e.scrollWidth,N=n||(C-A+r)/(D+r),I=n||(k-O+a)/(L+a);i.options.center&&(I=.5,N=.5);var j=_&&null!==t[y]?Number(t[y]):o||i.options.speed,H=d||i.options.verticalSpeed,P=f||i.options.horizontalSpeed,$=p||i.options.verticalScrollAxis,M=h||i.options.horizontalScrollAxis,R=S(I,N,j,H,P),q=e.style.cssText,z="",W=/transform\s*:/i.exec(q);if(W){var F=W.index,B=q.slice(F),U=B.indexOf(";");z=U?" "+B.slice(11,U).replace(/\s/g,""):" "+B.slice(11).replace(/\s/g,"")}return{baseX:R.x,baseY:R.y,top:A,left:O,height:D,width:L,speed:j,verticalSpeed:H,horizontalSpeed:P,verticalScrollAxis:$,horizontalScrollAxis:M,style:q,transform:z,zindex:g,min:v,max:m,minX:b,maxX:w,minY:T,maxY:x}},T=function(){var e=o,t=s;if(o=i.options.wrapper?i.options.wrapper.scrollTop:(document.documentElement||document.body.parentNode||document.body).scrollTop||window.pageYOffset,s=i.options.wrapper?i.options.wrapper.scrollLeft:(document.documentElement||document.body.parentNode||document.body).scrollLeft||window.pageXOffset,i.options.relativeToWrapper){var n=(document.documentElement||document.body.parentNode||document.body).scrollTop||window.pageYOffset;o=n-i.options.wrapper.offsetTop}return!(e==o||!i.options.vertical)||!(t==s||!i.options.horizontal)},S=function(e,t,n,o,r){var s={},a=(r||n)*(100*(1-e)),l=(o||n)*(100*(1-t));return s.x=i.options.round?Math.round(a):Math.round(100*a)/100,s.y=i.options.round?Math.round(l):Math.round(100*l)/100,s},x=function(){window.removeEventListener("resize",x),window.removeEventListener("orientationchange",x),(i.options.wrapper?i.options.wrapper:window).removeEventListener("scroll",x),(i.options.wrapper?i.options.wrapper:document).removeEventListener("touchmove",x),d=u(_)},_=function(){T()&&!1===c?(E(),d=u(_)):(d=null,window.addEventListener("resize",x),window.addEventListener("orientationchange",x),(i.options.wrapper?i.options.wrapper:window).addEventListener("scroll",x,!!f&&{passive:!0}),(i.options.wrapper?i.options.wrapper:document).addEventListener("touchmove",x,!!f&&{passive:!0}))},E=function(){for(var e,t=0;t<i.elems.length;t++){var n=l[t].verticalScrollAxis.toLowerCase(),c=l[t].horizontalScrollAxis.toLowerCase(),u=-1!=n.indexOf("x")?o:0,d=-1!=n.indexOf("y")?o:0,f=-1!=c.indexOf("x")?s:0,p=(d+(-1!=c.indexOf("y")?s:0)-l[t].top+r)/(l[t].height+r),h=(u+f-l[t].left+a)/(l[t].width+a),v=(e=S(h,p,l[t].speed,l[t].verticalSpeed,l[t].horizontalSpeed)).y-l[t].baseY,m=e.x-l[t].baseX;null!==l[t].min&&(i.options.vertical&&!i.options.horizontal&&(v=v<=l[t].min?l[t].min:v),i.options.horizontal&&!i.options.vertical&&(m=m<=l[t].min?l[t].min:m)),null!=l[t].minY&&(v=v<=l[t].minY?l[t].minY:v),null!=l[t].minX&&(m=m<=l[t].minX?l[t].minX:m),null!==l[t].max&&(i.options.vertical&&!i.options.horizontal&&(v=v>=l[t].max?l[t].max:v),i.options.horizontal&&!i.options.vertical&&(m=m>=l[t].max?l[t].max:m)),null!=l[t].maxY&&(v=v>=l[t].maxY?l[t].maxY:v),null!=l[t].maxX&&(m=m>=l[t].maxX?l[t].maxX:m);var y=l[t].zindex,b="translate3d("+(i.options.horizontal?m:"0")+"px,"+(i.options.vertical?v:"0")+"px,"+y+"px) "+l[t].transform;i.elems[t].style[g]=b}i.options.callback(e)};return i.destroy=function(){for(var e=0;e<i.elems.length;e++)i.elems[e].style.cssText=l[e].style;c||(window.removeEventListener("resize",b),c=!0),h(d),d=null},b(),i.refresh=b,i}console.warn("Rellax: The elements you're trying to select don't exist.")};return e})?i.apply(t,o):i)||(e.exports=r)}).call(this,n(2))},function(e,t,n){"use strict";n.r(t);n(5),n(13),n(14);var i=n(0),o=n.n(i),r=(n(18),n(19),n(3)),s=n.n(r);window.$=window.jQuery=o.a,o()(document).ready(()=>{var e=o()("form#weddingRsvpForm");o()("#submit-form").on("click",(function(t){t.preventDefault();o.a.ajax({url:"https://script.google.com/macros/s/AKfycbzKBO9PBckRlXfRPiruLpq2yOj6MwwlSUcDOHGlkoNfMtWntrqJ/exec",method:"GET",dataType:"json",data:e.serialize(),success:function(){alert("form sent")}})}));new s.a(".rellax",{speed:0,center:!1,wrapper:null,round:!0,vertical:!0,horizontal:!1})})},function(e,t,n){var i=n(6),o=n(7),r=n(8),s=n(9),a=n(10),l=n(11),c=n(12),u='<!doctype html> <html> <head> <meta charset=utf-8 /> <title><%= htmlWebpackPlugin.options.title %></title> </head> <body> <div id=globalNavigation> <nav> <a class=navigationItem href=#about-us> About Us </a> <a class=navigationItem href=#the-ceremony> The Ceremony </a> <div class=logoContainer> <p class=logoText>Christy & Rob\'s <br/> Wedding</p> </div> <a class=navigationItem href=#the-reception> The Reception </a> <a class=navigationItem href=#getting-there> Getting There </a> </nav> </div> <div class="background rellax" data-rellax-speed=10> <img class=backgroundImage src='+i(o)+"> <img class=backgroundImage src="+i(r)+"> <img class=backgroundImage src="+i(s)+"> <img class=backgroundImage src="+i(a)+'> </div> <div class="foreground rellax" data-rellax-speed=-4> <div class=pageSection id=home> <span class=landingText>Christy & Rob\'s<br/>Wedding</span> <span class=landingSubText>26 09 2020 | San Souci</span> <a class=rsvpButton href=#rsvp-form>RSVP</a> </div> <div class=pageSection id=about-us> <div class=pageHeader> <h1 class=pageHeading> About Us </h1> </div> <div class=aboutUsRowContainer> <div class=aboutUsRow> <div class="aboutUsColumn christy"> <div class=profilePhotoContainer> <img src='+i(l)+' alt="" class=profilePhoto> </div> <div class=profileFactsContainer> <h3 class=profileName>Christy Cheung</h3> <ul class=profileFacts> <li>Is the bride</li> <li>Is a girl</li> <li>Is pretty</li> </ul> </div> </div> <div class="aboutUsColumn rob"> <div class=profilePhotoContainer> <img src='+i(c)+' alt="" class=profilePhoto> </div> <div class=profileFactsContainer> <h3 class=profileName>Robinson Lam</h3> <ul class=profileFacts> <li>Is the groom</li> <li>Is a guy</li> <li>Is also pretty</li> </ul> </div> </div> </div> </div> </div> <div class="pageSection transparent" id=rsvp-form> <div class=pageHeader> <h1 class=pageHeading> Our Story </h1> </div> <div class=ourStoryCOntainer> <p></p> </div> </div> </div> </body> </html>';e.exports=u},function(e,t,n){"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(t.hash&&(e+=t.hash),t.maybeNeedQuotes&&/[\t\n\f\r "'=<>`]/.test(e)?'"'.concat(e,'"'):e)}},function(e,t,n){"use strict";n.r(t),t.default=n.p+"ab83bd3a12bb6894b9f1420ba086551a.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"95181525f5aa499358cdefc9ce88f096.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"c02b31f30cb1d300f48c73e445240812.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"887d589b0f9e8870420fdfa1762d64ff.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"d6b773a25deb9f28cff37e49e67cd02f.jpg"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"72356cee97208f960649485239b9fe31.jpg"},function(e,t,n){var i;
/*!
 * fullPage 3.0.8
 * https://github.com/alvarotrigo/fullPage.js
 *
 * @license GPLv3 for open source use only
 * or Fullpage Commercial License for commercial use
 * http://alvarotrigo.com/fullPage/pricing/
 *
 * Copyright (C) 2018 http://alvarotrigo.com/fullPage - A project by Alvaro Trigo
 */!function(o,r,s,a,l){void 0===(i=function(){return o.fullpage=a(r,s),o.fullpage}.call(t,n,t,e))||(e.exports=i)}(this,window,document,(function(e,t){"use strict";var n="active",i="fp-completely",o="fp-section",r="."+o,s=".fp-section.active",a=".fp-tableCell",l=".fp-slide",c=".fp-slides",u=".fp-slidesContainer";function d(t,n){e.console&&e.console[t]&&e.console[t]("fullPage: "+n)}function f(e,n){return(n=arguments.length>1?n:t)?n.querySelectorAll(e):null}function p(e){e=e||{};for(var t=1,n=arguments.length;t<n;++t){var i=arguments[t];if(i)for(var o in i)i.hasOwnProperty(o)&&("[object Object]"!==Object.prototype.toString.call(i[o])?e[o]=i[o]:e[o]=p(e[o],i[o]))}return e}function h(e,t){return null!=e&&(e.classList?e.classList.contains(t):new RegExp("(^| )"+t+"( |$)","gi").test(e.className))}function g(){return"innerHeight"in e?e.innerHeight:t.documentElement.offsetHeight}function v(){return e.innerWidth}function m(e,t){var n;for(n in e=E(e),t)if(t.hasOwnProperty(n)&&null!==n)for(var i=0;i<e.length;i++){e[i].style[n]=t[n]}return e}function y(e,t,n){for(var i=e[n];i&&!U(i,t);)i=i[n];return i}function b(e,t){return y(e,t,"previousElementSibling")}function w(e,t){return y(e,t,"nextElementSibling")}function T(e){return e.previousElementSibling}function S(e){return e.nextElementSibling}function x(e){return e[e.length-1]}function _(e,t){e=A(e)?e[0]:e;for(var n=null!=t?f(t,e.parentNode):e.parentNode.childNodes,i=0,o=0;o<n.length;o++){if(n[o]==e)return i;1==n[o].nodeType&&i++}return-1}function E(e){return A(e)?e:[e]}function C(e){e=E(e);for(var t=0;t<e.length;t++)e[t].style.display="none";return e}function k(e){e=E(e);for(var t=0;t<e.length;t++)e[t].style.display="block";return e}function A(e){return"[object Array]"===Object.prototype.toString.call(e)||"[object NodeList]"===Object.prototype.toString.call(e)}function D(e,t){e=E(e);for(var n=0;n<e.length;n++){var i=e[n];i.classList?i.classList.add(t):i.className+=" "+t}return e}function O(e,t){e=E(e);for(var n=t.split(" "),i=0;i<n.length;i++){t=n[i];for(var o=0;o<e.length;o++){var r=e[o];r.classList?r.classList.remove(t):r.className=r.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")}}return e}function L(e,t){t.appendChild(e)}function N(e,n,i){var o;n=n||t.createElement("div");for(var r=0;r<e.length;r++){var s=e[r];(i&&!r||!i)&&(o=n.cloneNode(!0),s.parentNode.insertBefore(o,s)),o.appendChild(s)}return e}function I(e,t){N(e,t,!0)}function j(e,t){for("string"==typeof t&&(t=X(t)),e.appendChild(t);e.firstChild!==t;)t.appendChild(e.firstChild)}function H(e){for(var n=t.createDocumentFragment();e.firstChild;)n.appendChild(e.firstChild);e.parentNode.replaceChild(n,e)}function P(e,t){return e&&1===e.nodeType?U(e,t)?e:P(e.parentNode,t):null}function $(e,t){R(e,e.nextSibling,t)}function M(e,t){R(e,e,t)}function R(e,t,n){A(n)||("string"==typeof n&&(n=X(n)),n=[n]);for(var i=0;i<n.length;i++)e.parentNode.insertBefore(n[i],t)}function q(){var n=t.documentElement;return(e.pageYOffset||n.scrollTop)-(n.clientTop||0)}function z(e){return Array.prototype.filter.call(e.parentNode.children,(function(t){return t!==e}))}function W(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function F(e){if("function"==typeof e)return!0;var t=Object.prototype.toString(e);return"[object Function]"===t||"[object GeneratorFunction]"===t}function B(n,i,o){var r;o=void 0===o?{}:o,"function"==typeof e.CustomEvent?r=new CustomEvent(i,{detail:o}):(r=t.createEvent("CustomEvent")).initCustomEvent(i,!0,!0,o),n.dispatchEvent(r)}function U(e,t){return(e.matches||e.matchesSelector||e.msMatchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector||e.oMatchesSelector).call(e,t)}function Y(e,t){if("boolean"==typeof t)for(var n=0;n<e.length;n++)e[n].style.display=t?"block":"none";return e}function X(e){var n=t.createElement("div");return n.innerHTML=e.trim(),n.firstChild}function V(e){e=E(e);for(var t=0;t<e.length;t++){var n=e[t];n&&n.parentElement&&n.parentNode.removeChild(n)}}function K(e,t,n){for(var i=e[n],o=[];i;)(U(i,t)||null==t)&&o.push(i),i=i[n];return o}function Q(e,t){return K(e,t,"nextElementSibling")}function G(e,t){return K(e,t,"previousElementSibling")}return e.NodeList&&!NodeList.prototype.forEach&&(NodeList.prototype.forEach=function(t,n){n=n||e;for(var i=0;i<this.length;i++)t.call(n,this[i],i,this)}),e.fp_utils={$:f,deepExtend:p,hasClass:h,getWindowHeight:g,css:m,until:y,prevUntil:b,nextUntil:w,prev:T,next:S,last:x,index:_,getList:E,hide:C,show:k,isArrayOrList:A,addClass:D,removeClass:O,appendTo:L,wrap:N,wrapAll:I,wrapInner:j,unwrap:H,closest:P,after:$,before:M,insertBefore:R,getScrollTop:q,siblings:z,preventDefault:W,isFunction:F,trigger:B,matches:U,toggle:Y,createElementFromHTML:X,remove:V,filter:function(e,t){Array.prototype.filter.call(e,t)},untilAll:K,nextAll:Q,prevAll:G,showError:d},function(y,E){var A=E&&new RegExp("([\\d\\w]{8}-){3}[\\d\\w]{8}|^(?=.*?[A-Y])(?=.*?[a-y])(?=.*?[0-8])(?=.*?[#?!@$%^&*-]).{8,}$").test(E.licenseKey)||t.domain.indexOf("alvarotrigo.com")>-1,N=f("html, body"),R=f("html")[0],K=f("body")[0];if(!h(R,"fp-enabled")){var J={};E=p({menu:!1,anchors:[],lockAnchors:!1,navigation:!1,navigationPosition:"right",navigationTooltips:[],showActiveTooltip:!1,slidesNavigation:!1,slidesNavPosition:"bottom",scrollBar:!1,hybrid:!1,css3:!0,scrollingSpeed:700,autoScrolling:!0,fitToSection:!0,fitToSectionDelay:1e3,easing:"easeInOutCubic",easingcss3:"ease",loopBottom:!1,loopTop:!1,loopHorizontal:!0,continuousVertical:!1,continuousHorizontal:!1,scrollHorizontally:!1,interlockedSlides:!1,dragAndMove:!1,offsetSections:!1,resetSliders:!1,fadingEffect:!1,normalScrollElements:null,scrollOverflow:!1,scrollOverflowReset:!1,scrollOverflowHandler:e.fp_scrolloverflow?e.fp_scrolloverflow.iscrollHandler:null,scrollOverflowOptions:null,touchSensitivity:5,touchWrapper:"string"==typeof y?f(y)[0]:y,bigSectionsDestination:null,keyboardScrolling:!0,animateAnchor:!0,recordHistory:!0,controlArrows:!0,controlArrowColor:"#fff",verticalCentered:!0,sectionsColor:[],paddingTop:0,paddingBottom:0,fixedElements:null,responsive:0,responsiveWidth:0,responsiveHeight:0,responsiveSlides:!1,parallax:!1,parallaxOptions:{type:"reveal",percentage:62,property:"translate"},cards:!1,cardsOptions:{perspective:100,fadeContent:!0,fadeBackground:!0},sectionSelector:".section",slideSelector:".slide",v2compatible:!1,afterLoad:null,onLeave:null,afterRender:null,afterResize:null,afterReBuild:null,afterSlideLoad:null,onSlideLeave:null,afterResponsive:null,lazyLoading:!0},E);var Z,ee,te,ne,ie=!1,oe=navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/),re="ontouchstart"in e||navigator.msMaxTouchPoints>0||navigator.maxTouchPoints,se="string"==typeof y?f(y)[0]:y,ae=g(),le=v(),ce=!1,ue=!0,de=!0,fe=[],pe={m:{up:!0,down:!0,left:!0,right:!0}};pe.k=p({},pe.m);var he,ge,ve,me,ye,be,we,Te,Se,xe=function(){var t;t=e.PointerEvent?{down:"pointerdown",move:"pointermove"}:{down:"MSPointerDown",move:"MSPointerMove"};return t}(),_e={touchmove:"ontouchmove"in e?"touchmove":xe.move,touchstart:"ontouchstart"in e?"touchstart":xe.down},Ee=!1;try{var Ce=Object.defineProperty({},"passive",{get:function(){Ee=!0}});e.addEventListener("testPassive",null,Ce),e.removeEventListener("testPassive",null,Ce)}catch(e){}var ke,Ae,De=p({},E),Oe=!1,Le=!0,Ne=["parallax","scrollOverflowReset","dragAndMove","offsetSections","fadingEffect","responsiveSlides","continuousHorizontal","interlockedSlides","scrollHorizontally","resetSliders","cards"];kn(),e.fp_easings=p(e.fp_easings,{easeInOutCubic:function(e,t,n,i){return(e/=i/2)<1?n/2*e*e*e+t:n/2*((e-=2)*e*e+2)+t}}),se&&(J.version="3.0.8",J.setAutoScrolling=Fe,J.setRecordHistory=Be,J.setScrollingSpeed=Ue,J.setFitToSection=Ye,J.setLockAnchors=function(e){E.lockAnchors=e},J.setMouseWheelScrolling=Xe,J.setAllowScrolling=Ve,J.setKeyboardScrolling=Qe,J.moveSectionUp=Ge,J.moveSectionDown=Je,J.silentMoveTo=Ze,J.moveTo=et,J.moveSlideRight=tt,J.moveSlideLeft=nt,J.fitToSection=vt,J.reBuild=it,J.setResponsive=rt,J.getFullpageData=function(){return E},J.destroy=function(n){Fe(!1,"internal"),Ve(!0),Ke(!1),Qe(!1),D(se,"fp-destroyed"),[ye,me,ge,be,we,Se,ve].forEach((function(e){clearTimeout(e)})),e.removeEventListener("scroll",gt),e.removeEventListener("hashchange",zt),e.removeEventListener("resize",on),t.removeEventListener("keydown",Ft),t.removeEventListener("keyup",Ut),["click","touchstart"].forEach((function(e){t.removeEventListener(e,st)})),["mouseenter","touchstart","mouseleave","touchend"].forEach((function(e){t.removeEventListener(e,lt,!0)})),n&&(xn(0),f("img[data-src], source[data-src], audio[data-src], iframe[data-src]",se).forEach((function(e){Nt(e,"src")})),f("img[data-srcset]").forEach((function(e){Nt(e,"srcset")})),V(f("#fp-nav, .fp-slidesNav, .fp-controlArrow")),m(f(r),{height:"","background-color":"",padding:""}),m(f(l),{width:""}),m(se,{height:"",position:"","-ms-touch-action":"","touch-action":""}),m(N,{overflow:"",height:""}),O(R,"fp-enabled"),O(K,"fp-responsive"),K.className.split(/\s+/).forEach((function(e){0===e.indexOf("fp-viewing")&&O(K,e)})),f(".fp-section, .fp-slide").forEach((function(e){E.scrollOverflowHandler&&E.scrollOverflow&&E.scrollOverflowHandler.remove(e),O(e,"fp-table active "+i),e.getAttribute("data-fp-styles")&&e.setAttribute("style",e.getAttribute("data-fp-styles")),h(e,o)&&!Oe&&e.removeAttribute("data-anchor")})),ln(se),[a,u,c].forEach((function(e){f(e,se).forEach((function(e){H(e)}))})),m(se,{"-webkit-transition":"none",transition:"none"}),e.scrollTo(0,0),[o,"fp-slide","fp-slidesContainer"].forEach((function(e){O(f("."+e),e)})))},J.getActiveSection=function(){return new Ln(f(s)[0])},J.getActiveSlide=function(){return Dt(f(".fp-slide.active",f(s)[0])[0])},J.test={top:"0px",translate3d:"translate3d(0px, 0px, 0px)",translate3dH:function(){for(var e=[],t=0;t<f(E.sectionSelector,se).length;t++)e.push("translate3d(0px, 0px, 0px)");return e}(),left:function(){for(var e=[],t=0;t<f(E.sectionSelector,se).length;t++)e.push(0);return e}(),options:E,setAutoScrolling:Fe},J.shared={afterRenderActions:ht,isNormalScrollElement:!1},e.fullpage_api=J,E.$&&Object.keys(J).forEach((function(e){E.$.fn.fullpage[e]=J[e]})),function(){E.css3&&(E.css3=function(){var n,i=t.createElement("p"),o={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};for(var r in i.style.display="block",t.body.insertBefore(i,null),o)void 0!==i.style[r]&&(i.style[r]="translate3d(1px,1px,1px)",n=e.getComputedStyle(i).getPropertyValue(o[r]));return t.body.removeChild(i),void 0!==n&&n.length>0&&"none"!==n}());E.scrollBar=E.scrollBar||E.hybrid,function(){if(!E.anchors.length){var e=f(E.sectionSelector.split(",").join("[data-anchor],")+"[data-anchor]",se);e.length&&(Oe=!0,e.forEach((function(e){E.anchors.push(e.getAttribute("data-anchor").toString())})))}if(!E.navigationTooltips.length){var t=f(E.sectionSelector.split(",").join("[data-tooltip],")+"[data-tooltip]",se);t.length&&t.forEach((function(e){E.navigationTooltips.push(e.getAttribute("data-tooltip").toString())}))}}(),function(){m(se,{height:"100%",position:"relative"}),D(se,"fullpage-wrapper"),D(R,"fp-enabled"),ae=g(),O(se,"fp-destroyed"),D(f(E.sectionSelector,se),o),D(f(E.slideSelector,se),"fp-slide");for(var e=f(r),i=0;i<e.length;i++){var a=i,c=e[i],u=f(l,c),d=u.length;c.setAttribute("data-fp-styles",c.getAttribute("style")),dt(c,a),ft(c,a),d>0?ut(c,u,d):E.verticalCentered&&dn(c)}E.fixedElements&&E.css3&&f(E.fixedElements).forEach((function(e){K.appendChild(e)}));E.navigation&&function(){var e=t.createElement("div");e.setAttribute("id","fp-nav");var i=t.createElement("ul");e.appendChild(i),L(e,K);var o=f("#fp-nav")[0];D(o,"fp-"+E.navigationPosition),E.showActiveTooltip&&D(o,"fp-show-active");for(var a="",l=0;l<f(r).length;l++){var c="";E.anchors.length&&(c=E.anchors[l]),a+='<li><a href="#'+c+'"><span class="fp-sr-only">'+pt(l,"Section")+"</span><span></span></a>";var u=E.navigationTooltips[l];void 0!==u&&""!==u&&(a+='<div class="fp-tooltip fp-'+E.navigationPosition+'">'+u+"</div>"),a+="</li>"}f("ul",o)[0].innerHTML=a,m(f("#fp-nav"),{"margin-top":"-"+f("#fp-nav")[0].offsetHeight/2+"px"});var d=f("li",f("#fp-nav")[0])[_(f(s)[0],r)];D(f("a",d),n)}();void f('iframe[src*="youtube.com/embed/"]',se).forEach((function(e){var t,n,i;n="enablejsapi=1",i=(t=e).getAttribute("src"),t.setAttribute("src",i+(/\?/.test(i)?"&":"?")+n)})),E.scrollOverflow&&(he=E.scrollOverflowHandler.init(E))}(),Ve(!0),Ke(!0),Fe(E.autoScrolling,"internal"),sn(),wn(),"complete"===t.readyState&&qt();e.addEventListener("load",qt),E.scrollOverflow||ht();!function(){for(var e=1;e<4;e++)Se=setTimeout(ct,350*e)}()}(),e.addEventListener("scroll",gt),e.addEventListener("hashchange",zt),e.addEventListener("blur",Qt),e.addEventListener("resize",on),t.addEventListener("keydown",Ft),t.addEventListener("keyup",Ut),["click","touchstart"].forEach((function(e){t.addEventListener(e,st)})),E.normalScrollElements&&(["mouseenter","touchstart"].forEach((function(e){at(e,!1)})),["mouseleave","touchend"].forEach((function(e){at(e,!0)}))));var Ie=!1,je=0,He=0,Pe=0,$e=0,Me=0,Re=(new Date).getTime(),qe=0,ze=0,We=ae;return J}function Fe(e,t){e||xn(0),Cn("autoScrolling",e,t);var n=f(s)[0];if(E.autoScrolling&&!E.scrollBar)m(N,{overflow:"hidden",height:"100%"}),Be(De.recordHistory,"internal"),m(se,{"-ms-touch-action":"none","touch-action":"none"}),null!=n&&xn(n.offsetTop);else if(m(N,{overflow:"visible",height:"initial"}),Be(!!E.autoScrolling&&De.recordHistory,"internal"),m(se,{"-ms-touch-action":"","touch-action":""}),null!=n){var i=Ot(n.offsetTop);i.element.scrollTo(0,i.options)}}function Be(e,t){Cn("recordHistory",e,t)}function Ue(e,t){Cn("scrollingSpeed",e,t)}function Ye(e,t){Cn("fitToSection",e,t)}function Xe(n){n?(!function(){var n,i="";e.addEventListener?n="addEventListener":(n="attachEvent",i="on");var o="onwheel"in t.createElement("div")?"wheel":void 0!==t.onmousewheel?"mousewheel":"DOMMouseScroll",r=!!Ee&&{passive:!1};"DOMMouseScroll"==o?t[n](i+"MozMousePixelScroll",xt,r):t[n](i+o,xt,r)}(),se.addEventListener("mousedown",Yt),se.addEventListener("mouseup",Xt)):(t.addEventListener?(t.removeEventListener("mousewheel",xt,!1),t.removeEventListener("wheel",xt,!1),t.removeEventListener("MozMousePixelScroll",xt,!1)):t.detachEvent("onmousewheel",xt),se.removeEventListener("mousedown",Yt),se.removeEventListener("mouseup",Xt))}function Ve(e,t){void 0!==t?(t=t.replace(/ /g,"").split(",")).forEach((function(t){En(e,t,"m")})):En(e,"all","m")}function Ke(e){e?(Xe(!0),function(){if(oe||re){E.autoScrolling&&(K.removeEventListener(_e.touchmove,yt,{passive:!1}),K.addEventListener(_e.touchmove,yt,{passive:!1}));var e=E.touchWrapper;e.removeEventListener(_e.touchstart,Tt),e.removeEventListener(_e.touchmove,bt,{passive:!1}),e.addEventListener(_e.touchstart,Tt),e.addEventListener(_e.touchmove,bt,{passive:!1})}}()):(Xe(!1),function(){if(oe||re){E.autoScrolling&&(K.removeEventListener(_e.touchmove,bt,{passive:!1}),K.removeEventListener(_e.touchmove,yt,{passive:!1}));var e=E.touchWrapper;e.removeEventListener(_e.touchstart,Tt),e.removeEventListener(_e.touchmove,bt,{passive:!1})}}())}function Qe(e,t){void 0!==t?(t=t.replace(/ /g,"").split(",")).forEach((function(t){En(e,t,"k")})):(En(e,"all","k"),E.keyboardScrolling=e)}function Ge(){var e=b(f(s)[0],r);e||!E.loopTop&&!E.continuousVertical||(e=x(f(r))),null!=e&&Ct(e,null,!0)}function Je(){var e=w(f(s)[0],r);e||!E.loopBottom&&!E.continuousVertical||(e=f(r)[0]),null!=e&&Ct(e,null,!1)}function Ze(e,t){Ue(0,"internal"),et(e,t),Ue(De.scrollingSpeed,"internal")}function et(e,t){var n=hn(e);void 0!==t?gn(e,t):null!=n&&Ct(n)}function tt(e){_t("right",e)}function nt(e){_t("left",e)}function it(t){if(!h(se,"fp-destroyed")){ce=!0,ae=g(),le=v();for(var n=f(r),i=0;i<n.length;++i){var o=n[i],u=f(c,o)[0],d=f(l,o);E.verticalCentered&&m(f(a,o),{height:fn(o)+"px"}),m(o,{height:ae+"px"}),d.length>1&&tn(u,f(".fp-slide.active",u)[0])}E.scrollOverflow&&he.createScrollBarForAll();var p=_(f(s)[0],r);p&&Ze(p+1),ce=!1,F(E.afterResize)&&t&&E.afterResize.call(se,e.innerWidth,e.innerHeight),F(E.afterReBuild)&&!t&&E.afterReBuild.call(se)}}function ot(){return h(K,"fp-responsive")}function rt(e){var t=ot();e?t||(Fe(!1,"internal"),Ye(!1,"internal"),C(f("#fp-nav")),D(K,"fp-responsive"),F(E.afterResponsive)&&E.afterResponsive.call(se,e),E.scrollOverflow&&he.createScrollBarForAll()):t&&(Fe(De.autoScrolling,"internal"),Ye(De.autoScrolling,"internal"),k(f("#fp-nav")),O(K,"fp-responsive"),F(E.afterResponsive)&&E.afterResponsive.call(se,e))}function st(e){var t=e.target;t&&P(t,"#fp-nav a")?Gt.call(t,e):U(t,".fp-tooltip")?Bt.call(t):U(t,".fp-controlArrow")?Kt.call(t,e):U(t,".fp-slidesNav a")||null!=P(t,".fp-slidesNav a")?Jt.call(t,e):P(t,E.menu+" [data-menuanchor]")&&Zt.call(t,e)}function at(e,n){t["fp_"+e]=n,t.addEventListener(e,lt,!0)}function lt(e){var n=e.type,i=!1,o=E.scrollOverflow,r="mouseleave"===n?e.toElement||e.relatedTarget:e.target;if(r==t||!r)return Ke(!0),void(o&&E.scrollOverflowHandler.setIscroll(r,!0));("touchend"===n&&(Le=!1,setTimeout((function(){Le=!0}),800)),"mouseenter"!==n||Le)&&(E.normalScrollElements.split(",").forEach((function(e){if(!i){var t=U(r,e),n=P(r,e);(t||n)&&(J.shared.isNormalScrollElement||(Ke(!1),o&&E.scrollOverflowHandler.setIscroll(r,!1)),J.shared.isNormalScrollElement=!0,i=!0)}})),!i&&J.shared.isNormalScrollElement&&(Ke(!0),o&&E.scrollOverflowHandler.setIscroll(r,!0),J.shared.isNormalScrollElement=!1))}function ct(){var e=g(),t=v();ae===e&&le===t||(ae=e,le=t,it(!0))}function ut(e,i,o){var a=100*o,l=100/o,d=t.createElement("div");d.className="fp-slides",I(i,d);var p=t.createElement("div");p.className="fp-slidesContainer",I(i,p),m(f(u,e),{width:a+"%"}),o>1&&(E.controlArrows&&function(e){var t=[X('<div class="fp-controlArrow fp-prev"></div>'),X('<div class="fp-controlArrow fp-next"></div>')];$(f(c,e)[0],t),"#fff"!==E.controlArrowColor&&(m(f(".fp-controlArrow.fp-next",e),{"border-color":"transparent transparent transparent "+E.controlArrowColor}),m(f(".fp-controlArrow.fp-prev",e),{"border-color":"transparent "+E.controlArrowColor+" transparent transparent"}));E.loopHorizontal||C(f(".fp-controlArrow.fp-prev",e))}(e),E.slidesNavigation&&function(e,t){L(X('<div class="fp-slidesNav"><ul></ul></div>'),e);var i=f(".fp-slidesNav",e)[0];D(i,"fp-"+E.slidesNavPosition);for(var o=0;o<t;o++)L(X('<li><a href="#"><span class="fp-sr-only">'+pt(o,"Slide")+"</span><span></span></a></li>"),f("ul",i)[0]);m(i,{"margin-left":"-"+i.innerWidth/2+"px"}),D(f("a",f("li",i)[0]),n)}(e,o)),i.forEach((function(e){m(e,{width:l+"%"}),E.verticalCentered&&dn(e)}));var h=f(".fp-slide.active",e)[0];null!=h&&(0!==_(f(s),r)||0===_(f(s),r)&&0!==_(h))?Sn(h,"internal"):D(i[0],n)}function dt(e,t){t||null!=f(s)[0]||D(e,n),ne=f(s)[0],m(e,{height:ae+"px"}),E.paddingTop&&m(e,{"padding-top":E.paddingTop}),E.paddingBottom&&m(e,{"padding-bottom":E.paddingBottom}),void 0!==E.sectionsColor[t]&&m(e,{"background-color":E.sectionsColor[t]}),void 0!==E.anchors[t]&&e.setAttribute("data-anchor",E.anchors[t])}function ft(e,t){void 0!==E.anchors[t]&&h(e,n)&&cn(E.anchors[t],t),E.menu&&E.css3&&null!=P(f(E.menu)[0],".fullpage-wrapper")&&f(E.menu).forEach((function(e){K.appendChild(e)}))}function pt(e,t){return E.navigationTooltips[e]||E.anchors[e]||t+" "+(e+1)}function ht(){var e,t,n=f(s)[0];D(n,i),jt(n),It(),Pt(n),E.scrollOverflow&&E.scrollOverflowHandler.afterLoad(),e=Wt(),t=hn(e.section),e.section&&t&&(void 0===t||_(t)!==_(ne))||!F(E.afterLoad)||kt("afterLoad",{activeSection:n,element:n,direction:null,anchorLink:n.getAttribute("data-anchor"),sectionIndex:_(n,r)}),F(E.afterRender)&&kt("afterRender")}function gt(){var e;if(!E.autoScrolling||E.scrollBar){var t=q(),o=function(e){var t=e>je?"down":"up";return je=e,qe=e,t}(t),a=0,l=t+g()/2,c=K.offsetHeight-g()===t,u=f(r);if(c)a=u.length-1;else if(t)for(var d=0;d<u.length;++d){u[d].offsetTop<=l&&(a=d)}else a=0;if(function(e){var t=f(s)[0].offsetTop,n=t+g();if("up"==e)return n>=q()+g();return t<=q()}(o)&&(h(f(s)[0],i)||(D(f(s)[0],i),O(z(f(s)[0]),i))),!h(e=u[a],n)){Ie=!0;var p,v,m=f(s)[0],y=_(m,r)+1,b=un(e),w=e.getAttribute("data-anchor"),T=_(e,r)+1,S=f(".fp-slide.active",e)[0],x={activeSection:m,sectionIndex:T-1,anchorLink:w,element:e,leavingSection:y,direction:b};S&&(v=S.getAttribute("data-anchor"),p=_(S)),de&&(D(e,n),O(z(e),n),F(E.onLeave)&&kt("onLeave",x),F(E.afterLoad)&&kt("afterLoad",x),Mt(m),jt(e),Pt(e),cn(w,T-1),E.anchors.length&&(Z=w),mn(p,v,w,T)),clearTimeout(be),be=setTimeout((function(){Ie=!1}),100)}E.fitToSection&&(clearTimeout(we),we=setTimeout((function(){E.fitToSection&&f(s)[0].offsetHeight<=ae&&vt()}),E.fitToSectionDelay))}}function vt(){de&&(ce=!0,Ct(f(s)[0]),ce=!1)}function mt(e){if(pe.m[e]){var t="down"===e?Je:Ge;if(E.scrollOverflow){var n=E.scrollOverflowHandler.scrollable(f(s)[0]),i="down"===e?"bottom":"top";if(null!=n){if(!E.scrollOverflowHandler.isScrolled(i,n))return!0;t()}else t()}else t()}}function yt(e){E.autoScrolling&&wt(e)&&pe.m.up&&W(e)}function bt(t){var n=P(t.target,r)||f(s)[0];if(wt(t)){E.autoScrolling&&W(t);var i=Tn(t);$e=i.y,Me=i.x,f(c,n).length&&Math.abs(Pe-Me)>Math.abs(He-$e)?!ie&&Math.abs(Pe-Me)>v()/100*E.touchSensitivity&&(Pe>Me?pe.m.right&&tt(n):pe.m.left&&nt(n)):E.autoScrolling&&de&&Math.abs(He-$e)>e.innerHeight/100*E.touchSensitivity&&(He>$e?mt("down"):$e>He&&mt("up"))}}function wt(e){return void 0===e.pointerType||"mouse"!=e.pointerType}function Tt(e){if(E.fitToSection&&(ke=!1),wt(e)){var t=Tn(e);He=t.y,Pe=t.x}}function St(e,t){for(var n=0,i=e.slice(Math.max(e.length-t,1)),o=0;o<i.length;o++)n+=i[o];return Math.ceil(n/t)}function xt(t){var n=(new Date).getTime(),i=h(f(".fp-completely")[0],"fp-normal-scroll");if(!pe.m.down&&!pe.m.up)return W(t),!1;if(E.autoScrolling&&!te&&!i){var o=(t=t||e.event).wheelDelta||-t.deltaY||-t.detail,r=Math.max(-1,Math.min(1,o)),s=void 0!==t.wheelDeltaX||void 0!==t.deltaX,a=Math.abs(t.wheelDeltaX)<Math.abs(t.wheelDelta)||Math.abs(t.deltaX)<Math.abs(t.deltaY)||!s;fe.length>149&&fe.shift(),fe.push(Math.abs(o)),E.scrollBar&&W(t);var l=n-Re;if(Re=n,l>200&&(fe=[]),de)St(fe,10)>=St(fe,70)&&a&&mt(r<0?"down":"up");return!1}E.fitToSection&&(ke=!1)}function _t(e,t){var n=null==t?f(s)[0]:t,i=f(c,n)[0];if(!(null==i||ie||f(l,i).length<2)){var o=f(".fp-slide.active",i)[0],r=null;if(null==(r="left"===e?b(o,l):w(o,l))){if(!E.loopHorizontal)return;var a=z(o);r="left"===e?a[a.length-1]:a[0]}ie=!J.test.isTesting,tn(i,r,e)}}function Et(){for(var e=f(".fp-slide.active"),t=0;t<e.length;t++)Sn(e[t],"internal")}function Ct(e,t,i){if(null!=e){var o,a,l={element:e,callback:t,isMovementUp:i,dtop:function(e){var t=e.offsetHeight,n=e.offsetTop,i=n,o=n>qe,r=i-ae+t,s=E.bigSectionsDestination;return t>ae?(o||s)&&"bottom"!==s||(i=r):(o||ce&&null==S(e))&&(i=r),qe=i,i}(e),yMovement:un(e),anchorLink:e.getAttribute("data-anchor"),sectionIndex:_(e,r),activeSlide:f(".fp-slide.active",e)[0],activeSection:f(s)[0],leavingSection:_(f(s),r)+1,localIsResizing:ce};if(!(l.activeSection==e&&!ce||E.scrollBar&&q()===l.dtop&&!h(e,"fp-auto-height"))){if(null!=l.activeSlide&&(o=l.activeSlide.getAttribute("data-anchor"),a=_(l.activeSlide)),!l.localIsResizing){var c=l.yMovement;if(void 0!==i&&(c=i?"up":"down"),l.direction=c,F(E.onLeave)&&!1===kt("onLeave",l))return}E.autoScrolling&&E.continuousVertical&&void 0!==l.isMovementUp&&(!l.isMovementUp&&"up"==l.yMovement||l.isMovementUp&&"down"==l.yMovement)&&(l=function(e){e.isMovementUp?M(f(s)[0],Q(e.activeSection,r)):$(f(s)[0],G(e.activeSection,r).reverse());return xn(f(s)[0].offsetTop),Et(),e.wrapAroundElements=e.activeSection,e.dtop=e.element.offsetTop,e.yMovement=un(e.element),e}(l)),l.localIsResizing||Mt(l.activeSection),E.scrollOverflow&&E.scrollOverflowHandler.beforeLeave(),D(e,n),O(z(e),n),jt(e),E.scrollOverflow&&E.scrollOverflowHandler.onLeave(),de=J.test.isTesting,mn(a,o,l.anchorLink,l.sectionIndex),function(e){if(E.css3&&E.autoScrolling&&!E.scrollBar){pn("translate3d(0px, -"+Math.round(e.dtop)+"px, 0px)",!0),E.scrollingSpeed?(clearTimeout(me),me=setTimeout((function(){Lt(e)}),E.scrollingSpeed)):Lt(e)}else{var t=Ot(e.dtop);J.test.top=-e.dtop+"px",An(t.element,t.options,E.scrollingSpeed,(function(){E.scrollBar?setTimeout((function(){Lt(e)}),30):Lt(e)}))}}(l),Z=l.anchorLink,cn(l.anchorLink,l.sectionIndex)}}}function kt(e,t){var n,i=function(e,t){var n;n=E.v2compatible?{afterRender:function(){return[se]},onLeave:function(){return[t.activeSection,t.leavingSection,t.sectionIndex+1,t.direction]},afterLoad:function(){return[t.element,t.anchorLink,t.sectionIndex+1]},afterSlideLoad:function(){return[t.destiny,t.anchorLink,t.sectionIndex+1,t.slideAnchor,t.slideIndex]},onSlideLeave:function(){return[t.prevSlide,t.anchorLink,t.sectionIndex+1,t.prevSlideIndex,t.direction,t.slideIndex]}}:{afterRender:function(){return{section:At(f(s)[0]),slide:Dt(f(".fp-slide.active",f(s)[0])[0])}},onLeave:function(){return{origin:At(t.activeSection),destination:At(t.element),direction:t.direction}},afterLoad:function(){return n.onLeave()},afterSlideLoad:function(){return{section:At(t.section),origin:Dt(t.prevSlide),destination:Dt(t.destiny),direction:t.direction}},onSlideLeave:function(){return n.afterSlideLoad()}};return n[e]()}(e,t);if(E.v2compatible){if(!1===E[e].apply(i[0],i.slice(1)))return!1}else if(B(se,e,i),!1===E[e].apply(i[Object.keys(i)[0]],(n=i,Object.keys(n).map((function(e){return n[e]})))))return!1;return!0}function At(e){return e?new Ln(e):null}function Dt(e){return e?new Nn(e):null}function Ot(t){var n={};return E.autoScrolling&&!E.scrollBar?(n.options=-t,n.element=f(".fullpage-wrapper")[0]):(n.options=t,n.element=e),n}function Lt(e){!function(e){null!=e.wrapAroundElements&&(e.isMovementUp?M(f(r)[0],e.wrapAroundElements):$(f(r)[f(r).length-1],e.wrapAroundElements),xn(f(s)[0].offsetTop),Et())}(e),F(E.afterLoad)&&!e.localIsResizing&&kt("afterLoad",e),E.scrollOverflow&&E.scrollOverflowHandler.afterLoad(),e.localIsResizing||Pt(e.element),D(e.element,i),O(z(e.element),i),It(),de=!0,F(e.callback)&&e.callback()}function Nt(e,t){e.setAttribute(t,e.getAttribute("data-"+t)),e.removeAttribute("data-"+t)}function It(){var e=f(".fp-auto-height")[0]||ot()&&f(".fp-auto-height-responsive")[0];E.lazyLoading&&e&&f(".fp-section:not(.active)").forEach((function(e){var t,n,i;t=e.getBoundingClientRect(),n=t.top,i=t.bottom,(n+2<ae&&n>0||i>2&&i<ae)&&jt(e)}))}function jt(e){E.lazyLoading&&f("img[data-src], img[data-srcset], source[data-src], source[data-srcset], video[data-src], audio[data-src], iframe[data-src]",Rt(e)).forEach((function(t){if(["src","srcset"].forEach((function(n){var i=t.getAttribute("data-"+n);null!=i&&i&&(Nt(t,n),t.addEventListener("load",(function(){Ht(e)})))})),U(t,"source")){var n=P(t,"video, audio");n&&(n.load(),n.onloadeddata=function(){Ht(e)})}}))}function Ht(e){E.scrollOverflow&&(clearTimeout(Ae),Ae=setTimeout((function(){he.createScrollBar(e)}),200))}function Pt(e){var t=Rt(e);f("video, audio",t).forEach((function(e){e.hasAttribute("data-autoplay")&&"function"==typeof e.play&&e.play()})),f('iframe[src*="youtube.com/embed/"]',t).forEach((function(e){e.hasAttribute("data-autoplay")&&$t(e),e.onload=function(){e.hasAttribute("data-autoplay")&&$t(e)}}))}function $t(e){e.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*")}function Mt(e){var t=Rt(e);f("video, audio",t).forEach((function(e){e.hasAttribute("data-keepplaying")||"function"!=typeof e.pause||e.pause()})),f('iframe[src*="youtube.com/embed/"]',t).forEach((function(e){/youtube\.com\/embed\//.test(e.getAttribute("src"))&&!e.hasAttribute("data-keepplaying")&&e.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")}))}function Rt(e){var t=f(".fp-slide.active",e);return t.length&&(e=t[0]),e}function qt(){var e=Wt(),t=e.section,n=e.slide;t&&(E.animateAnchor?gn(t,n):Ze(t,n))}function zt(){if(!Ie&&!E.lockAnchors){var e=Wt(),t=e.section,n=e.slide,i=void 0===Z,o=void 0===Z&&void 0===n&&!ie;t&&t.length&&(t&&t!==Z&&!i||o||!ie&&ee!=n)&&gn(t,n)}}function Wt(){var t,n,i=e.location.hash;if(i.length){var o=i.replace("#","").split("/"),r=i.indexOf("#/")>-1;t=r?"/"+o[1]:decodeURIComponent(o[0]);var s=r?o[2]:o[1];s&&s.length&&(n=decodeURIComponent(s))}return{section:t,slide:n}}function Ft(e){clearTimeout(Te);var n=t.activeElement,i=e.keyCode;if(9===i)!function(e){var n=e.shiftKey,i=t.activeElement,o=Vt(Rt(f(s)[0]));function a(e){return W(e),o[0]?o[0].focus():null}if(function(e){var n=Vt(t),i=n.indexOf(t.activeElement),o=e.shiftKey?i-1:i+1,s=n[o],a=Dt(P(s,l)),c=At(P(s,r));return!a&&!c}(e))return;i?null==P(i,".fp-section.active,.fp-section.active .fp-slide.active")&&(i=a(e)):a(e);(!n&&i==o[o.length-1]||n&&i==o[0])&&W(e)}(e);else if(!U(n,"textarea")&&!U(n,"input")&&!U(n,"select")&&"true"!==n.getAttribute("contentEditable")&&""!==n.getAttribute("contentEditable")&&E.keyboardScrolling&&E.autoScrolling){[40,38,32,33,34].indexOf(i)>-1&&W(e),te=e.ctrlKey,Te=setTimeout((function(){!function(e){var n=e.shiftKey,i=t.activeElement,o=U(i,"video")||U(i,"audio");if(!de&&[37,39].indexOf(e.keyCode)<0)return;switch(e.keyCode){case 38:case 33:pe.k.up&&Ge();break;case 32:if(n&&pe.k.up&&!o){Ge();break}case 40:case 34:pe.k.down&&(32===e.keyCode&&o||Je());break;case 36:pe.k.up&&et(1);break;case 35:pe.k.down&&et(f(r).length);break;case 37:pe.k.left&&nt();break;case 39:pe.k.right&&tt();break;default:;}}(e)}),150)}}function Bt(){B(T(this),"click")}function Ut(e){ue&&(te=e.ctrlKey)}function Yt(e){2==e.which&&(ze=e.pageY,se.addEventListener("mousemove",en))}function Xt(e){2==e.which&&se.removeEventListener("mousemove",en)}function Vt(e){return[].slice.call(f('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]',e)).filter((function(e){return"-1"!==e.getAttribute("tabindex")&&null!==e.offsetParent}))}function Kt(){var e=P(this,r);h(this,"fp-prev")?pe.m.left&&nt(e):pe.m.right&&tt(e)}function Qt(){ue=!1,te=!1}function Gt(e){W(e);var t=_(P(this,"#fp-nav li"));Ct(f(r)[t])}function Jt(e){W(e);var t=f(c,P(this,r))[0];tn(t,f(l,t)[_(P(this,"li"))])}function Zt(e){!f(E.menu)[0]||!E.lockAnchors&&E.anchors.length||(W(e),et(this.getAttribute("data-menuanchor")))}function en(e){E.autoScrolling&&(de&&(e.pageY<ze&&pe.m.up?Ge():e.pageY>ze&&pe.m.down&&Je()),ze=e.pageY)}function tn(e,t,i){var o=P(e,r),s={slides:e,destiny:t,direction:i,destinyPos:{left:t.offsetLeft},slideIndex:_(t),section:o,sectionIndex:_(o,r),anchorLink:o.getAttribute("data-anchor"),slidesNav:f(".fp-slidesNav",o)[0],slideAnchor:bn(t),prevSlide:f(".fp-slide.active",o)[0],prevSlideIndex:_(f(".fp-slide.active",o)[0]),localIsResizing:ce};s.xMovement=function(e,t){if(e==t)return"none";if(e>t)return"left";return"right"}(s.prevSlideIndex,s.slideIndex),s.direction=s.direction?s.direction:s.xMovement,s.localIsResizing||(de=!1),E.onSlideLeave&&!s.localIsResizing&&"none"!==s.xMovement&&F(E.onSlideLeave)&&!1===kt("onSlideLeave",s)?ie=!1:(D(t,n),O(z(t),n),s.localIsResizing||(Mt(s.prevSlide),jt(t)),!E.loopHorizontal&&E.controlArrows&&(Y(f(".fp-controlArrow.fp-prev",o),0!==s.slideIndex),Y(f(".fp-controlArrow.fp-next",o),null!=S(t))),h(o,n)&&!s.localIsResizing&&mn(s.slideIndex,s.slideAnchor,s.anchorLink,s.sectionIndex),function(e,t,n){var i=t.destinyPos;if(E.css3){var o="translate3d(-"+Math.round(i.left)+"px, 0px, 0px)";J.test.translate3dH[t.sectionIndex]=o,m(an(f(u,e)),_n(o)),ye=setTimeout((function(){n&&nn(t)}),E.scrollingSpeed)}else J.test.left[t.sectionIndex]=Math.round(i.left),An(e,Math.round(i.left),E.scrollingSpeed,(function(){n&&nn(t)}))}(e,s,!0))}function nn(e){var t,i;t=e.slidesNav,i=e.slideIndex,E.slidesNavigation&&null!=t&&(O(f(".active",t),n),D(f("a",f("li",t)[i]),n)),e.localIsResizing||(F(E.afterSlideLoad)&&kt("afterSlideLoad",e),de=!0,Pt(e.destiny)),ie=!1}function on(){clearTimeout(ge),ge=setTimeout((function(){for(var e=0;e<4;e++)ve=setTimeout(rn,200*e)}),200)}function rn(){if(sn(),oe){var e=t.activeElement;if(!U(e,"textarea")&&!U(e,"input")&&!U(e,"select")){var n=g();Math.abs(n-We)>20*Math.max(We,n)/100&&(it(!0),We=n)}}else ct()}function sn(){var t=E.responsive||E.responsiveWidth,n=E.responsiveHeight,i=t&&e.innerWidth<t,o=n&&e.innerHeight<n;t&&n?rt(i||o):t?rt(i):n&&rt(o)}function an(e){var t="all "+E.scrollingSpeed+"ms "+E.easingcss3;return O(e,"fp-notransition"),m(e,{"-webkit-transition":t,transition:t})}function ln(e){return D(e,"fp-notransition")}function cn(e,t){var i;i=e,f(E.menu).forEach((function(e){E.menu&&null!=e&&(O(f(".active",e),n),D(f('[data-menuanchor="'+i+'"]',e),n))})),function(e,t){E.navigation&&null!=f("#fp-nav")[0]&&(O(f(".active",f("#fp-nav")[0]),n),D(e?f('a[href="#'+e+'"]',f("#fp-nav")[0]):f("a",f("li",f("#fp-nav")[0])[t]),n))}(e,t)}function un(e){var t=_(f(s)[0],r),n=_(e,r);return t==n?"none":t>n?"up":"down"}function dn(e){if(!h(e,"fp-table")){var n=t.createElement("div");n.className="fp-tableCell",n.style.height=fn(e)+"px",D(e,"fp-table"),j(e,n)}}function fn(e){var t=ae;if(E.paddingTop||E.paddingBottom){var n=e;h(n,o)||(n=P(e,r));var i=parseInt(getComputedStyle(n)["padding-top"])+parseInt(getComputedStyle(n)["padding-bottom"]);t=ae-i}return t}function pn(e,t){t?an(se):ln(se),m(se,_n(e)),J.test.translate3d=e,setTimeout((function(){O(se,"fp-notransition")}),10)}function hn(e){var t=f('.fp-section[data-anchor="'+e+'"]',se)[0];if(!t){var n=void 0!==e?e-1:0;t=f(r)[n]}return t}function gn(e,t){var i=hn(e);if(null!=i){var o=function(e,t){var n=f('.fp-slide[data-anchor="'+e+'"]',t)[0];return null==n&&(e=void 0!==e?e:0,n=f(l,t)[e]),n}(t,i);bn(i)===Z||h(i,n)?vn(o):Ct(i,(function(){vn(o)}))}}function vn(e){null!=e&&tn(P(e,c),e)}function mn(e,t,n,i){var o="";E.anchors.length&&!E.lockAnchors&&(e?(null!=n&&(o=n),null==t&&(t=e),ee=t,yn(o+"/"+t)):null!=e?(ee=t,yn(n)):yn(n)),wn()}function yn(t){if(E.recordHistory)location.hash=t;else if(oe||re)e.history.replaceState(void 0,void 0,"#"+t);else{var n=e.location.href.split("#")[0];e.location.replace(n+"#"+t)}}function bn(e){if(!e)return null;var t=e.getAttribute("data-anchor"),n=_(e);return null==t&&(t=n),t}function wn(){var e=f(s)[0],t=f(".fp-slide.active",e)[0],n=bn(e),i=bn(t),o=String(n);t&&(o=o+"-"+i),o=o.replace("/","-").replace("#","");var r=new RegExp("\\b\\s?fp-viewing-[^\\s]+\\b","g");K.className=K.className.replace(r,""),D(K,"fp-viewing-"+o)}function Tn(e){var t=[];return t.y=void 0!==e.pageY&&(e.pageY||e.pageX)?e.pageY:e.touches[0].pageY,t.x=void 0!==e.pageX&&(e.pageY||e.pageX)?e.pageX:e.touches[0].pageX,re&&wt(e)&&E.scrollBar&&void 0!==e.touches&&(t.y=e.touches[0].pageY,t.x=e.touches[0].pageX),t}function Sn(e,t){Ue(0,"internal"),void 0!==t&&(ce=!0),tn(P(e,c),e),void 0!==t&&(ce=!1),Ue(De.scrollingSpeed,"internal")}function xn(e){var t=Math.round(e);if(E.css3&&E.autoScrolling&&!E.scrollBar)pn("translate3d(0px, -"+t+"px, 0px)",!1);else if(E.autoScrolling&&!E.scrollBar)m(se,{top:-t+"px"}),J.test.top=-t+"px";else{var n=Ot(t);Dn(n.element,n.options)}}function _n(e){return{"-webkit-transform":e,"-moz-transform":e,"-ms-transform":e,transform:e}}function En(e,t,n){"all"!==t?pe[n][t]=e:Object.keys(pe[n]).forEach((function(t){pe[n][t]=e}))}function Cn(e,t,n){E[e]=t,"internal"!==n&&(De[e]=t)}function kn(){var e=E.licenseKey,t="font-size: 15px;background:yellow;";A?e&&e.length<20&&(console.warn("%c This website was made using fullPage.js slider. More info on the following website:",t),console.warn("%c https://alvarotrigo.com/fullPage/",t)):(d("error","Fullpage.js version 3 has changed its license to GPLv3 and it requires a `licenseKey` option. Read about it here:"),d("error","https://github.com/alvarotrigo/fullPage.js#options.")),h(R,"fp-enabled")?d("error","Fullpage.js can only be initialized once and you are doing it multiple times!"):(E.continuousVertical&&(E.loopTop||E.loopBottom)&&(E.continuousVertical=!1,d("warn","Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),!E.scrollOverflow||!E.scrollBar&&E.autoScrolling||d("warn","Options scrollBar:true and autoScrolling:false are mutually exclusive with scrollOverflow:true. Sections with scrollOverflow might not work well in Firefox"),!E.continuousVertical||!E.scrollBar&&E.autoScrolling||(E.continuousVertical=!1,d("warn","Scroll bars (`scrollBar:true` or `autoScrolling:false`) are mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),E.scrollOverflow&&null==E.scrollOverflowHandler&&(E.scrollOverflow=!1,d("error","The option `scrollOverflow:true` requires the file `scrolloverflow.min.js`. Please include it before fullPage.js.")),Ne.forEach((function(e){E[e]&&d("warn","fullpage.js extensions require fullpage.extensions.min.js file instead of the usual fullpage.js. Requested: "+e)})),E.anchors.forEach((function(e){var t=[].slice.call(f("[name]")).filter((function(t){return t.getAttribute("name")&&t.getAttribute("name").toLowerCase()==e.toLowerCase()})),n=[].slice.call(f("[id]")).filter((function(t){return t.getAttribute("id")&&t.getAttribute("id").toLowerCase()==e.toLowerCase()}));if(n.length||t.length){d("error","data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE).");var i=n.length?"id":"name";(n.length||t.length)&&d("error",'"'+e+'" is is being used by another element `'+i+"` property")}})))}function An(t,n,i,o){var r=function(t){return t.self!=e&&h(t,"fp-slides")?t.scrollLeft:!E.autoScrolling||E.scrollBar?q():t.offsetTop}(t),s=n-r,a=0;ke=!0;var l=function(){if(ke){var c=n;a+=20,i&&(c=e.fp_easings[E.easing](a,r,s,i)),Dn(t,c),a<i?setTimeout(l,20):void 0!==o&&o()}else a<i&&o()};l()}function Dn(t,n){!E.autoScrolling||E.scrollBar||t.self!=e&&h(t,"fp-slides")?t.self!=e&&h(t,"fp-slides")?t.scrollLeft=n:t.scrollTo(0,n):t.style.top=n+"px"}function On(e,t){this.anchor=e.getAttribute("data-anchor"),this.item=e,this.index=_(e,t),this.isLast=this.index===e.parentElement.querySelectorAll(t).length-1,this.isFirst=!this.index}function Ln(e){On.call(this,e,r)}function Nn(e){On.call(this,e,l)}kn()}})),window.jQuery&&window.fullpage&&function(e,t){"use strict";e&&t?e.fn.fullpage=function(n){n=e.extend({},n,{$:e});new t(this[0],n)}:window.fp_utils.showError("error","jQuery is required to use the jQuery fullpage adapter!")}(window.jQuery,window.fullpage)},function(e,t,n){var i=n(15),o=n(16);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var r={insert:"head",singleton:!1},s=(i(e.i,o,r),o.locals?o.locals:{});e.exports=s},function(e,t,n){"use strict";var i,o=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),s={};function a(e,t,n){for(var i=0;i<t.length;i++){var o={css:t[i][1],media:t[i][2],sourceMap:t[i][3]};s[e][i]?s[e][i](o):s[e].push(g(o,n))}}function l(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var o=n.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var s=r(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(t)}return t}var c,u=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function d(e,t,n,i){var o=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=u(t,o);else{var r=document.createTextNode(o),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(r,s[t]):e.appendChild(r)}}function f(e,t,n){var i=n.css,o=n.media,r=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),r&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var p=null,h=0;function g(e,t){var n,i,o;if(t.singleton){var r=h++;n=p||(p=l(t)),i=d.bind(null,n,r,!1),o=d.bind(null,n,r,!0)}else n=l(t),i=f.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else o()}}e.exports=function(e,t,n){return(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=o()),e=n.base?e+n.base:e,t=t||[],s[e]||(s[e]=[]),a(e,t,n),function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){s[e]||(s[e]=[]),a(e,t,n);for(var i=t.length;i<s[e].length;i++)s[e][i]();s[e].length=t.length,0===s[e].length&&delete s[e]}}}},function(e,t,n){var i=n(1),o=n(17);(t=i(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css2?family=Pinyon+Script&family=Raleway:wght@100;200;300;400;500;700&display=swap);"]),t.i(o),t.push([e.i,"body{font-family:'Raleway';font-weight:200;height:2000px;color:#33424E;background:#fafafa}h1{font-size:3.00em;font-weight:700;color:#33424E;margin-bottom:0.67em;letter-spacing:0.13em}h2{font-size:2.50em;font-weight:400;color:#33424E;margin-bottom:0.67em}h3{font-size:1.57em;font-weight:400;color:#33424E;margin-bottom:0.67em;letter-spacing:0.13em}h4{font-size:1.00em;font-weight:400;color:#33424E}h5{font-size:0.83em;font-weight:400;color:#33424E}h6{font-size:0.67em;font-weight:400;color:#33424E}p{margin-bottom:1em;line-height:1.6em;font-weight:300}#globalNavigation{position:fixed;z-index:99;top:0;left:0;right:0;width:100%;background:#fafafa;padding:20px;padding-top:24px;display:flex;justify-content:center}#globalNavigation nav{width:100%;justify-content:center;display:flex}.navigationItem{display:flex;align-items:center;color:#33424E;text-decoration:none;padding:10px 20px 10px;cursor:pointer}.navigationItem:hover{color:#8F857B;text-decoration:none}.logoContainer{margin:0 40px}.logoText{text-align:center;text-transform:uppercase;font-weight:900;line-height:1.5em;margin:0;font-size:14px;color:#33424E}.background,.foreground{position:absolute;left:0;right:0;top:80px}.background{z-index:1}.backgroundImage{width:100%;filter:contrast(90%) brightness(70%)}.foreground{z-index:2}.pageSection{width:100%}.pageHeader{width:100%;display:flex;justify-content:center;text-align:center;padding:60px 0px 20px}.pageSection.transparent .pageHeader{margin-top:40px}.pageSection.transparent .pageHeading{color:#fafafa}#home{padding-top:40px;height:500px;display:flex;align-items:center;justify-content:center;flex-direction:column;text-align:center}.landingText{font-family:\"Pinyon Script\";color:white;font-weight:bold;line-height:1.1em;font-size:72px;margin-bottom:20px}.landingSubText{color:white;font-size:24px;margin-bottom:20px}.rsvpButton{background:#33424E;padding:10px 40px;color:#fafafa;text-decoration:none}#about-us{background:#fafafa;height:640px}.aboutUsRowContainer{width:100%}.aboutUsRow{width:960px;margin:0 auto;display:flex}.aboutUsColumn{width:50%;display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center}.profilePhotoContainer{width:160px;height:160px;border-radius:100%;overflow:hidden}.profilePhoto{width:100%}.profileFactsContainer{padding:20px}.profileName{font-weight:bold}.profileName{margin-top:10px;margin-bottom:40px;padding:0 20px 20px;border-bottom:2px solid #8F857B}.profileFacts li{position:relative;margin-bottom:20px}\n",""]),e.exports=t},function(e,t,n){(t=n(1)(!1)).push([e.i,"/* http://meyerweb.com/eric/tools/css/reset/ \r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}",""]),e.exports=t},function(e,t,n){var i,o,r;!function(s){"use strict";o=[n(0)],void 0===(r="function"==typeof(i=function(e){var t=window.Slick||{};(n=0,t=function(t,i){var o,r=this;r.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:e(t),appendDots:e(t),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,n){return e('<button type="button" />').text(n+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},r.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},e.extend(r,r.initials),r.activeBreakpoint=null,r.animType=null,r.animProp=null,r.breakpoints=[],r.breakpointSettings=[],r.cssTransitions=!1,r.focussed=!1,r.interrupted=!1,r.hidden="hidden",r.paused=!0,r.positionProp=null,r.respondTo=null,r.rowCount=1,r.shouldClick=!0,r.$slider=e(t),r.$slidesCache=null,r.transformType=null,r.transitionType=null,r.visibilityChange="visibilitychange",r.windowWidth=0,r.windowTimer=null,o=e(t).data("slick")||{},r.options=e.extend({},r.defaults,i,o),r.currentSlide=r.options.initialSlide,r.originalSettings=r.options,void 0!==document.mozHidden?(r.hidden="mozHidden",r.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(r.hidden="webkitHidden",r.visibilityChange="webkitvisibilitychange"),r.autoPlay=e.proxy(r.autoPlay,r),r.autoPlayClear=e.proxy(r.autoPlayClear,r),r.autoPlayIterator=e.proxy(r.autoPlayIterator,r),r.changeSlide=e.proxy(r.changeSlide,r),r.clickHandler=e.proxy(r.clickHandler,r),r.selectHandler=e.proxy(r.selectHandler,r),r.setPosition=e.proxy(r.setPosition,r),r.swipeHandler=e.proxy(r.swipeHandler,r),r.dragHandler=e.proxy(r.dragHandler,r),r.keyHandler=e.proxy(r.keyHandler,r),r.instanceUid=n++,r.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,r.registerBreakpoints(),r.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},t.prototype.addSlide=t.prototype.slickAdd=function(t,n,i){var o=this;if("boolean"==typeof n)i=n,n=null;else if(n<0||n>=o.slideCount)return!1;o.unload(),"number"==typeof n?0===n&&0===o.$slides.length?e(t).appendTo(o.$slideTrack):i?e(t).insertBefore(o.$slides.eq(n)):e(t).insertAfter(o.$slides.eq(n)):!0===i?e(t).prependTo(o.$slideTrack):e(t).appendTo(o.$slideTrack),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slides.each((function(t,n){e(n).attr("data-slick-index",t)})),o.$slidesCache=o.$slides,o.reinit()},t.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},t.prototype.animateSlide=function(t,n){var i={},o=this;o.animateHeight(),!0===o.options.rtl&&!1===o.options.vertical&&(t=-t),!1===o.transformsEnabled?!1===o.options.vertical?o.$slideTrack.animate({left:t},o.options.speed,o.options.easing,n):o.$slideTrack.animate({top:t},o.options.speed,o.options.easing,n):!1===o.cssTransitions?(!0===o.options.rtl&&(o.currentLeft=-o.currentLeft),e({animStart:o.currentLeft}).animate({animStart:t},{duration:o.options.speed,easing:o.options.easing,step:function(e){e=Math.ceil(e),!1===o.options.vertical?(i[o.animType]="translate("+e+"px, 0px)",o.$slideTrack.css(i)):(i[o.animType]="translate(0px,"+e+"px)",o.$slideTrack.css(i))},complete:function(){n&&n.call()}})):(o.applyTransition(),t=Math.ceil(t),!1===o.options.vertical?i[o.animType]="translate3d("+t+"px, 0px, 0px)":i[o.animType]="translate3d(0px,"+t+"px, 0px)",o.$slideTrack.css(i),n&&setTimeout((function(){o.disableTransition(),n.call()}),o.options.speed))},t.prototype.getNavTarget=function(){var t=this.options.asNavFor;return t&&null!==t&&(t=e(t).not(this.$slider)),t},t.prototype.asNavFor=function(t){var n=this.getNavTarget();null!==n&&"object"==typeof n&&n.each((function(){var n=e(this).slick("getSlick");n.unslicked||n.slideHandler(t,!0)}))},t.prototype.applyTransition=function(e){var t=this,n={};!1===t.options.fade?n[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:n[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(n):t.$slides.eq(e).css(n)},t.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},t.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},t.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(t))},t.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=e(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=e(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},t.prototype.buildDots=function(){var t,n,i=this;if(!0===i.options.dots&&i.slideCount>i.options.slidesToShow){for(i.$slider.addClass("slick-dotted"),n=e("<ul />").addClass(i.options.dotsClass),t=0;t<=i.getDotCount();t+=1)n.append(e("<li />").append(i.options.customPaging.call(this,i,t)));i.$dots=n.appendTo(i.options.appendDots),i.$dots.find("li").first().addClass("slick-active")}},t.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each((function(t,n){e(n).attr("data-slick-index",t).data("originalStyling",e(n).attr("style")||"")})),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?e('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),!0!==t.options.centerMode&&!0!==t.options.swipeToSlide||(t.options.slidesToScroll=1),e("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},t.prototype.buildRows=function(){var e,t,n,i,o,r,s,a=this;if(i=document.createDocumentFragment(),r=a.$slider.children(),a.options.rows>0){for(s=a.options.slidesPerRow*a.options.rows,o=Math.ceil(r.length/s),e=0;e<o;e++){var l=document.createElement("div");for(t=0;t<a.options.rows;t++){var c=document.createElement("div");for(n=0;n<a.options.slidesPerRow;n++){var u=e*s+(t*a.options.slidesPerRow+n);r.get(u)&&c.appendChild(r.get(u))}l.appendChild(c)}i.appendChild(l)}a.$slider.empty().append(i),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},t.prototype.checkResponsive=function(t,n){var i,o,r,s=this,a=!1,l=s.$slider.width(),c=window.innerWidth||e(window).width();if("window"===s.respondTo?r=c:"slider"===s.respondTo?r=l:"min"===s.respondTo&&(r=Math.min(c,l)),s.options.responsive&&s.options.responsive.length&&null!==s.options.responsive){for(i in o=null,s.breakpoints)s.breakpoints.hasOwnProperty(i)&&(!1===s.originalSettings.mobileFirst?r<s.breakpoints[i]&&(o=s.breakpoints[i]):r>s.breakpoints[i]&&(o=s.breakpoints[i]));null!==o?null!==s.activeBreakpoint?(o!==s.activeBreakpoint||n)&&(s.activeBreakpoint=o,"unslick"===s.breakpointSettings[o]?s.unslick(o):(s.options=e.extend({},s.originalSettings,s.breakpointSettings[o]),!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),a=o):(s.activeBreakpoint=o,"unslick"===s.breakpointSettings[o]?s.unslick(o):(s.options=e.extend({},s.originalSettings,s.breakpointSettings[o]),!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),a=o):null!==s.activeBreakpoint&&(s.activeBreakpoint=null,s.options=s.originalSettings,!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t),a=o),t||!1===a||s.$slider.trigger("breakpoint",[s,a])}},t.prototype.changeSlide=function(t,n){var i,o,r=this,s=e(t.currentTarget);switch(s.is("a")&&t.preventDefault(),s.is("li")||(s=s.closest("li")),i=r.slideCount%r.options.slidesToScroll!=0?0:(r.slideCount-r.currentSlide)%r.options.slidesToScroll,t.data.message){case"previous":o=0===i?r.options.slidesToScroll:r.options.slidesToShow-i,r.slideCount>r.options.slidesToShow&&r.slideHandler(r.currentSlide-o,!1,n);break;case"next":o=0===i?r.options.slidesToScroll:i,r.slideCount>r.options.slidesToShow&&r.slideHandler(r.currentSlide+o,!1,n);break;case"index":var a=0===t.data.index?0:t.data.index||s.index()*r.options.slidesToScroll;r.slideHandler(r.checkNavigable(a),!1,n),s.children().trigger("focus");break;default:return}},t.prototype.checkNavigable=function(e){var t,n;if(n=0,e>(t=this.getNavigableIndexes())[t.length-1])e=t[t.length-1];else for(var i in t){if(e<t[i]){e=n;break}n=t[i]}return e},t.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(e("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",e.proxy(t.interrupt,t,!0)).off("mouseleave.slick",e.proxy(t.interrupt,t,!1)),!0===t.options.accessibility&&t.$dots.off("keydown.slick",t.keyHandler)),t.$slider.off("focus.slick blur.slick"),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow&&t.$nextArrow.off("keydown.slick",t.keyHandler))),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),e(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().off("click.slick",t.selectHandler),e(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),e(window).off("resize.slick.slick-"+t.instanceUid,t.resize),e("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),e(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},t.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",e.proxy(t.interrupt,t,!1))},t.prototype.cleanUpRows=function(){var e,t=this;t.options.rows>0&&((e=t.$slides.children().children()).removeAttr("style"),t.$slider.empty().append(e))},t.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},t.prototype.destroy=function(t){var n=this;n.autoPlayClear(),n.touchObject={},n.cleanUpEvents(),e(".slick-cloned",n.$slider).detach(),n.$dots&&n.$dots.remove(),n.$prevArrow&&n.$prevArrow.length&&(n.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),n.htmlExpr.test(n.options.prevArrow)&&n.$prevArrow.remove()),n.$nextArrow&&n.$nextArrow.length&&(n.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),n.htmlExpr.test(n.options.nextArrow)&&n.$nextArrow.remove()),n.$slides&&(n.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each((function(){e(this).attr("style",e(this).data("originalStyling"))})),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.detach(),n.$list.detach(),n.$slider.append(n.$slides)),n.cleanUpRows(),n.$slider.removeClass("slick-slider"),n.$slider.removeClass("slick-initialized"),n.$slider.removeClass("slick-dotted"),n.unslicked=!0,t||n.$slider.trigger("destroy",[n])},t.prototype.disableTransition=function(e){var t=this,n={};n[t.transitionType]="",!1===t.options.fade?t.$slideTrack.css(n):t.$slides.eq(e).css(n)},t.prototype.fadeSlide=function(e,t){var n=this;!1===n.cssTransitions?(n.$slides.eq(e).css({zIndex:n.options.zIndex}),n.$slides.eq(e).animate({opacity:1},n.options.speed,n.options.easing,t)):(n.applyTransition(e),n.$slides.eq(e).css({opacity:1,zIndex:n.options.zIndex}),t&&setTimeout((function(){n.disableTransition(e),t.call()}),n.options.speed))},t.prototype.fadeSlideOut=function(e){var t=this;!1===t.cssTransitions?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},t.prototype.filterSlides=t.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},t.prototype.focusHandler=function(){var t=this;t.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",(function(n){n.stopImmediatePropagation();var i=e(this);setTimeout((function(){t.options.pauseOnFocus&&(t.focussed=i.is(":focus"),t.autoPlay())}),0)}))},t.prototype.getCurrent=t.prototype.slickCurrentSlide=function(){return this.currentSlide},t.prototype.getDotCount=function(){var e=this,t=0,n=0,i=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++i;else for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)i=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else i=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return i-1},t.prototype.getLeft=function(e){var t,n,i,o,r=this,s=0;return r.slideOffset=0,n=r.$slides.first().outerHeight(!0),!0===r.options.infinite?(r.slideCount>r.options.slidesToShow&&(r.slideOffset=r.slideWidth*r.options.slidesToShow*-1,o=-1,!0===r.options.vertical&&!0===r.options.centerMode&&(2===r.options.slidesToShow?o=-1.5:1===r.options.slidesToShow&&(o=-2)),s=n*r.options.slidesToShow*o),r.slideCount%r.options.slidesToScroll!=0&&e+r.options.slidesToScroll>r.slideCount&&r.slideCount>r.options.slidesToShow&&(e>r.slideCount?(r.slideOffset=(r.options.slidesToShow-(e-r.slideCount))*r.slideWidth*-1,s=(r.options.slidesToShow-(e-r.slideCount))*n*-1):(r.slideOffset=r.slideCount%r.options.slidesToScroll*r.slideWidth*-1,s=r.slideCount%r.options.slidesToScroll*n*-1))):e+r.options.slidesToShow>r.slideCount&&(r.slideOffset=(e+r.options.slidesToShow-r.slideCount)*r.slideWidth,s=(e+r.options.slidesToShow-r.slideCount)*n),r.slideCount<=r.options.slidesToShow&&(r.slideOffset=0,s=0),!0===r.options.centerMode&&r.slideCount<=r.options.slidesToShow?r.slideOffset=r.slideWidth*Math.floor(r.options.slidesToShow)/2-r.slideWidth*r.slideCount/2:!0===r.options.centerMode&&!0===r.options.infinite?r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)-r.slideWidth:!0===r.options.centerMode&&(r.slideOffset=0,r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)),t=!1===r.options.vertical?e*r.slideWidth*-1+r.slideOffset:e*n*-1+s,!0===r.options.variableWidth&&(i=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow),t=!0===r.options.rtl?i[0]?-1*(r.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,!0===r.options.centerMode&&(i=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow+1),t=!0===r.options.rtl?i[0]?-1*(r.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,t+=(r.$list.width()-i.outerWidth())/2)),t},t.prototype.getOption=t.prototype.slickGetOption=function(e){return this.options[e]},t.prototype.getNavigableIndexes=function(){var e,t=this,n=0,i=0,o=[];for(!1===t.options.infinite?e=t.slideCount:(n=-1*t.options.slidesToScroll,i=-1*t.options.slidesToScroll,e=2*t.slideCount);n<e;)o.push(n),n=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return o},t.prototype.getSlick=function(){return this},t.prototype.getSlideCount=function(){var t,n,i=this;return n=!0===i.options.centerMode?i.slideWidth*Math.floor(i.options.slidesToShow/2):0,!0===i.options.swipeToSlide?(i.$slideTrack.find(".slick-slide").each((function(o,r){if(r.offsetLeft-n+e(r).outerWidth()/2>-1*i.swipeLeft)return t=r,!1})),Math.abs(e(t).attr("data-slick-index")-i.currentSlide)||1):i.options.slidesToScroll},t.prototype.goTo=t.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},t.prototype.init=function(t){var n=this;e(n.$slider).hasClass("slick-initialized")||(e(n.$slider).addClass("slick-initialized"),n.buildRows(),n.buildOut(),n.setProps(),n.startLoad(),n.loadSlider(),n.initializeEvents(),n.updateArrows(),n.updateDots(),n.checkResponsive(!0),n.focusHandler()),t&&n.$slider.trigger("init",[n]),!0===n.options.accessibility&&n.initADA(),n.options.autoplay&&(n.paused=!1,n.autoPlay())},t.prototype.initADA=function(){var t=this,n=Math.ceil(t.slideCount/t.options.slidesToShow),i=t.getNavigableIndexes().filter((function(e){return e>=0&&e<t.slideCount}));t.$slides.add(t.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==t.$dots&&(t.$slides.not(t.$slideTrack.find(".slick-cloned")).each((function(n){var o=i.indexOf(n);if(e(this).attr({role:"tabpanel",id:"slick-slide"+t.instanceUid+n,tabindex:-1}),-1!==o){var r="slick-slide-control"+t.instanceUid+o;e("#"+r).length&&e(this).attr({"aria-describedby":r})}})),t.$dots.attr("role","tablist").find("li").each((function(o){var r=i[o];e(this).attr({role:"presentation"}),e(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+t.instanceUid+o,"aria-controls":"slick-slide"+t.instanceUid+r,"aria-label":o+1+" of "+n,"aria-selected":null,tabindex:"-1"})})).eq(t.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var o=t.currentSlide,r=o+t.options.slidesToShow;o<r;o++)t.options.focusOnChange?t.$slides.eq(o).attr({tabindex:"0"}):t.$slides.eq(o).removeAttr("tabindex");t.activateADA()},t.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},t.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&(e("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.accessibility&&t.$dots.on("keydown.slick",t.keyHandler)),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&t.slideCount>t.options.slidesToShow&&e("li",t.$dots).on("mouseenter.slick",e.proxy(t.interrupt,t,!0)).on("mouseleave.slick",e.proxy(t.interrupt,t,!1))},t.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",e.proxy(t.interrupt,t,!1)))},t.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),e(document).on(t.visibilityChange,e.proxy(t.visibility,t)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),e(window).on("orientationchange.slick.slick-"+t.instanceUid,e.proxy(t.orientationChange,t)),e(window).on("resize.slick.slick-"+t.instanceUid,e.proxy(t.resize,t)),e("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),e(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),e(t.setPosition)},t.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},t.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===t.options.accessibility?t.changeSlide({data:{message:!0===t.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===t.options.accessibility&&t.changeSlide({data:{message:!0===t.options.rtl?"previous":"next"}}))},t.prototype.lazyLoad=function(){var t,n,i,o=this;function r(t){e("img[data-lazy]",t).each((function(){var t=e(this),n=e(this).attr("data-lazy"),i=e(this).attr("data-srcset"),r=e(this).attr("data-sizes")||o.$slider.attr("data-sizes"),s=document.createElement("img");s.onload=function(){t.animate({opacity:0},100,(function(){i&&(t.attr("srcset",i),r&&t.attr("sizes",r)),t.attr("src",n).animate({opacity:1},200,(function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")})),o.$slider.trigger("lazyLoaded",[o,t,n])}))},s.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),o.$slider.trigger("lazyLoadError",[o,t,n])},s.src=n}))}if(!0===o.options.centerMode?!0===o.options.infinite?i=(n=o.currentSlide+(o.options.slidesToShow/2+1))+o.options.slidesToShow+2:(n=Math.max(0,o.currentSlide-(o.options.slidesToShow/2+1)),i=o.options.slidesToShow/2+1+2+o.currentSlide):(n=o.options.infinite?o.options.slidesToShow+o.currentSlide:o.currentSlide,i=Math.ceil(n+o.options.slidesToShow),!0===o.options.fade&&(n>0&&n--,i<=o.slideCount&&i++)),t=o.$slider.find(".slick-slide").slice(n,i),"anticipated"===o.options.lazyLoad)for(var s=n-1,a=i,l=o.$slider.find(".slick-slide"),c=0;c<o.options.slidesToScroll;c++)s<0&&(s=o.slideCount-1),t=(t=t.add(l.eq(s))).add(l.eq(a)),s--,a++;r(t),o.slideCount<=o.options.slidesToShow?r(o.$slider.find(".slick-slide")):o.currentSlide>=o.slideCount-o.options.slidesToShow?r(o.$slider.find(".slick-cloned").slice(0,o.options.slidesToShow)):0===o.currentSlide&&r(o.$slider.find(".slick-cloned").slice(-1*o.options.slidesToShow))},t.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},t.prototype.next=t.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},t.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},t.prototype.pause=t.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},t.prototype.play=t.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},t.prototype.postSlide=function(t){var n=this;n.unslicked||(n.$slider.trigger("afterChange",[n,t]),n.animating=!1,n.slideCount>n.options.slidesToShow&&n.setPosition(),n.swipeLeft=null,n.options.autoplay&&n.autoPlay(),!0===n.options.accessibility&&(n.initADA(),n.options.focusOnChange&&e(n.$slides.get(n.currentSlide)).attr("tabindex",0).focus()))},t.prototype.prev=t.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},t.prototype.preventDefault=function(e){e.preventDefault()},t.prototype.progressiveLazyLoad=function(t){t=t||1;var n,i,o,r,s,a=this,l=e("img[data-lazy]",a.$slider);l.length?(n=l.first(),i=n.attr("data-lazy"),o=n.attr("data-srcset"),r=n.attr("data-sizes")||a.$slider.attr("data-sizes"),(s=document.createElement("img")).onload=function(){o&&(n.attr("srcset",o),r&&n.attr("sizes",r)),n.attr("src",i).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===a.options.adaptiveHeight&&a.setPosition(),a.$slider.trigger("lazyLoaded",[a,n,i]),a.progressiveLazyLoad()},s.onerror=function(){t<3?setTimeout((function(){a.progressiveLazyLoad(t+1)}),500):(n.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),a.$slider.trigger("lazyLoadError",[a,n,i]),a.progressiveLazyLoad())},s.src=i):a.$slider.trigger("allImagesLoaded",[a])},t.prototype.refresh=function(t){var n,i,o=this;i=o.slideCount-o.options.slidesToShow,!o.options.infinite&&o.currentSlide>i&&(o.currentSlide=i),o.slideCount<=o.options.slidesToShow&&(o.currentSlide=0),n=o.currentSlide,o.destroy(!0),e.extend(o,o.initials,{currentSlide:n}),o.init(),t||o.changeSlide({data:{message:"index",index:n}},!1)},t.prototype.registerBreakpoints=function(){var t,n,i,o=this,r=o.options.responsive||null;if("array"===e.type(r)&&r.length){for(t in o.respondTo=o.options.respondTo||"window",r)if(i=o.breakpoints.length-1,r.hasOwnProperty(t)){for(n=r[t].breakpoint;i>=0;)o.breakpoints[i]&&o.breakpoints[i]===n&&o.breakpoints.splice(i,1),i--;o.breakpoints.push(n),o.breakpointSettings[n]=r[t].settings}o.breakpoints.sort((function(e,t){return o.options.mobileFirst?e-t:t-e}))}},t.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},t.prototype.resize=function(){var t=this;e(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout((function(){t.windowWidth=e(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()}),50))},t.prototype.removeSlide=t.prototype.slickRemove=function(e,t,n){var i=this;if(e="boolean"==typeof e?!0===(t=e)?0:i.slideCount-1:!0===t?--e:e,i.slideCount<1||e<0||e>i.slideCount-1)return!1;i.unload(),!0===n?i.$slideTrack.children().remove():i.$slideTrack.children(this.options.slide).eq(e).remove(),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slidesCache=i.$slides,i.reinit()},t.prototype.setCSS=function(e){var t,n,i=this,o={};!0===i.options.rtl&&(e=-e),t="left"==i.positionProp?Math.ceil(e)+"px":"0px",n="top"==i.positionProp?Math.ceil(e)+"px":"0px",o[i.positionProp]=e,!1===i.transformsEnabled?i.$slideTrack.css(o):(o={},!1===i.cssTransitions?(o[i.animType]="translate("+t+", "+n+")",i.$slideTrack.css(o)):(o[i.animType]="translate3d("+t+", "+n+", 0px)",i.$slideTrack.css(o)))},t.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},t.prototype.setFade=function(){var t,n=this;n.$slides.each((function(i,o){t=n.slideWidth*i*-1,!0===n.options.rtl?e(o).css({position:"relative",right:t,top:0,zIndex:n.options.zIndex-2,opacity:0}):e(o).css({position:"relative",left:t,top:0,zIndex:n.options.zIndex-2,opacity:0})})),n.$slides.eq(n.currentSlide).css({zIndex:n.options.zIndex-1,opacity:1})},t.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},t.prototype.setOption=t.prototype.slickSetOption=function(){var t,n,i,o,r,s=this,a=!1;if("object"===e.type(arguments[0])?(i=arguments[0],a=arguments[1],r="multiple"):"string"===e.type(arguments[0])&&(i=arguments[0],o=arguments[1],a=arguments[2],"responsive"===arguments[0]&&"array"===e.type(arguments[1])?r="responsive":void 0!==arguments[1]&&(r="single")),"single"===r)s.options[i]=o;else if("multiple"===r)e.each(i,(function(e,t){s.options[e]=t}));else if("responsive"===r)for(n in o)if("array"!==e.type(s.options.responsive))s.options.responsive=[o[n]];else{for(t=s.options.responsive.length-1;t>=0;)s.options.responsive[t].breakpoint===o[n].breakpoint&&s.options.responsive.splice(t,1),t--;s.options.responsive.push(o[n])}a&&(s.unload(),s.reinit())},t.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},t.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},t.prototype.setSlideClasses=function(e){var t,n,i,o,r=this;if(n=r.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),r.$slides.eq(e).addClass("slick-current"),!0===r.options.centerMode){var s=r.options.slidesToShow%2==0?1:0;t=Math.floor(r.options.slidesToShow/2),!0===r.options.infinite&&(e>=t&&e<=r.slideCount-1-t?r.$slides.slice(e-t+s,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(i=r.options.slidesToShow+e,n.slice(i-t+1+s,i+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?n.eq(n.length-1-r.options.slidesToShow).addClass("slick-center"):e===r.slideCount-1&&n.eq(r.options.slidesToShow).addClass("slick-center")),r.$slides.eq(e).addClass("slick-center")}else e>=0&&e<=r.slideCount-r.options.slidesToShow?r.$slides.slice(e,e+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):n.length<=r.options.slidesToShow?n.addClass("slick-active").attr("aria-hidden","false"):(o=r.slideCount%r.options.slidesToShow,i=!0===r.options.infinite?r.options.slidesToShow+e:e,r.options.slidesToShow==r.options.slidesToScroll&&r.slideCount-e<r.options.slidesToShow?n.slice(i-(r.options.slidesToShow-o),i+o).addClass("slick-active").attr("aria-hidden","false"):n.slice(i,i+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==r.options.lazyLoad&&"anticipated"!==r.options.lazyLoad||r.lazyLoad()},t.prototype.setupInfinite=function(){var t,n,i,o=this;if(!0===o.options.fade&&(o.options.centerMode=!1),!0===o.options.infinite&&!1===o.options.fade&&(n=null,o.slideCount>o.options.slidesToShow)){for(i=!0===o.options.centerMode?o.options.slidesToShow+1:o.options.slidesToShow,t=o.slideCount;t>o.slideCount-i;t-=1)n=t-1,e(o.$slides[n]).clone(!0).attr("id","").attr("data-slick-index",n-o.slideCount).prependTo(o.$slideTrack).addClass("slick-cloned");for(t=0;t<i+o.slideCount;t+=1)n=t,e(o.$slides[n]).clone(!0).attr("id","").attr("data-slick-index",n+o.slideCount).appendTo(o.$slideTrack).addClass("slick-cloned");o.$slideTrack.find(".slick-cloned").find("[id]").each((function(){e(this).attr("id","")}))}},t.prototype.interrupt=function(e){e||this.autoPlay(),this.interrupted=e},t.prototype.selectHandler=function(t){var n=this,i=e(t.target).is(".slick-slide")?e(t.target):e(t.target).parents(".slick-slide"),o=parseInt(i.attr("data-slick-index"));o||(o=0),n.slideCount<=n.options.slidesToShow?n.slideHandler(o,!1,!0):n.slideHandler(o)},t.prototype.slideHandler=function(e,t,n){var i,o,r,s,a,l,c=this;if(t=t||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===e))if(!1===t&&c.asNavFor(e),i=e,a=c.getLeft(i),s=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?s:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(e<0||e>c.getDotCount()*c.options.slidesToScroll))!1===c.options.fade&&(i=c.currentSlide,!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(s,(function(){c.postSlide(i)})):c.postSlide(i));else if(!1===c.options.infinite&&!0===c.options.centerMode&&(e<0||e>c.slideCount-c.options.slidesToScroll))!1===c.options.fade&&(i=c.currentSlide,!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(s,(function(){c.postSlide(i)})):c.postSlide(i));else{if(c.options.autoplay&&clearInterval(c.autoPlayTimer),o=i<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+i:i>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:i-c.slideCount:i,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,o]),r=c.currentSlide,c.currentSlide=o,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(l=(l=c.getNavTarget()).slick("getSlick")).slideCount<=l.options.slidesToShow&&l.setSlideClasses(c.currentSlide),c.updateDots(),c.updateArrows(),!0===c.options.fade)return!0!==n?(c.fadeSlideOut(r),c.fadeSlide(o,(function(){c.postSlide(o)}))):c.postSlide(o),void c.animateHeight();!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(a,(function(){c.postSlide(o)})):c.postSlide(o)}},t.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},t.prototype.swipeDirection=function(){var e,t,n,i,o=this;return e=o.touchObject.startX-o.touchObject.curX,t=o.touchObject.startY-o.touchObject.curY,n=Math.atan2(t,e),(i=Math.round(180*n/Math.PI))<0&&(i=360-Math.abs(i)),i<=45&&i>=0?!1===o.options.rtl?"left":"right":i<=360&&i>=315?!1===o.options.rtl?"left":"right":i>=135&&i<=225?!1===o.options.rtl?"right":"left":!0===o.options.verticalSwiping?i>=35&&i<=135?"down":"up":"vertical"},t.prototype.swipeEnd=function(e){var t,n,i=this;if(i.dragging=!1,i.swiping=!1,i.scrolling)return i.scrolling=!1,!1;if(i.interrupted=!1,i.shouldClick=!(i.touchObject.swipeLength>10),void 0===i.touchObject.curX)return!1;if(!0===i.touchObject.edgeHit&&i.$slider.trigger("edge",[i,i.swipeDirection()]),i.touchObject.swipeLength>=i.touchObject.minSwipe){switch(n=i.swipeDirection()){case"left":case"down":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide+i.getSlideCount()):i.currentSlide+i.getSlideCount(),i.currentDirection=0;break;case"right":case"up":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide-i.getSlideCount()):i.currentSlide-i.getSlideCount(),i.currentDirection=1}"vertical"!=n&&(i.slideHandler(t),i.touchObject={},i.$slider.trigger("swipe",[i,n]))}else i.touchObject.startX!==i.touchObject.curX&&(i.slideHandler(i.currentSlide),i.touchObject={})},t.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},t.prototype.swipeMove=function(e){var t,n,i,o,r,s,a=this;return r=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!a.dragging||a.scrolling||r&&1!==r.length)&&(t=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==r?r[0].pageX:e.clientX,a.touchObject.curY=void 0!==r?r[0].pageY:e.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),s=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&s>4?(a.scrolling=!0,!1):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=s),n=a.swipeDirection(),void 0!==e.originalEvent&&a.touchObject.swipeLength>4&&(a.swiping=!0,e.preventDefault()),o=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(o=a.touchObject.curY>a.touchObject.startY?1:-1),i=a.touchObject.swipeLength,a.touchObject.edgeHit=!1,!1===a.options.infinite&&(0===a.currentSlide&&"right"===n||a.currentSlide>=a.getDotCount()&&"left"===n)&&(i=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=t+i*o:a.swipeLeft=t+i*(a.$list.height()/a.listWidth)*o,!0===a.options.verticalSwiping&&(a.swipeLeft=t+i*o),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},t.prototype.swipeStart=function(e){var t,n=this;if(n.interrupted=!0,1!==n.touchObject.fingerCount||n.slideCount<=n.options.slidesToShow)return n.touchObject={},!1;void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),n.touchObject.startX=n.touchObject.curX=void 0!==t?t.pageX:e.clientX,n.touchObject.startY=n.touchObject.curY=void 0!==t?t.pageY:e.clientY,n.dragging=!0},t.prototype.unfilterSlides=t.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},t.prototype.unload=function(){var t=this;e(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},t.prototype.unslick=function(e){var t=this;t.$slider.trigger("unslick",[t,e]),t.destroy()},t.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode?(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},t.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},t.prototype.visibility=function(){var e=this;e.options.autoplay&&(document[e.hidden]?e.interrupted=!0:e.interrupted=!1)},e.fn.slick=function(){var e,n,i=this,o=arguments[0],r=Array.prototype.slice.call(arguments,1),s=i.length;for(e=0;e<s;e++)if("object"==typeof o||void 0===o?i[e].slick=new t(i[e],o):n=i[e].slick[o].apply(i[e].slick,r),void 0!==n)return n;return i};var n})?i.apply(t,o):i)||(e.exports=r)}()},function(e,t,n){
/*!
  * Bootstrap v4.4.1 (https://getbootstrap.com/)
  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
!function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function o(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e){var n=this,i=!1;return t(this).one(c.TRANSITION_END,(function(){i=!0})),setTimeout((function(){i||c.triggerTransitionEnd(n)}),e),this}t=t&&t.hasOwnProperty("default")?t.default:t,n=n&&n.hasOwnProperty("default")?n.default:n;var c={TRANSITION_END:"bsTransitionEnd",getUID:function(e){do{e+=~~(1e6*Math.random())}while(document.getElementById(e));return e},getSelectorFromElement:function(e){var t=e.getAttribute("data-target");if(!t||"#"===t){var n=e.getAttribute("href");t=n&&"#"!==n?n.trim():""}try{return document.querySelector(t)?t:null}catch(e){return null}},getTransitionDurationFromElement:function(e){if(!e)return 0;var n=t(e).css("transition-duration"),i=t(e).css("transition-delay"),o=parseFloat(n),r=parseFloat(i);return o||r?(n=n.split(",")[0],i=i.split(",")[0],1e3*(parseFloat(n)+parseFloat(i))):0},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(e){t(e).trigger("transitionend")},supportsTransitionEnd:function(){return Boolean("transitionend")},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var o=n[i],r=t[i],s=r&&c.isElement(r)?"element":(a=r,{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(o).test(s))throw new Error(e.toUpperCase()+': Option "'+i+'" provided type "'+s+'" but expected type "'+o+'".')}var a},findShadowRoot:function(e){if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){var t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?c.findShadowRoot(e.parentNode):null},jQueryDetection:function(){if(void 0===t)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1===e[0]&&9===e[1]&&e[2]<1||e[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}};c.jQueryDetection(),t.fn.emulateTransitionEnd=l,t.event.special[c.TRANSITION_END]={bindType:"transitionend",delegateType:"transitionend",handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}};var u=t.fn.alert,d={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},f="alert",p="fade",h="show",g=function(){function e(e){this._element=e}var n=e.prototype;return n.close=function(e){var t=this._element;e&&(t=this._getRootElement(e)),this._triggerCloseEvent(t).isDefaultPrevented()||this._removeElement(t)},n.dispose=function(){t.removeData(this._element,"bs.alert"),this._element=null},n._getRootElement=function(e){var n=c.getSelectorFromElement(e),i=!1;return n&&(i=document.querySelector(n)),i||(i=t(e).closest("."+f)[0]),i},n._triggerCloseEvent=function(e){var n=t.Event(d.CLOSE);return t(e).trigger(n),n},n._removeElement=function(e){var n=this;if(t(e).removeClass(h),t(e).hasClass(p)){var i=c.getTransitionDurationFromElement(e);t(e).one(c.TRANSITION_END,(function(t){return n._destroyElement(e,t)})).emulateTransitionEnd(i)}else this._destroyElement(e)},n._destroyElement=function(e){t(e).detach().trigger(d.CLOSED).remove()},e._jQueryInterface=function(n){return this.each((function(){var i=t(this),o=i.data("bs.alert");o||(o=new e(this),i.data("bs.alert",o)),"close"===n&&o[n](this)}))},e._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},o(e,null,[{key:"VERSION",get:function(){return"4.4.1"}}]),e}();t(document).on(d.CLICK_DATA_API,'[data-dismiss="alert"]',g._handleDismiss(new g)),t.fn.alert=g._jQueryInterface,t.fn.alert.Constructor=g,t.fn.alert.noConflict=function(){return t.fn.alert=u,g._jQueryInterface};var v=t.fn.button,m="active",y="btn",b="focus",w='[data-toggle^="button"]',T='[data-toggle="buttons"]',S='[data-toggle="button"]',x='[data-toggle="buttons"] .btn',_='input:not([type="hidden"])',E=".active",C=".btn",k={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api",LOAD_DATA_API:"load.bs.button.data-api"},A=function(){function e(e){this._element=e}var n=e.prototype;return n.toggle=function(){var e=!0,n=!0,i=t(this._element).closest(T)[0];if(i){var o=this._element.querySelector(_);if(o){if("radio"===o.type)if(o.checked&&this._element.classList.contains(m))e=!1;else{var r=i.querySelector(E);r&&t(r).removeClass(m)}else"checkbox"===o.type?"LABEL"===this._element.tagName&&o.checked===this._element.classList.contains(m)&&(e=!1):e=!1;e&&(o.checked=!this._element.classList.contains(m),t(o).trigger("change")),o.focus(),n=!1}}this._element.hasAttribute("disabled")||this._element.classList.contains("disabled")||(n&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(m)),e&&t(this._element).toggleClass(m))},n.dispose=function(){t.removeData(this._element,"bs.button"),this._element=null},e._jQueryInterface=function(n){return this.each((function(){var i=t(this).data("bs.button");i||(i=new e(this),t(this).data("bs.button",i)),"toggle"===n&&i[n]()}))},o(e,null,[{key:"VERSION",get:function(){return"4.4.1"}}]),e}();t(document).on(k.CLICK_DATA_API,w,(function(e){var n=e.target;if(t(n).hasClass(y)||(n=t(n).closest(C)[0]),!n||n.hasAttribute("disabled")||n.classList.contains("disabled"))e.preventDefault();else{var i=n.querySelector(_);if(i&&(i.hasAttribute("disabled")||i.classList.contains("disabled")))return void e.preventDefault();A._jQueryInterface.call(t(n),"toggle")}})).on(k.FOCUS_BLUR_DATA_API,w,(function(e){var n=t(e.target).closest(C)[0];t(n).toggleClass(b,/^focus(in)?$/.test(e.type))})),t(window).on(k.LOAD_DATA_API,(function(){for(var e=[].slice.call(document.querySelectorAll(x)),t=0,n=e.length;t<n;t++){var i=e[t],o=i.querySelector(_);o.checked||o.hasAttribute("checked")?i.classList.add(m):i.classList.remove(m)}for(var r=0,s=(e=[].slice.call(document.querySelectorAll(S))).length;r<s;r++){var a=e[r];"true"===a.getAttribute("aria-pressed")?a.classList.add(m):a.classList.remove(m)}})),t.fn.button=A._jQueryInterface,t.fn.button.Constructor=A,t.fn.button.noConflict=function(){return t.fn.button=v,A._jQueryInterface};var D="carousel",O=".bs.carousel",L=t.fn[D],N={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},I={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},j="next",H="prev",P="left",$="right",M={SLIDE:"slide.bs.carousel",SLID:"slid.bs.carousel",KEYDOWN:"keydown.bs.carousel",MOUSEENTER:"mouseenter.bs.carousel",MOUSELEAVE:"mouseleave.bs.carousel",TOUCHSTART:"touchstart.bs.carousel",TOUCHMOVE:"touchmove.bs.carousel",TOUCHEND:"touchend.bs.carousel",POINTERDOWN:"pointerdown.bs.carousel",POINTERUP:"pointerup.bs.carousel",DRAG_START:"dragstart.bs.carousel",LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},R="carousel",q="active",z="slide",W="carousel-item-right",F="carousel-item-left",B="carousel-item-next",U="carousel-item-prev",Y="pointer-event",X=".active",V=".active.carousel-item",K=".carousel-item",Q=".carousel-item img",G=".carousel-item-next, .carousel-item-prev",J=".carousel-indicators",Z="[data-slide], [data-slide-to]",ee='[data-ride="carousel"]',te={TOUCH:"touch",PEN:"pen"},ne=function(){function e(e,t){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(t),this._element=e,this._indicatorsElement=this._element.querySelector(J),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners()}var n=e.prototype;return n.next=function(){this._isSliding||this._slide(j)},n.nextWhenVisible=function(){!document.hidden&&t(this._element).is(":visible")&&"hidden"!==t(this._element).css("visibility")&&this.next()},n.prev=function(){this._isSliding||this._slide(H)},n.pause=function(e){e||(this._isPaused=!0),this._element.querySelector(G)&&(c.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},n.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},n.to=function(e){var n=this;this._activeElement=this._element.querySelector(V);var i=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0))if(this._isSliding)t(this._element).one(M.SLID,(function(){return n.to(e)}));else{if(i===e)return this.pause(),void this.cycle();var o=e>i?j:H;this._slide(o,this._items[e])}},n.dispose=function(){t(this._element).off(O),t.removeData(this._element,"bs.carousel"),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},n._getConfig=function(e){return e=a({},N,{},e),c.typeCheckConfig(D,e,I),e},n._handleSwipe=function(){var e=Math.abs(this.touchDeltaX);if(!(e<=40)){var t=e/this.touchDeltaX;this.touchDeltaX=0,t>0&&this.prev(),t<0&&this.next()}},n._addEventListeners=function(){var e=this;this._config.keyboard&&t(this._element).on(M.KEYDOWN,(function(t){return e._keydown(t)})),"hover"===this._config.pause&&t(this._element).on(M.MOUSEENTER,(function(t){return e.pause(t)})).on(M.MOUSELEAVE,(function(t){return e.cycle(t)})),this._config.touch&&this._addTouchEventListeners()},n._addTouchEventListeners=function(){var e=this;if(this._touchSupported){var n=function(t){e._pointerEvent&&te[t.originalEvent.pointerType.toUpperCase()]?e.touchStartX=t.originalEvent.clientX:e._pointerEvent||(e.touchStartX=t.originalEvent.touches[0].clientX)},i=function(t){e._pointerEvent&&te[t.originalEvent.pointerType.toUpperCase()]&&(e.touchDeltaX=t.originalEvent.clientX-e.touchStartX),e._handleSwipe(),"hover"===e._config.pause&&(e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout((function(t){return e.cycle(t)}),500+e._config.interval))};t(this._element.querySelectorAll(Q)).on(M.DRAG_START,(function(e){return e.preventDefault()})),this._pointerEvent?(t(this._element).on(M.POINTERDOWN,(function(e){return n(e)})),t(this._element).on(M.POINTERUP,(function(e){return i(e)})),this._element.classList.add(Y)):(t(this._element).on(M.TOUCHSTART,(function(e){return n(e)})),t(this._element).on(M.TOUCHMOVE,(function(t){return function(t){t.originalEvent.touches&&t.originalEvent.touches.length>1?e.touchDeltaX=0:e.touchDeltaX=t.originalEvent.touches[0].clientX-e.touchStartX}(t)})),t(this._element).on(M.TOUCHEND,(function(e){return i(e)})))}},n._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next()}},n._getItemIndex=function(e){return this._items=e&&e.parentNode?[].slice.call(e.parentNode.querySelectorAll(K)):[],this._items.indexOf(e)},n._getItemByDirection=function(e,t){var n=e===j,i=e===H,o=this._getItemIndex(t),r=this._items.length-1;if((i&&0===o||n&&o===r)&&!this._config.wrap)return t;var s=(o+(e===H?-1:1))%this._items.length;return-1===s?this._items[this._items.length-1]:this._items[s]},n._triggerSlideEvent=function(e,n){var i=this._getItemIndex(e),o=this._getItemIndex(this._element.querySelector(V)),r=t.Event(M.SLIDE,{relatedTarget:e,direction:n,from:o,to:i});return t(this._element).trigger(r),r},n._setActiveIndicatorElement=function(e){if(this._indicatorsElement){var n=[].slice.call(this._indicatorsElement.querySelectorAll(X));t(n).removeClass(q);var i=this._indicatorsElement.children[this._getItemIndex(e)];i&&t(i).addClass(q)}},n._slide=function(e,n){var i,o,r,s=this,a=this._element.querySelector(V),l=this._getItemIndex(a),u=n||a&&this._getItemByDirection(e,a),d=this._getItemIndex(u),f=Boolean(this._interval);if(e===j?(i=F,o=B,r=P):(i=W,o=U,r=$),u&&t(u).hasClass(q))this._isSliding=!1;else if(!this._triggerSlideEvent(u,r).isDefaultPrevented()&&a&&u){this._isSliding=!0,f&&this.pause(),this._setActiveIndicatorElement(u);var p=t.Event(M.SLID,{relatedTarget:u,direction:r,from:l,to:d});if(t(this._element).hasClass(z)){t(u).addClass(o),c.reflow(u),t(a).addClass(i),t(u).addClass(i);var h=parseInt(u.getAttribute("data-interval"),10);h?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=h):this._config.interval=this._config.defaultInterval||this._config.interval;var g=c.getTransitionDurationFromElement(a);t(a).one(c.TRANSITION_END,(function(){t(u).removeClass(i+" "+o).addClass(q),t(a).removeClass(q+" "+o+" "+i),s._isSliding=!1,setTimeout((function(){return t(s._element).trigger(p)}),0)})).emulateTransitionEnd(g)}else t(a).removeClass(q),t(u).addClass(q),this._isSliding=!1,t(this._element).trigger(p);f&&this.cycle()}},e._jQueryInterface=function(n){return this.each((function(){var i=t(this).data("bs.carousel"),o=a({},N,{},t(this).data());"object"==typeof n&&(o=a({},o,{},n));var r="string"==typeof n?n:o.slide;if(i||(i=new e(this,o),t(this).data("bs.carousel",i)),"number"==typeof n)i.to(n);else if("string"==typeof r){if(void 0===i[r])throw new TypeError('No method named "'+r+'"');i[r]()}else o.interval&&o.ride&&(i.pause(),i.cycle())}))},e._dataApiClickHandler=function(n){var i=c.getSelectorFromElement(this);if(i){var o=t(i)[0];if(o&&t(o).hasClass(R)){var r=a({},t(o).data(),{},t(this).data()),s=this.getAttribute("data-slide-to");s&&(r.interval=!1),e._jQueryInterface.call(t(o),r),s&&t(o).data("bs.carousel").to(s),n.preventDefault()}}},o(e,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return N}}]),e}();t(document).on(M.CLICK_DATA_API,Z,ne._dataApiClickHandler),t(window).on(M.LOAD_DATA_API,(function(){for(var e=[].slice.call(document.querySelectorAll(ee)),n=0,i=e.length;n<i;n++){var o=t(e[n]);ne._jQueryInterface.call(o,o.data())}})),t.fn[D]=ne._jQueryInterface,t.fn[D].Constructor=ne,t.fn[D].noConflict=function(){return t.fn[D]=L,ne._jQueryInterface};var ie="collapse",oe=t.fn[ie],re={toggle:!0,parent:""},se={toggle:"boolean",parent:"(string|element)"},ae={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},le="show",ce="collapse",ue="collapsing",de="collapsed",fe="width",pe="height",he=".show, .collapsing",ge='[data-toggle="collapse"]',ve=function(){function e(e,t){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(t),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'));for(var n=[].slice.call(document.querySelectorAll(ge)),i=0,o=n.length;i<o;i++){var r=n[i],s=c.getSelectorFromElement(r),a=[].slice.call(document.querySelectorAll(s)).filter((function(t){return t===e}));null!==s&&a.length>0&&(this._selector=s,this._triggerArray.push(r))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var n=e.prototype;return n.toggle=function(){t(this._element).hasClass(le)?this.hide():this.show()},n.show=function(){var n,i,o=this;if(!(this._isTransitioning||t(this._element).hasClass(le)||(this._parent&&0===(n=[].slice.call(this._parent.querySelectorAll(he)).filter((function(e){return"string"==typeof o._config.parent?e.getAttribute("data-parent")===o._config.parent:e.classList.contains(ce)}))).length&&(n=null),n&&(i=t(n).not(this._selector).data("bs.collapse"))&&i._isTransitioning))){var r=t.Event(ae.SHOW);if(t(this._element).trigger(r),!r.isDefaultPrevented()){n&&(e._jQueryInterface.call(t(n).not(this._selector),"hide"),i||t(n).data("bs.collapse",null));var s=this._getDimension();t(this._element).removeClass(ce).addClass(ue),this._element.style[s]=0,this._triggerArray.length&&t(this._triggerArray).removeClass(de).attr("aria-expanded",!0),this.setTransitioning(!0);var a="scroll"+(s[0].toUpperCase()+s.slice(1)),l=c.getTransitionDurationFromElement(this._element);t(this._element).one(c.TRANSITION_END,(function(){t(o._element).removeClass(ue).addClass(ce).addClass(le),o._element.style[s]="",o.setTransitioning(!1),t(o._element).trigger(ae.SHOWN)})).emulateTransitionEnd(l),this._element.style[s]=this._element[a]+"px"}}},n.hide=function(){var e=this;if(!this._isTransitioning&&t(this._element).hasClass(le)){var n=t.Event(ae.HIDE);if(t(this._element).trigger(n),!n.isDefaultPrevented()){var i=this._getDimension();this._element.style[i]=this._element.getBoundingClientRect()[i]+"px",c.reflow(this._element),t(this._element).addClass(ue).removeClass(ce).removeClass(le);var o=this._triggerArray.length;if(o>0)for(var r=0;r<o;r++){var s=this._triggerArray[r],a=c.getSelectorFromElement(s);null!==a&&(t([].slice.call(document.querySelectorAll(a))).hasClass(le)||t(s).addClass(de).attr("aria-expanded",!1))}this.setTransitioning(!0),this._element.style[i]="";var l=c.getTransitionDurationFromElement(this._element);t(this._element).one(c.TRANSITION_END,(function(){e.setTransitioning(!1),t(e._element).removeClass(ue).addClass(ce).trigger(ae.HIDDEN)})).emulateTransitionEnd(l)}}},n.setTransitioning=function(e){this._isTransitioning=e},n.dispose=function(){t.removeData(this._element,"bs.collapse"),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},n._getConfig=function(e){return(e=a({},re,{},e)).toggle=Boolean(e.toggle),c.typeCheckConfig(ie,e,se),e},n._getDimension=function(){return t(this._element).hasClass(fe)?fe:pe},n._getParent=function(){var n,i=this;c.isElement(this._config.parent)?(n=this._config.parent,void 0!==this._config.parent.jquery&&(n=this._config.parent[0])):n=document.querySelector(this._config.parent);var o='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',r=[].slice.call(n.querySelectorAll(o));return t(r).each((function(t,n){i._addAriaAndCollapsedClass(e._getTargetFromElement(n),[n])})),n},n._addAriaAndCollapsedClass=function(e,n){var i=t(e).hasClass(le);n.length&&t(n).toggleClass(de,!i).attr("aria-expanded",i)},e._getTargetFromElement=function(e){var t=c.getSelectorFromElement(e);return t?document.querySelector(t):null},e._jQueryInterface=function(n){return this.each((function(){var i=t(this),o=i.data("bs.collapse"),r=a({},re,{},i.data(),{},"object"==typeof n&&n?n:{});if(!o&&r.toggle&&/show|hide/.test(n)&&(r.toggle=!1),o||(o=new e(this,r),i.data("bs.collapse",o)),"string"==typeof n){if(void 0===o[n])throw new TypeError('No method named "'+n+'"');o[n]()}}))},o(e,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return re}}]),e}();t(document).on(ae.CLICK_DATA_API,ge,(function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var n=t(this),i=c.getSelectorFromElement(this),o=[].slice.call(document.querySelectorAll(i));t(o).each((function(){var e=t(this),i=e.data("bs.collapse")?"toggle":n.data();ve._jQueryInterface.call(e,i)}))})),t.fn[ie]=ve._jQueryInterface,t.fn[ie].Constructor=ve,t.fn[ie].noConflict=function(){return t.fn[ie]=oe,ve._jQueryInterface};var me="dropdown",ye=t.fn[me],be=new RegExp("38|40|27"),we={HIDE:"hide.bs.dropdown",HIDDEN:"hidden.bs.dropdown",SHOW:"show.bs.dropdown",SHOWN:"shown.bs.dropdown",CLICK:"click.bs.dropdown",CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},Te="disabled",Se="show",xe="dropup",_e="dropright",Ee="dropleft",Ce="dropdown-menu-right",ke="position-static",Ae='[data-toggle="dropdown"]',De=".dropdown form",Oe=".dropdown-menu",Le=".navbar-nav",Ne=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",Ie="top-start",je="top-end",He="bottom-start",Pe="bottom-end",$e="right-start",Me="left-start",Re={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic",popperConfig:null},qe={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string",popperConfig:"(null|object)"},ze=function(){function e(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var i=e.prototype;return i.toggle=function(){if(!this._element.disabled&&!t(this._element).hasClass(Te)){var n=t(this._menu).hasClass(Se);e._clearMenus(),n||this.show(!0)}},i.show=function(i){if(void 0===i&&(i=!1),!(this._element.disabled||t(this._element).hasClass(Te)||t(this._menu).hasClass(Se))){var o={relatedTarget:this._element},r=t.Event(we.SHOW,o),s=e._getParentFromElement(this._element);if(t(s).trigger(r),!r.isDefaultPrevented()){if(!this._inNavbar&&i){if(void 0===n)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");var a=this._element;"parent"===this._config.reference?a=s:c.isElement(this._config.reference)&&(a=this._config.reference,void 0!==this._config.reference.jquery&&(a=this._config.reference[0])),"scrollParent"!==this._config.boundary&&t(s).addClass(ke),this._popper=new n(a,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===t(s).closest(Le).length&&t(document.body).children().on("mouseover",null,t.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),t(this._menu).toggleClass(Se),t(s).toggleClass(Se).trigger(t.Event(we.SHOWN,o))}}},i.hide=function(){if(!this._element.disabled&&!t(this._element).hasClass(Te)&&t(this._menu).hasClass(Se)){var n={relatedTarget:this._element},i=t.Event(we.HIDE,n),o=e._getParentFromElement(this._element);t(o).trigger(i),i.isDefaultPrevented()||(this._popper&&this._popper.destroy(),t(this._menu).toggleClass(Se),t(o).toggleClass(Se).trigger(t.Event(we.HIDDEN,n)))}},i.dispose=function(){t.removeData(this._element,"bs.dropdown"),t(this._element).off(".bs.dropdown"),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},i.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},i._addEventListeners=function(){var e=this;t(this._element).on(we.CLICK,(function(t){t.preventDefault(),t.stopPropagation(),e.toggle()}))},i._getConfig=function(e){return e=a({},this.constructor.Default,{},t(this._element).data(),{},e),c.typeCheckConfig(me,e,this.constructor.DefaultType),e},i._getMenuElement=function(){if(!this._menu){var t=e._getParentFromElement(this._element);t&&(this._menu=t.querySelector(Oe))}return this._menu},i._getPlacement=function(){var e=t(this._element.parentNode),n=He;return e.hasClass(xe)?(n=Ie,t(this._menu).hasClass(Ce)&&(n=je)):e.hasClass(_e)?n=$e:e.hasClass(Ee)?n=Me:t(this._menu).hasClass(Ce)&&(n=Pe),n},i._detectNavbar=function(){return t(this._element).closest(".navbar").length>0},i._getOffset=function(){var e=this,t={};return"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=a({},t.offsets,{},e._config.offset(t.offsets,e._element)||{}),t}:t.offset=this._config.offset,t},i._getPopperConfig=function(){var e={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(e.modifiers.applyStyle={enabled:!1}),a({},e,{},this._config.popperConfig)},e._jQueryInterface=function(n){return this.each((function(){var i=t(this).data("bs.dropdown");if(i||(i=new e(this,"object"==typeof n?n:null),t(this).data("bs.dropdown",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n]()}}))},e._clearMenus=function(n){if(!n||3!==n.which&&("keyup"!==n.type||9===n.which))for(var i=[].slice.call(document.querySelectorAll(Ae)),o=0,r=i.length;o<r;o++){var s=e._getParentFromElement(i[o]),a=t(i[o]).data("bs.dropdown"),l={relatedTarget:i[o]};if(n&&"click"===n.type&&(l.clickEvent=n),a){var c=a._menu;if(t(s).hasClass(Se)&&!(n&&("click"===n.type&&/input|textarea/i.test(n.target.tagName)||"keyup"===n.type&&9===n.which)&&t.contains(s,n.target))){var u=t.Event(we.HIDE,l);t(s).trigger(u),u.isDefaultPrevented()||("ontouchstart"in document.documentElement&&t(document.body).children().off("mouseover",null,t.noop),i[o].setAttribute("aria-expanded","false"),a._popper&&a._popper.destroy(),t(c).removeClass(Se),t(s).removeClass(Se).trigger(t.Event(we.HIDDEN,l)))}}}},e._getParentFromElement=function(e){var t,n=c.getSelectorFromElement(e);return n&&(t=document.querySelector(n)),t||e.parentNode},e._dataApiKeydownHandler=function(n){if((/input|textarea/i.test(n.target.tagName)?!(32===n.which||27!==n.which&&(40!==n.which&&38!==n.which||t(n.target).closest(Oe).length)):be.test(n.which))&&(n.preventDefault(),n.stopPropagation(),!this.disabled&&!t(this).hasClass(Te))){var i=e._getParentFromElement(this),o=t(i).hasClass(Se);if(o||27!==n.which)if(o&&(!o||27!==n.which&&32!==n.which)){var r=[].slice.call(i.querySelectorAll(Ne)).filter((function(e){return t(e).is(":visible")}));if(0!==r.length){var s=r.indexOf(n.target);38===n.which&&s>0&&s--,40===n.which&&s<r.length-1&&s++,s<0&&(s=0),r[s].focus()}}else{if(27===n.which){var a=i.querySelector(Ae);t(a).trigger("focus")}t(this).trigger("click")}}},o(e,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return Re}},{key:"DefaultType",get:function(){return qe}}]),e}();t(document).on(we.KEYDOWN_DATA_API,Ae,ze._dataApiKeydownHandler).on(we.KEYDOWN_DATA_API,Oe,ze._dataApiKeydownHandler).on(we.CLICK_DATA_API+" "+we.KEYUP_DATA_API,ze._clearMenus).on(we.CLICK_DATA_API,Ae,(function(e){e.preventDefault(),e.stopPropagation(),ze._jQueryInterface.call(t(this),"toggle")})).on(we.CLICK_DATA_API,De,(function(e){e.stopPropagation()})),t.fn[me]=ze._jQueryInterface,t.fn[me].Constructor=ze,t.fn[me].noConflict=function(){return t.fn[me]=ye,ze._jQueryInterface};var We=t.fn.modal,Fe={backdrop:!0,keyboard:!0,focus:!0,show:!0},Be={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},Ue={HIDE:"hide.bs.modal",HIDE_PREVENTED:"hidePrevented.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},Ye="modal-dialog-scrollable",Xe="modal-scrollbar-measure",Ve="modal-backdrop",Ke="modal-open",Qe="fade",Ge="show",Je="modal-static",Ze=".modal-dialog",et=".modal-body",tt='[data-toggle="modal"]',nt='[data-dismiss="modal"]',it=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",ot=".sticky-top",rt=function(){function e(e,t){this._config=this._getConfig(t),this._element=e,this._dialog=e.querySelector(Ze),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0}var n=e.prototype;return n.toggle=function(e){return this._isShown?this.hide():this.show(e)},n.show=function(e){var n=this;if(!this._isShown&&!this._isTransitioning){t(this._element).hasClass(Qe)&&(this._isTransitioning=!0);var i=t.Event(Ue.SHOW,{relatedTarget:e});t(this._element).trigger(i),this._isShown||i.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),t(this._element).on(Ue.CLICK_DISMISS,nt,(function(e){return n.hide(e)})),t(this._dialog).on(Ue.MOUSEDOWN_DISMISS,(function(){t(n._element).one(Ue.MOUSEUP_DISMISS,(function(e){t(e.target).is(n._element)&&(n._ignoreBackdropClick=!0)}))})),this._showBackdrop((function(){return n._showElement(e)})))}},n.hide=function(e){var n=this;if(e&&e.preventDefault(),this._isShown&&!this._isTransitioning){var i=t.Event(Ue.HIDE);if(t(this._element).trigger(i),this._isShown&&!i.isDefaultPrevented()){this._isShown=!1;var o=t(this._element).hasClass(Qe);if(o&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),t(document).off(Ue.FOCUSIN),t(this._element).removeClass(Ge),t(this._element).off(Ue.CLICK_DISMISS),t(this._dialog).off(Ue.MOUSEDOWN_DISMISS),o){var r=c.getTransitionDurationFromElement(this._element);t(this._element).one(c.TRANSITION_END,(function(e){return n._hideModal(e)})).emulateTransitionEnd(r)}else this._hideModal()}}},n.dispose=function(){[window,this._element,this._dialog].forEach((function(e){return t(e).off(".bs.modal")})),t(document).off(Ue.FOCUSIN),t.removeData(this._element,"bs.modal"),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null},n.handleUpdate=function(){this._adjustDialog()},n._getConfig=function(e){return e=a({},Fe,{},e),c.typeCheckConfig("modal",e,Be),e},n._triggerBackdropTransition=function(){var e=this;if("static"===this._config.backdrop){var n=t.Event(Ue.HIDE_PREVENTED);if(t(this._element).trigger(n),n.defaultPrevented)return;this._element.classList.add(Je);var i=c.getTransitionDurationFromElement(this._element);t(this._element).one(c.TRANSITION_END,(function(){e._element.classList.remove(Je)})).emulateTransitionEnd(i),this._element.focus()}else this.hide()},n._showElement=function(e){var n=this,i=t(this._element).hasClass(Qe),o=this._dialog?this._dialog.querySelector(et):null;this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),t(this._dialog).hasClass(Ye)&&o?o.scrollTop=0:this._element.scrollTop=0,i&&c.reflow(this._element),t(this._element).addClass(Ge),this._config.focus&&this._enforceFocus();var r=t.Event(Ue.SHOWN,{relatedTarget:e}),s=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,t(n._element).trigger(r)};if(i){var a=c.getTransitionDurationFromElement(this._dialog);t(this._dialog).one(c.TRANSITION_END,s).emulateTransitionEnd(a)}else s()},n._enforceFocus=function(){var e=this;t(document).off(Ue.FOCUSIN).on(Ue.FOCUSIN,(function(n){document!==n.target&&e._element!==n.target&&0===t(e._element).has(n.target).length&&e._element.focus()}))},n._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?t(this._element).on(Ue.KEYDOWN_DISMISS,(function(t){27===t.which&&e._triggerBackdropTransition()})):this._isShown||t(this._element).off(Ue.KEYDOWN_DISMISS)},n._setResizeEvent=function(){var e=this;this._isShown?t(window).on(Ue.RESIZE,(function(t){return e.handleUpdate(t)})):t(window).off(Ue.RESIZE)},n._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._isTransitioning=!1,this._showBackdrop((function(){t(document.body).removeClass(Ke),e._resetAdjustments(),e._resetScrollbar(),t(e._element).trigger(Ue.HIDDEN)}))},n._removeBackdrop=function(){this._backdrop&&(t(this._backdrop).remove(),this._backdrop=null)},n._showBackdrop=function(e){var n=this,i=t(this._element).hasClass(Qe)?Qe:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=Ve,i&&this._backdrop.classList.add(i),t(this._backdrop).appendTo(document.body),t(this._element).on(Ue.CLICK_DISMISS,(function(e){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:e.target===e.currentTarget&&n._triggerBackdropTransition()})),i&&c.reflow(this._backdrop),t(this._backdrop).addClass(Ge),!e)return;if(!i)return void e();var o=c.getTransitionDurationFromElement(this._backdrop);t(this._backdrop).one(c.TRANSITION_END,e).emulateTransitionEnd(o)}else if(!this._isShown&&this._backdrop){t(this._backdrop).removeClass(Ge);var r=function(){n._removeBackdrop(),e&&e()};if(t(this._element).hasClass(Qe)){var s=c.getTransitionDurationFromElement(this._backdrop);t(this._backdrop).one(c.TRANSITION_END,r).emulateTransitionEnd(s)}else r()}else e&&e()},n._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},n._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},n._checkScrollbar=function(){var e=document.body.getBoundingClientRect();this._isBodyOverflowing=e.left+e.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},n._setScrollbar=function(){var e=this;if(this._isBodyOverflowing){var n=[].slice.call(document.querySelectorAll(it)),i=[].slice.call(document.querySelectorAll(ot));t(n).each((function(n,i){var o=i.style.paddingRight,r=t(i).css("padding-right");t(i).data("padding-right",o).css("padding-right",parseFloat(r)+e._scrollbarWidth+"px")})),t(i).each((function(n,i){var o=i.style.marginRight,r=t(i).css("margin-right");t(i).data("margin-right",o).css("margin-right",parseFloat(r)-e._scrollbarWidth+"px")}));var o=document.body.style.paddingRight,r=t(document.body).css("padding-right");t(document.body).data("padding-right",o).css("padding-right",parseFloat(r)+this._scrollbarWidth+"px")}t(document.body).addClass(Ke)},n._resetScrollbar=function(){var e=[].slice.call(document.querySelectorAll(it));t(e).each((function(e,n){var i=t(n).data("padding-right");t(n).removeData("padding-right"),n.style.paddingRight=i||""}));var n=[].slice.call(document.querySelectorAll(""+ot));t(n).each((function(e,n){var i=t(n).data("margin-right");void 0!==i&&t(n).css("margin-right",i).removeData("margin-right")}));var i=t(document.body).data("padding-right");t(document.body).removeData("padding-right"),document.body.style.paddingRight=i||""},n._getScrollbarWidth=function(){var e=document.createElement("div");e.className=Xe,document.body.appendChild(e);var t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t},e._jQueryInterface=function(n,i){return this.each((function(){var o=t(this).data("bs.modal"),r=a({},Fe,{},t(this).data(),{},"object"==typeof n&&n?n:{});if(o||(o=new e(this,r),t(this).data("bs.modal",o)),"string"==typeof n){if(void 0===o[n])throw new TypeError('No method named "'+n+'"');o[n](i)}else r.show&&o.show(i)}))},o(e,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return Fe}}]),e}();t(document).on(Ue.CLICK_DATA_API,tt,(function(e){var n,i=this,o=c.getSelectorFromElement(this);o&&(n=document.querySelector(o));var r=t(n).data("bs.modal")?"toggle":a({},t(n).data(),{},t(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault();var s=t(n).one(Ue.SHOW,(function(e){e.isDefaultPrevented()||s.one(Ue.HIDDEN,(function(){t(i).is(":visible")&&i.focus()}))}));rt._jQueryInterface.call(t(n),r,this)})),t.fn.modal=rt._jQueryInterface,t.fn.modal.Constructor=rt,t.fn.modal.noConflict=function(){return t.fn.modal=We,rt._jQueryInterface};var st=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],at={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},lt=/^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,ct=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;function ut(e,t,n){if(0===e.length)return e;if(n&&"function"==typeof n)return n(e);for(var i=(new window.DOMParser).parseFromString(e,"text/html"),o=Object.keys(t),r=[].slice.call(i.body.querySelectorAll("*")),s=function(e,n){var i=r[e],s=i.nodeName.toLowerCase();if(-1===o.indexOf(i.nodeName.toLowerCase()))return i.parentNode.removeChild(i),"continue";var a=[].slice.call(i.attributes),l=[].concat(t["*"]||[],t[s]||[]);a.forEach((function(e){(function(e,t){var n=e.nodeName.toLowerCase();if(-1!==t.indexOf(n))return-1===st.indexOf(n)||Boolean(e.nodeValue.match(lt)||e.nodeValue.match(ct));for(var i=t.filter((function(e){return e instanceof RegExp})),o=0,r=i.length;o<r;o++)if(n.match(i[o]))return!0;return!1})(e,l)||i.removeAttribute(e.nodeName)}))},a=0,l=r.length;a<l;a++)s(a);return i.body.innerHTML}var dt="tooltip",ft=t.fn.tooltip,pt=new RegExp("(^|\\s)bs-tooltip\\S+","g"),ht=["sanitize","whiteList","sanitizeFn"],gt={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string|function)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)",sanitize:"boolean",sanitizeFn:"(null|function)",whiteList:"object",popperConfig:"(null|object)"},vt={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},mt={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent",sanitize:!0,sanitizeFn:null,whiteList:at,popperConfig:null},yt="show",bt="out",wt={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},Tt="fade",St="show",xt=".tooltip-inner",_t=".arrow",Et="hover",Ct="focus",kt="click",At="manual",Dt=function(){function e(e,t){if(void 0===n)throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=e,this.config=this._getConfig(t),this.tip=null,this._setListeners()}var i=e.prototype;return i.enable=function(){this._isEnabled=!0},i.disable=function(){this._isEnabled=!1},i.toggleEnabled=function(){this._isEnabled=!this._isEnabled},i.toggle=function(e){if(this._isEnabled)if(e){var n=this.constructor.DATA_KEY,i=t(e.currentTarget).data(n);i||(i=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(n,i)),i._activeTrigger.click=!i._activeTrigger.click,i._isWithActiveTrigger()?i._enter(null,i):i._leave(null,i)}else{if(t(this.getTipElement()).hasClass(St))return void this._leave(null,this);this._enter(null,this)}},i.dispose=function(){clearTimeout(this._timeout),t.removeData(this.element,this.constructor.DATA_KEY),t(this.element).off(this.constructor.EVENT_KEY),t(this.element).closest(".modal").off("hide.bs.modal",this._hideModalHandler),this.tip&&t(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},i.show=function(){var e=this;if("none"===t(this.element).css("display"))throw new Error("Please use show on visible elements");var i=t.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){t(this.element).trigger(i);var o=c.findShadowRoot(this.element),r=t.contains(null!==o?o:this.element.ownerDocument.documentElement,this.element);if(i.isDefaultPrevented()||!r)return;var s=this.getTipElement(),a=c.getUID(this.constructor.NAME);s.setAttribute("id",a),this.element.setAttribute("aria-describedby",a),this.setContent(),this.config.animation&&t(s).addClass(Tt);var l="function"==typeof this.config.placement?this.config.placement.call(this,s,this.element):this.config.placement,u=this._getAttachment(l);this.addAttachmentClass(u);var d=this._getContainer();t(s).data(this.constructor.DATA_KEY,this),t.contains(this.element.ownerDocument.documentElement,this.tip)||t(s).appendTo(d),t(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new n(this.element,s,this._getPopperConfig(u)),t(s).addClass(St),"ontouchstart"in document.documentElement&&t(document.body).children().on("mouseover",null,t.noop);var f=function(){e.config.animation&&e._fixTransition();var n=e._hoverState;e._hoverState=null,t(e.element).trigger(e.constructor.Event.SHOWN),n===bt&&e._leave(null,e)};if(t(this.tip).hasClass(Tt)){var p=c.getTransitionDurationFromElement(this.tip);t(this.tip).one(c.TRANSITION_END,f).emulateTransitionEnd(p)}else f()}},i.hide=function(e){var n=this,i=this.getTipElement(),o=t.Event(this.constructor.Event.HIDE),r=function(){n._hoverState!==yt&&i.parentNode&&i.parentNode.removeChild(i),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),t(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),e&&e()};if(t(this.element).trigger(o),!o.isDefaultPrevented()){if(t(i).removeClass(St),"ontouchstart"in document.documentElement&&t(document.body).children().off("mouseover",null,t.noop),this._activeTrigger[kt]=!1,this._activeTrigger[Ct]=!1,this._activeTrigger[Et]=!1,t(this.tip).hasClass(Tt)){var s=c.getTransitionDurationFromElement(i);t(i).one(c.TRANSITION_END,r).emulateTransitionEnd(s)}else r();this._hoverState=""}},i.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},i.isWithContent=function(){return Boolean(this.getTitle())},i.addAttachmentClass=function(e){t(this.getTipElement()).addClass("bs-tooltip-"+e)},i.getTipElement=function(){return this.tip=this.tip||t(this.config.template)[0],this.tip},i.setContent=function(){var e=this.getTipElement();this.setElementContent(t(e.querySelectorAll(xt)),this.getTitle()),t(e).removeClass(Tt+" "+St)},i.setElementContent=function(e,n){"object"!=typeof n||!n.nodeType&&!n.jquery?this.config.html?(this.config.sanitize&&(n=ut(n,this.config.whiteList,this.config.sanitizeFn)),e.html(n)):e.text(n):this.config.html?t(n).parent().is(e)||e.empty().append(n):e.text(t(n).text())},i.getTitle=function(){var e=this.element.getAttribute("data-original-title");return e||(e="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),e},i._getPopperConfig=function(e){var t=this;return a({},{placement:e,modifiers:{offset:this._getOffset(),flip:{behavior:this.config.fallbackPlacement},arrow:{element:_t},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){return t._handlePopperPlacementChange(e)}},{},this.config.popperConfig)},i._getOffset=function(){var e=this,t={};return"function"==typeof this.config.offset?t.fn=function(t){return t.offsets=a({},t.offsets,{},e.config.offset(t.offsets,e.element)||{}),t}:t.offset=this.config.offset,t},i._getContainer=function(){return!1===this.config.container?document.body:c.isElement(this.config.container)?t(this.config.container):t(document).find(this.config.container)},i._getAttachment=function(e){return vt[e.toUpperCase()]},i._setListeners=function(){var e=this;this.config.trigger.split(" ").forEach((function(n){if("click"===n)t(e.element).on(e.constructor.Event.CLICK,e.config.selector,(function(t){return e.toggle(t)}));else if(n!==At){var i=n===Et?e.constructor.Event.MOUSEENTER:e.constructor.Event.FOCUSIN,o=n===Et?e.constructor.Event.MOUSELEAVE:e.constructor.Event.FOCUSOUT;t(e.element).on(i,e.config.selector,(function(t){return e._enter(t)})).on(o,e.config.selector,(function(t){return e._leave(t)}))}})),this._hideModalHandler=function(){e.element&&e.hide()},t(this.element).closest(".modal").on("hide.bs.modal",this._hideModalHandler),this.config.selector?this.config=a({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},i._fixTitle=function(){var e=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==e)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},i._enter=function(e,n){var i=this.constructor.DATA_KEY;(n=n||t(e.currentTarget).data(i))||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(i,n)),e&&(n._activeTrigger["focusin"===e.type?Ct:Et]=!0),t(n.getTipElement()).hasClass(St)||n._hoverState===yt?n._hoverState=yt:(clearTimeout(n._timeout),n._hoverState=yt,n.config.delay&&n.config.delay.show?n._timeout=setTimeout((function(){n._hoverState===yt&&n.show()}),n.config.delay.show):n.show())},i._leave=function(e,n){var i=this.constructor.DATA_KEY;(n=n||t(e.currentTarget).data(i))||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(i,n)),e&&(n._activeTrigger["focusout"===e.type?Ct:Et]=!1),n._isWithActiveTrigger()||(clearTimeout(n._timeout),n._hoverState=bt,n.config.delay&&n.config.delay.hide?n._timeout=setTimeout((function(){n._hoverState===bt&&n.hide()}),n.config.delay.hide):n.hide())},i._isWithActiveTrigger=function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1},i._getConfig=function(e){var n=t(this.element).data();return Object.keys(n).forEach((function(e){-1!==ht.indexOf(e)&&delete n[e]})),"number"==typeof(e=a({},this.constructor.Default,{},n,{},"object"==typeof e&&e?e:{})).delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),c.typeCheckConfig(dt,e,this.constructor.DefaultType),e.sanitize&&(e.template=ut(e.template,e.whiteList,e.sanitizeFn)),e},i._getDelegateConfig=function(){var e={};if(this.config)for(var t in this.config)this.constructor.Default[t]!==this.config[t]&&(e[t]=this.config[t]);return e},i._cleanTipClass=function(){var e=t(this.getTipElement()),n=e.attr("class").match(pt);null!==n&&n.length&&e.removeClass(n.join(""))},i._handlePopperPlacementChange=function(e){var t=e.instance;this.tip=t.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(e.placement))},i._fixTransition=function(){var e=this.getTipElement(),n=this.config.animation;null===e.getAttribute("x-placement")&&(t(e).removeClass(Tt),this.config.animation=!1,this.hide(),this.show(),this.config.animation=n)},e._jQueryInterface=function(n){return this.each((function(){var i=t(this).data("bs.tooltip"),o="object"==typeof n&&n;if((i||!/dispose|hide/.test(n))&&(i||(i=new e(this,o),t(this).data("bs.tooltip",i)),"string"==typeof n)){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n]()}}))},o(e,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return mt}},{key:"NAME",get:function(){return dt}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return wt}},{key:"EVENT_KEY",get:function(){return".bs.tooltip"}},{key:"DefaultType",get:function(){return gt}}]),e}();t.fn.tooltip=Dt._jQueryInterface,t.fn.tooltip.Constructor=Dt,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=ft,Dt._jQueryInterface};var Ot="popover",Lt=t.fn.popover,Nt=new RegExp("(^|\\s)bs-popover\\S+","g"),It=a({},Dt.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),jt=a({},Dt.DefaultType,{content:"(string|element|function)"}),Ht="fade",Pt="show",$t=".popover-header",Mt=".popover-body",Rt={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"},qt=function(e){var n,i;function r(){return e.apply(this,arguments)||this}i=e,(n=r).prototype=Object.create(i.prototype),n.prototype.constructor=n,n.__proto__=i;var s=r.prototype;return s.isWithContent=function(){return this.getTitle()||this._getContent()},s.addAttachmentClass=function(e){t(this.getTipElement()).addClass("bs-popover-"+e)},s.getTipElement=function(){return this.tip=this.tip||t(this.config.template)[0],this.tip},s.setContent=function(){var e=t(this.getTipElement());this.setElementContent(e.find($t),this.getTitle());var n=this._getContent();"function"==typeof n&&(n=n.call(this.element)),this.setElementContent(e.find(Mt),n),e.removeClass(Ht+" "+Pt)},s._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},s._cleanTipClass=function(){var e=t(this.getTipElement()),n=e.attr("class").match(Nt);null!==n&&n.length>0&&e.removeClass(n.join(""))},r._jQueryInterface=function(e){return this.each((function(){var n=t(this).data("bs.popover"),i="object"==typeof e?e:null;if((n||!/dispose|hide/.test(e))&&(n||(n=new r(this,i),t(this).data("bs.popover",n)),"string"==typeof e)){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e]()}}))},o(r,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return It}},{key:"NAME",get:function(){return Ot}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return Rt}},{key:"EVENT_KEY",get:function(){return".bs.popover"}},{key:"DefaultType",get:function(){return jt}}]),r}(Dt);t.fn.popover=qt._jQueryInterface,t.fn.popover.Constructor=qt,t.fn.popover.noConflict=function(){return t.fn.popover=Lt,qt._jQueryInterface};var zt="scrollspy",Wt=t.fn[zt],Ft={offset:10,method:"auto",target:""},Bt={offset:"number",method:"string",target:"(string|element)"},Ut={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},Yt="dropdown-item",Xt="active",Vt='[data-spy="scroll"]',Kt=".nav, .list-group",Qt=".nav-link",Gt=".nav-item",Jt=".list-group-item",Zt=".dropdown",en=".dropdown-item",tn=".dropdown-toggle",nn="offset",on="position",rn=function(){function e(e,n){var i=this;this._element=e,this._scrollElement="BODY"===e.tagName?window:e,this._config=this._getConfig(n),this._selector=this._config.target+" "+Qt+","+this._config.target+" "+Jt+","+this._config.target+" "+en,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,t(this._scrollElement).on(Ut.SCROLL,(function(e){return i._process(e)})),this.refresh(),this._process()}var n=e.prototype;return n.refresh=function(){var e=this,n=this._scrollElement===this._scrollElement.window?nn:on,i="auto"===this._config.method?n:this._config.method,o=i===on?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map((function(e){var n,r=c.getSelectorFromElement(e);if(r&&(n=document.querySelector(r)),n){var s=n.getBoundingClientRect();if(s.width||s.height)return[t(n)[i]().top+o,r]}return null})).filter((function(e){return e})).sort((function(e,t){return e[0]-t[0]})).forEach((function(t){e._offsets.push(t[0]),e._targets.push(t[1])}))},n.dispose=function(){t.removeData(this._element,"bs.scrollspy"),t(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},n._getConfig=function(e){if("string"!=typeof(e=a({},Ft,{},"object"==typeof e&&e?e:{})).target){var n=t(e.target).attr("id");n||(n=c.getUID(zt),t(e.target).attr("id",n)),e.target="#"+n}return c.typeCheckConfig(zt,e,Bt),e},n._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},n._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},n._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},n._process=function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=n){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var o=this._offsets.length;o--;)this._activeTarget!==this._targets[o]&&e>=this._offsets[o]&&(void 0===this._offsets[o+1]||e<this._offsets[o+1])&&this._activate(this._targets[o])}},n._activate=function(e){this._activeTarget=e,this._clear();var n=this._selector.split(",").map((function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'})),i=t([].slice.call(document.querySelectorAll(n.join(","))));i.hasClass(Yt)?(i.closest(Zt).find(tn).addClass(Xt),i.addClass(Xt)):(i.addClass(Xt),i.parents(Kt).prev(Qt+", "+Jt).addClass(Xt),i.parents(Kt).prev(Gt).children(Qt).addClass(Xt)),t(this._scrollElement).trigger(Ut.ACTIVATE,{relatedTarget:e})},n._clear=function(){[].slice.call(document.querySelectorAll(this._selector)).filter((function(e){return e.classList.contains(Xt)})).forEach((function(e){return e.classList.remove(Xt)}))},e._jQueryInterface=function(n){return this.each((function(){var i=t(this).data("bs.scrollspy");if(i||(i=new e(this,"object"==typeof n&&n),t(this).data("bs.scrollspy",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n]()}}))},o(e,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return Ft}}]),e}();t(window).on(Ut.LOAD_DATA_API,(function(){for(var e=[].slice.call(document.querySelectorAll(Vt)),n=e.length;n--;){var i=t(e[n]);rn._jQueryInterface.call(i,i.data())}})),t.fn[zt]=rn._jQueryInterface,t.fn[zt].Constructor=rn,t.fn[zt].noConflict=function(){return t.fn[zt]=Wt,rn._jQueryInterface};var sn=t.fn.tab,an={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},ln="dropdown-menu",cn="active",un="disabled",dn="fade",fn="show",pn=".dropdown",hn=".nav, .list-group",gn=".active",vn="> li > .active",mn='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',yn=".dropdown-toggle",bn="> .dropdown-menu .active",wn=function(){function e(e){this._element=e}var n=e.prototype;return n.show=function(){var e=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&t(this._element).hasClass(cn)||t(this._element).hasClass(un))){var n,i,o=t(this._element).closest(hn)[0],r=c.getSelectorFromElement(this._element);if(o){var s="UL"===o.nodeName||"OL"===o.nodeName?vn:gn;i=(i=t.makeArray(t(o).find(s)))[i.length-1]}var a=t.Event(an.HIDE,{relatedTarget:this._element}),l=t.Event(an.SHOW,{relatedTarget:i});if(i&&t(i).trigger(a),t(this._element).trigger(l),!l.isDefaultPrevented()&&!a.isDefaultPrevented()){r&&(n=document.querySelector(r)),this._activate(this._element,o);var u=function(){var n=t.Event(an.HIDDEN,{relatedTarget:e._element}),o=t.Event(an.SHOWN,{relatedTarget:i});t(i).trigger(n),t(e._element).trigger(o)};n?this._activate(n,n.parentNode,u):u()}}},n.dispose=function(){t.removeData(this._element,"bs.tab"),this._element=null},n._activate=function(e,n,i){var o=this,r=(!n||"UL"!==n.nodeName&&"OL"!==n.nodeName?t(n).children(gn):t(n).find(vn))[0],s=i&&r&&t(r).hasClass(dn),a=function(){return o._transitionComplete(e,r,i)};if(r&&s){var l=c.getTransitionDurationFromElement(r);t(r).removeClass(fn).one(c.TRANSITION_END,a).emulateTransitionEnd(l)}else a()},n._transitionComplete=function(e,n,i){if(n){t(n).removeClass(cn);var o=t(n.parentNode).find(bn)[0];o&&t(o).removeClass(cn),"tab"===n.getAttribute("role")&&n.setAttribute("aria-selected",!1)}if(t(e).addClass(cn),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),c.reflow(e),e.classList.contains(dn)&&e.classList.add(fn),e.parentNode&&t(e.parentNode).hasClass(ln)){var r=t(e).closest(pn)[0];if(r){var s=[].slice.call(r.querySelectorAll(yn));t(s).addClass(cn)}e.setAttribute("aria-expanded",!0)}i&&i()},e._jQueryInterface=function(n){return this.each((function(){var i=t(this),o=i.data("bs.tab");if(o||(o=new e(this),i.data("bs.tab",o)),"string"==typeof n){if(void 0===o[n])throw new TypeError('No method named "'+n+'"');o[n]()}}))},o(e,null,[{key:"VERSION",get:function(){return"4.4.1"}}]),e}();t(document).on(an.CLICK_DATA_API,mn,(function(e){e.preventDefault(),wn._jQueryInterface.call(t(this),"show")})),t.fn.tab=wn._jQueryInterface,t.fn.tab.Constructor=wn,t.fn.tab.noConflict=function(){return t.fn.tab=sn,wn._jQueryInterface};var Tn=t.fn.toast,Sn={CLICK_DISMISS:"click.dismiss.bs.toast",HIDE:"hide.bs.toast",HIDDEN:"hidden.bs.toast",SHOW:"show.bs.toast",SHOWN:"shown.bs.toast"},xn="fade",_n="hide",En="show",Cn="showing",kn={animation:"boolean",autohide:"boolean",delay:"number"},An={animation:!0,autohide:!0,delay:500},Dn='[data-dismiss="toast"]',On=function(){function e(e,t){this._element=e,this._config=this._getConfig(t),this._timeout=null,this._setListeners()}var n=e.prototype;return n.show=function(){var e=this,n=t.Event(Sn.SHOW);if(t(this._element).trigger(n),!n.isDefaultPrevented()){this._config.animation&&this._element.classList.add(xn);var i=function(){e._element.classList.remove(Cn),e._element.classList.add(En),t(e._element).trigger(Sn.SHOWN),e._config.autohide&&(e._timeout=setTimeout((function(){e.hide()}),e._config.delay))};if(this._element.classList.remove(_n),c.reflow(this._element),this._element.classList.add(Cn),this._config.animation){var o=c.getTransitionDurationFromElement(this._element);t(this._element).one(c.TRANSITION_END,i).emulateTransitionEnd(o)}else i()}},n.hide=function(){if(this._element.classList.contains(En)){var e=t.Event(Sn.HIDE);t(this._element).trigger(e),e.isDefaultPrevented()||this._close()}},n.dispose=function(){clearTimeout(this._timeout),this._timeout=null,this._element.classList.contains(En)&&this._element.classList.remove(En),t(this._element).off(Sn.CLICK_DISMISS),t.removeData(this._element,"bs.toast"),this._element=null,this._config=null},n._getConfig=function(e){return e=a({},An,{},t(this._element).data(),{},"object"==typeof e&&e?e:{}),c.typeCheckConfig("toast",e,this.constructor.DefaultType),e},n._setListeners=function(){var e=this;t(this._element).on(Sn.CLICK_DISMISS,Dn,(function(){return e.hide()}))},n._close=function(){var e=this,n=function(){e._element.classList.add(_n),t(e._element).trigger(Sn.HIDDEN)};if(this._element.classList.remove(En),this._config.animation){var i=c.getTransitionDurationFromElement(this._element);t(this._element).one(c.TRANSITION_END,n).emulateTransitionEnd(i)}else n()},e._jQueryInterface=function(n){return this.each((function(){var i=t(this),o=i.data("bs.toast");if(o||(o=new e(this,"object"==typeof n&&n),i.data("bs.toast",o)),"string"==typeof n){if(void 0===o[n])throw new TypeError('No method named "'+n+'"');o[n](this)}}))},o(e,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"DefaultType",get:function(){return kn}},{key:"Default",get:function(){return An}}]),e}();t.fn.toast=On._jQueryInterface,t.fn.toast.Constructor=On,t.fn.toast.noConflict=function(){return t.fn.toast=Tn,On._jQueryInterface},e.Alert=g,e.Button=A,e.Carousel=ne,e.Collapse=ve,e.Dropdown=ze,e.Modal=rt,e.Popover=qt,e.Scrollspy=rn,e.Tab=wn,e.Toast=On,e.Tooltip=Dt,e.Util=c,Object.defineProperty(e,"__esModule",{value:!0})}(t,n(0),n(20))},function(e,t,n){"use strict";n.r(t),function(e){
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,i=function(){for(var e=["Edge","Trident","Firefox"],t=0;t<e.length;t+=1)if(n&&navigator.userAgent.indexOf(e[t])>=0)return 1;return 0}();var o=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then((function(){t=!1,e()})))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout((function(){t=!1,e()}),i))}};function r(e){return e&&"[object Function]"==={}.toString.call(e)}function s(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function a(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function l(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=s(e),n=t.overflow,i=t.overflowX,o=t.overflowY;return/(auto|scroll|overlay)/.test(n+o+i)?e:l(a(e))}function c(e){return e&&e.referenceNode?e.referenceNode:e}var u=n&&!(!window.MSInputMethodContext||!document.documentMode),d=n&&/MSIE 10/.test(navigator.userAgent);function f(e){return 11===e?u:10===e?d:u||d}function p(e){if(!e)return document.documentElement;for(var t=f(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var i=n&&n.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===s(n,"position")?p(n):n:e?e.ownerDocument.documentElement:document.documentElement}function h(e){return null!==e.parentNode?h(e.parentNode):e}function g(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?e:t,o=n?t:e,r=document.createRange();r.setStart(i,0),r.setEnd(o,0);var s,a,l=r.commonAncestorContainer;if(e!==l&&t!==l||i.contains(o))return"BODY"===(a=(s=l).nodeName)||"HTML"!==a&&p(s.firstElementChild)!==s?p(l):l;var c=h(e);return c.host?g(c.host,t):g(e,h(t).host)}function v(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",n="top"===t?"scrollTop":"scrollLeft",i=e.nodeName;if("BODY"===i||"HTML"===i){var o=e.ownerDocument.documentElement,r=e.ownerDocument.scrollingElement||o;return r[n]}return e[n]}function m(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=v(t,"top"),o=v(t,"left"),r=n?-1:1;return e.top+=i*r,e.bottom+=i*r,e.left+=o*r,e.right+=o*r,e}function y(e,t){var n="x"===t?"Left":"Top",i="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"])+parseFloat(e["border"+i+"Width"])}function b(e,t,n,i){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],f(10)?parseInt(n["offset"+e])+parseInt(i["margin"+("Height"===e?"Top":"Left")])+parseInt(i["margin"+("Height"===e?"Bottom":"Right")]):0)}function w(e){var t=e.body,n=e.documentElement,i=f(10)&&getComputedStyle(n);return{height:b("Height",t,n,i),width:b("Width",t,n,i)}}var T=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},S=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),x=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},_=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e};function E(e){return _({},e,{right:e.left+e.width,bottom:e.top+e.height})}function C(e){var t={};try{if(f(10)){t=e.getBoundingClientRect();var n=v(e,"top"),i=v(e,"left");t.top+=n,t.left+=i,t.bottom+=n,t.right+=i}else t=e.getBoundingClientRect()}catch(e){}var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},r="HTML"===e.nodeName?w(e.ownerDocument):{},a=r.width||e.clientWidth||o.width,l=r.height||e.clientHeight||o.height,c=e.offsetWidth-a,u=e.offsetHeight-l;if(c||u){var d=s(e);c-=y(d,"x"),u-=y(d,"y"),o.width-=c,o.height-=u}return E(o)}function k(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=f(10),o="HTML"===t.nodeName,r=C(e),a=C(t),c=l(e),u=s(t),d=parseFloat(u.borderTopWidth),p=parseFloat(u.borderLeftWidth);n&&o&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var h=E({top:r.top-a.top-d,left:r.left-a.left-p,width:r.width,height:r.height});if(h.marginTop=0,h.marginLeft=0,!i&&o){var g=parseFloat(u.marginTop),v=parseFloat(u.marginLeft);h.top-=d-g,h.bottom-=d-g,h.left-=p-v,h.right-=p-v,h.marginTop=g,h.marginLeft=v}return(i&&!n?t.contains(c):t===c&&"BODY"!==c.nodeName)&&(h=m(h,t)),h}function A(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,i=k(e,n),o=Math.max(n.clientWidth,window.innerWidth||0),r=Math.max(n.clientHeight,window.innerHeight||0),s=t?0:v(n),a=t?0:v(n,"left"),l={top:s-i.top+i.marginTop,left:a-i.left+i.marginLeft,width:o,height:r};return E(l)}function D(e){var t=e.nodeName;if("BODY"===t||"HTML"===t)return!1;if("fixed"===s(e,"position"))return!0;var n=a(e);return!!n&&D(n)}function O(e){if(!e||!e.parentElement||f())return document.documentElement;for(var t=e.parentElement;t&&"none"===s(t,"transform");)t=t.parentElement;return t||document.documentElement}function L(e,t,n,i){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r={top:0,left:0},s=o?O(e):g(e,c(t));if("viewport"===i)r=A(s,o);else{var u=void 0;"scrollParent"===i?"BODY"===(u=l(a(t))).nodeName&&(u=e.ownerDocument.documentElement):u="window"===i?e.ownerDocument.documentElement:i;var d=k(u,s,o);if("HTML"!==u.nodeName||D(s))r=d;else{var f=w(e.ownerDocument),p=f.height,h=f.width;r.top+=d.top-d.marginTop,r.bottom=p+d.top,r.left+=d.left-d.marginLeft,r.right=h+d.left}}var v="number"==typeof(n=n||0);return r.left+=v?n:n.left||0,r.top+=v?n:n.top||0,r.right-=v?n:n.right||0,r.bottom-=v?n:n.bottom||0,r}function N(e){return e.width*e.height}function I(e,t,n,i,o){var r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var s=L(n,i,r,o),a={top:{width:s.width,height:t.top-s.top},right:{width:s.right-t.right,height:s.height},bottom:{width:s.width,height:s.bottom-t.bottom},left:{width:t.left-s.left,height:s.height}},l=Object.keys(a).map((function(e){return _({key:e},a[e],{area:N(a[e])})})).sort((function(e,t){return t.area-e.area})),c=l.filter((function(e){var t=e.width,i=e.height;return t>=n.clientWidth&&i>=n.clientHeight})),u=c.length>0?c[0].key:l[0].key,d=e.split("-")[1];return u+(d?"-"+d:"")}function j(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o=i?O(t):g(t,c(n));return k(n,o,i)}function H(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),i=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+i,height:e.offsetHeight+n}}function P(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,(function(e){return t[e]}))}function $(e,t,n){n=n.split("-")[0];var i=H(e),o={width:i.width,height:i.height},r=-1!==["right","left"].indexOf(n),s=r?"top":"left",a=r?"left":"top",l=r?"height":"width",c=r?"width":"height";return o[s]=t[s]+t[l]/2-i[l]/2,o[a]=n===a?t[a]-i[c]:t[P(a)],o}function M(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function R(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex((function(e){return e[t]===n}));var i=M(e,(function(e){return e[t]===n}));return e.indexOf(i)}(e,"name",n))).forEach((function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&r(n)&&(t.offsets.popper=E(t.offsets.popper),t.offsets.reference=E(t.offsets.reference),t=n(t,e))})),t}function q(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=j(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=I(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=$(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=R(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function z(e,t){return e.some((function(e){var n=e.name;return e.enabled&&n===t}))}function W(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length;i++){var o=t[i],r=o?""+o+n:e;if(void 0!==document.body.style[r])return r}return null}function F(){return this.state.isDestroyed=!0,z(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[W("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function B(e){var t=e.ownerDocument;return t?t.defaultView:window}function U(e,t,n,i){n.updateBound=i,B(e).addEventListener("resize",n.updateBound,{passive:!0});var o=l(e);return function e(t,n,i,o){var r="BODY"===t.nodeName,s=r?t.ownerDocument.defaultView:t;s.addEventListener(n,i,{passive:!0}),r||e(l(s.parentNode),n,i,o),o.push(s)}(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function Y(){this.state.eventsEnabled||(this.state=U(this.reference,this.options,this.state,this.scheduleUpdate))}function X(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,B(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach((function(e){e.removeEventListener("scroll",t.updateBound)})),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function V(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function K(e,t){Object.keys(t).forEach((function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&V(t[n])&&(i="px"),e.style[n]=t[n]+i}))}var Q=n&&/Firefox/i.test(navigator.userAgent);function G(e,t,n){var i=M(e,(function(e){return e.name===t})),o=!!i&&e.some((function(e){return e.name===n&&e.enabled&&e.order<i.order}));if(!o){var r="`"+t+"`",s="`"+n+"`";console.warn(s+" modifier is required by "+r+" modifier in order to work, be sure to include it before "+r+"!")}return o}var J=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],Z=J.slice(3);function ee(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=Z.indexOf(e),i=Z.slice(n+1).concat(Z.slice(0,n));return t?i.reverse():i}var te="flip",ne="clockwise",ie="counterclockwise";function oe(e,t,n,i){var o=[0,0],r=-1!==["right","left"].indexOf(i),s=e.split(/(\+|\-)/).map((function(e){return e.trim()})),a=s.indexOf(M(s,(function(e){return-1!==e.search(/,|\s/)})));s[a]&&-1===s[a].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,c=-1!==a?[s.slice(0,a).concat([s[a].split(l)[0]]),[s[a].split(l)[1]].concat(s.slice(a+1))]:[s];return(c=c.map((function(e,i){var o=(1===i?!r:r)?"height":"width",s=!1;return e.reduce((function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,s=!0,e):s?(e[e.length-1]+=t,s=!1,e):e.concat(t)}),[]).map((function(e){return function(e,t,n,i){var o=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),r=+o[1],s=o[2];if(!r)return e;if(0===s.indexOf("%")){var a=void 0;switch(s){case"%p":a=n;break;case"%":case"%r":default:a=i}return E(a)[t]/100*r}if("vh"===s||"vw"===s){return("vh"===s?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*r}return r}(e,o,t,n)}))}))).forEach((function(e,t){e.forEach((function(n,i){V(n)&&(o[t]+=n*("-"===e[i-1]?-1:1))}))})),o}var re={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],i=t.split("-")[1];if(i){var o=e.offsets,r=o.reference,s=o.popper,a=-1!==["bottom","top"].indexOf(n),l=a?"left":"top",c=a?"width":"height",u={start:x({},l,r[l]),end:x({},l,r[l]+r[c]-s[c])};e.offsets.popper=_({},s,u[i])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,i=e.placement,o=e.offsets,r=o.popper,s=o.reference,a=i.split("-")[0],l=void 0;return l=V(+n)?[+n,0]:oe(n,r,s,a),"left"===a?(r.top+=l[0],r.left-=l[1]):"right"===a?(r.top+=l[0],r.left+=l[1]):"top"===a?(r.left+=l[0],r.top-=l[1]):"bottom"===a&&(r.left+=l[0],r.top+=l[1]),e.popper=r,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||p(e.instance.popper);e.instance.reference===n&&(n=p(n));var i=W("transform"),o=e.instance.popper.style,r=o.top,s=o.left,a=o[i];o.top="",o.left="",o[i]="";var l=L(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);o.top=r,o.left=s,o[i]=a,t.boundaries=l;var c=t.priority,u=e.offsets.popper,d={primary:function(e){var n=u[e];return u[e]<l[e]&&!t.escapeWithReference&&(n=Math.max(u[e],l[e])),x({},e,n)},secondary:function(e){var n="right"===e?"left":"top",i=u[n];return u[e]>l[e]&&!t.escapeWithReference&&(i=Math.min(u[n],l[e]-("right"===e?u.width:u.height))),x({},n,i)}};return c.forEach((function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";u=_({},u,d[t](e))})),e.offsets.popper=u,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,i=t.reference,o=e.placement.split("-")[0],r=Math.floor,s=-1!==["top","bottom"].indexOf(o),a=s?"right":"bottom",l=s?"left":"top",c=s?"width":"height";return n[a]<r(i[l])&&(e.offsets.popper[l]=r(i[l])-n[c]),n[l]>r(i[a])&&(e.offsets.popper[l]=r(i[a])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!G(e.instance.modifiers,"arrow","keepTogether"))return e;var i=t.element;if("string"==typeof i){if(!(i=e.instance.popper.querySelector(i)))return e}else if(!e.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var o=e.placement.split("-")[0],r=e.offsets,a=r.popper,l=r.reference,c=-1!==["left","right"].indexOf(o),u=c?"height":"width",d=c?"Top":"Left",f=d.toLowerCase(),p=c?"left":"top",h=c?"bottom":"right",g=H(i)[u];l[h]-g<a[f]&&(e.offsets.popper[f]-=a[f]-(l[h]-g)),l[f]+g>a[h]&&(e.offsets.popper[f]+=l[f]+g-a[h]),e.offsets.popper=E(e.offsets.popper);var v=l[f]+l[u]/2-g/2,m=s(e.instance.popper),y=parseFloat(m["margin"+d]),b=parseFloat(m["border"+d+"Width"]),w=v-e.offsets.popper[f]-y-b;return w=Math.max(Math.min(a[u]-g,w),0),e.arrowElement=i,e.offsets.arrow=(x(n={},f,Math.round(w)),x(n,p,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(z(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=L(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),i=e.placement.split("-")[0],o=P(i),r=e.placement.split("-")[1]||"",s=[];switch(t.behavior){case te:s=[i,o];break;case ne:s=ee(i);break;case ie:s=ee(i,!0);break;default:s=t.behavior}return s.forEach((function(a,l){if(i!==a||s.length===l+1)return e;i=e.placement.split("-")[0],o=P(i);var c=e.offsets.popper,u=e.offsets.reference,d=Math.floor,f="left"===i&&d(c.right)>d(u.left)||"right"===i&&d(c.left)<d(u.right)||"top"===i&&d(c.bottom)>d(u.top)||"bottom"===i&&d(c.top)<d(u.bottom),p=d(c.left)<d(n.left),h=d(c.right)>d(n.right),g=d(c.top)<d(n.top),v=d(c.bottom)>d(n.bottom),m="left"===i&&p||"right"===i&&h||"top"===i&&g||"bottom"===i&&v,y=-1!==["top","bottom"].indexOf(i),b=!!t.flipVariations&&(y&&"start"===r&&p||y&&"end"===r&&h||!y&&"start"===r&&g||!y&&"end"===r&&v),w=!!t.flipVariationsByContent&&(y&&"start"===r&&h||y&&"end"===r&&p||!y&&"start"===r&&v||!y&&"end"===r&&g),T=b||w;(f||m||T)&&(e.flipped=!0,(f||m)&&(i=s[l+1]),T&&(r=function(e){return"end"===e?"start":"start"===e?"end":e}(r)),e.placement=i+(r?"-"+r:""),e.offsets.popper=_({},e.offsets.popper,$(e.instance.popper,e.offsets.reference,e.placement)),e=R(e.instance.modifiers,e,"flip"))})),e},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],i=e.offsets,o=i.popper,r=i.reference,s=-1!==["left","right"].indexOf(n),a=-1===["top","left"].indexOf(n);return o[s?"left":"top"]=r[n]-(a?o[s?"width":"height"]:0),e.placement=P(t),e.offsets.popper=E(o),e}},hide:{order:800,enabled:!0,fn:function(e){if(!G(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=M(e.instance.modifiers,(function(e){return"preventOverflow"===e.name})).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,i=t.y,o=e.offsets.popper,r=M(e.instance.modifiers,(function(e){return"applyStyle"===e.name})).gpuAcceleration;void 0!==r&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s=void 0!==r?r:t.gpuAcceleration,a=p(e.instance.popper),l=C(a),c={position:o.position},u=function(e,t){var n=e.offsets,i=n.popper,o=n.reference,r=Math.round,s=Math.floor,a=function(e){return e},l=r(o.width),c=r(i.width),u=-1!==["left","right"].indexOf(e.placement),d=-1!==e.placement.indexOf("-"),f=t?u||d||l%2==c%2?r:s:a,p=t?r:a;return{left:f(l%2==1&&c%2==1&&!d&&t?i.left-1:i.left),top:p(i.top),bottom:p(i.bottom),right:f(i.right)}}(e,window.devicePixelRatio<2||!Q),d="bottom"===n?"top":"bottom",f="right"===i?"left":"right",h=W("transform"),g=void 0,v=void 0;if(v="bottom"===d?"HTML"===a.nodeName?-a.clientHeight+u.bottom:-l.height+u.bottom:u.top,g="right"===f?"HTML"===a.nodeName?-a.clientWidth+u.right:-l.width+u.right:u.left,s&&h)c[h]="translate3d("+g+"px, "+v+"px, 0)",c[d]=0,c[f]=0,c.willChange="transform";else{var m="bottom"===d?-1:1,y="right"===f?-1:1;c[d]=v*m,c[f]=g*y,c.willChange=d+", "+f}var b={"x-placement":e.placement};return e.attributes=_({},b,e.attributes),e.styles=_({},c,e.styles),e.arrowStyles=_({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return K(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach((function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)})),e.arrowElement&&Object.keys(e.arrowStyles).length&&K(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,i,o){var r=j(o,t,e,n.positionFixed),s=I(n.placement,r,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",s),K(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},se=function(){function e(t,n){var i=this,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};T(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=o(this.update.bind(this)),this.options=_({},e.Defaults,s),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(_({},e.Defaults.modifiers,s.modifiers)).forEach((function(t){i.options.modifiers[t]=_({},e.Defaults.modifiers[t]||{},s.modifiers?s.modifiers[t]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(e){return _({name:e},i.options.modifiers[e])})).sort((function(e,t){return e.order-t.order})),this.modifiers.forEach((function(e){e.enabled&&r(e.onLoad)&&e.onLoad(i.reference,i.popper,i.options,e,i.state)})),this.update();var a=this.options.eventsEnabled;a&&this.enableEventListeners(),this.state.eventsEnabled=a}return S(e,[{key:"update",value:function(){return q.call(this)}},{key:"destroy",value:function(){return F.call(this)}},{key:"enableEventListeners",value:function(){return Y.call(this)}},{key:"disableEventListeners",value:function(){return X.call(this)}}]),e}();se.Utils=("undefined"!=typeof window?window:e).PopperUtils,se.placements=J,se.Defaults=re,t.default=se}.call(this,n(2))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,